!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AAA_MODE_ALBUM	lib.h	/^	AAA_MODE_ALBUM$/;"	e	enum:aaa_mode
AAA_MODE_ALL	lib.h	/^	AAA_MODE_ALL,$/;"	e	enum:aaa_mode
AAA_MODE_ARTIST	lib.h	/^	AAA_MODE_ARTIST,$/;"	e	enum:aaa_mode
ALIGN	cache.c	41;"	d	file:
BRIGHT	options.h	116;"	d
BROWSER_ENTRY_DIR	browser.h	/^	enum { BROWSER_ENTRY_DIR, BROWSER_ENTRY_FILE, BROWSER_ENTRY_PLLINE } type;$/;"	e	enum:browser_entry::__anon1
BROWSER_ENTRY_FILE	browser.h	/^	enum { BROWSER_ENTRY_DIR, BROWSER_ENTRY_FILE, BROWSER_ENTRY_PLLINE } type;$/;"	e	enum:browser_entry::__anon1
BROWSER_ENTRY_PLLINE	browser.h	/^	enum { BROWSER_ENTRY_DIR, BROWSER_ENTRY_FILE, BROWSER_ENTRY_PLLINE } type;$/;"	e	enum:browser_entry::__anon1
BROWSER_VIEW	options.h	/^	BROWSER_VIEW,$/;"	e	enum:__anon24
BUG	debug.h	19;"	d
BUG_ON	debug.h	23;"	d
CACHE_64_BIT	cache.c	21;"	d	file:
CACHE_BE	cache.c	22;"	d	file:
CACHE_H	cache.h	2;"	d
CC	config.mk	/^CC = gcc$/;"	m
CFLAGS	config.mk	/^CFLAGS = -g -O2 -Wall  -DHAVE_CONFIG  -std=gnu99 -pipe -Wall -Wshadow -Wcast-align -Wpointer-arith -Wwrite-strings -Wundef -Wmissing-prototypes -Wredundant-decls -Wextra -Wno-sign-compare -Wformat-security -Wdeclaration-after-statement -Wold-style-definition -Wno-pointer-sign -Werror-implicit-function-declaration -Wno-unused-parameter -MMD -MP -MF .dep-$(subst \/,-,$@) -DREALTIME_SCHEDULING$/;"	m
CHANNELS_MAX	channelmap.h	6;"	d
CHANNEL_MAP	channelmap.h	50;"	d
CHANNEL_MAP_INIT	channelmap.h	48;"	d
CHANNEL_POSITION_CENTER	channelmap.h	/^	CHANNEL_POSITION_CENTER = CHANNEL_POSITION_FRONT_CENTER,$/;"	e	enum:channel_position
CHANNEL_POSITION_FRONT_CENTER	channelmap.h	/^	CHANNEL_POSITION_FRONT_CENTER,$/;"	e	enum:channel_position
CHANNEL_POSITION_FRONT_LEFT	channelmap.h	/^	CHANNEL_POSITION_FRONT_LEFT,$/;"	e	enum:channel_position
CHANNEL_POSITION_FRONT_LEFT_OF_CENTER	channelmap.h	/^	CHANNEL_POSITION_FRONT_LEFT_OF_CENTER,$/;"	e	enum:channel_position
CHANNEL_POSITION_FRONT_RIGHT	channelmap.h	/^	CHANNEL_POSITION_FRONT_RIGHT,$/;"	e	enum:channel_position
CHANNEL_POSITION_FRONT_RIGHT_OF_CENTER	channelmap.h	/^	CHANNEL_POSITION_FRONT_RIGHT_OF_CENTER,$/;"	e	enum:channel_position
CHANNEL_POSITION_INVALID	channelmap.h	/^	CHANNEL_POSITION_INVALID = -1,$/;"	e	enum:channel_position
CHANNEL_POSITION_LEFT	channelmap.h	/^	CHANNEL_POSITION_LEFT = CHANNEL_POSITION_FRONT_LEFT,$/;"	e	enum:channel_position
CHANNEL_POSITION_LFE	channelmap.h	/^	CHANNEL_POSITION_LFE,$/;"	e	enum:channel_position
CHANNEL_POSITION_MAX	channelmap.h	/^	CHANNEL_POSITION_MAX$/;"	e	enum:channel_position
CHANNEL_POSITION_MONO	channelmap.h	/^	CHANNEL_POSITION_MONO = 0,$/;"	e	enum:channel_position
CHANNEL_POSITION_REAR_CENTER	channelmap.h	/^	CHANNEL_POSITION_REAR_CENTER,$/;"	e	enum:channel_position
CHANNEL_POSITION_REAR_LEFT	channelmap.h	/^	CHANNEL_POSITION_REAR_LEFT,$/;"	e	enum:channel_position
CHANNEL_POSITION_REAR_RIGHT	channelmap.h	/^	CHANNEL_POSITION_REAR_RIGHT,$/;"	e	enum:channel_position
CHANNEL_POSITION_RIGHT	channelmap.h	/^	CHANNEL_POSITION_RIGHT = CHANNEL_POSITION_FRONT_RIGHT,$/;"	e	enum:channel_position
CHANNEL_POSITION_SIDE_LEFT	channelmap.h	/^	CHANNEL_POSITION_SIDE_LEFT,$/;"	e	enum:channel_position
CHANNEL_POSITION_SIDE_RIGHT	channelmap.h	/^	CHANNEL_POSITION_SIDE_RIGHT,$/;"	e	enum:channel_position
CHANNEL_POSITION_SUBWOOFER	channelmap.h	/^	CHANNEL_POSITION_SUBWOOFER = CHANNEL_POSITION_LFE,$/;"	e	enum:channel_position
CHANNEL_POSITION_TOP_CENTER	channelmap.h	/^	CHANNEL_POSITION_TOP_CENTER,$/;"	e	enum:channel_position
CHANNEL_POSITION_TOP_FRONT_CENTER	channelmap.h	/^	CHANNEL_POSITION_TOP_FRONT_CENTER,$/;"	e	enum:channel_position
CHANNEL_POSITION_TOP_FRONT_LEFT	channelmap.h	/^	CHANNEL_POSITION_TOP_FRONT_LEFT,$/;"	e	enum:channel_position
CHANNEL_POSITION_TOP_FRONT_RIGHT	channelmap.h	/^	CHANNEL_POSITION_TOP_FRONT_RIGHT,$/;"	e	enum:channel_position
CHANNEL_POSITION_TOP_REAR_CENTER	channelmap.h	/^	CHANNEL_POSITION_TOP_REAR_CENTER,$/;"	e	enum:channel_position
CHANNEL_POSITION_TOP_REAR_LEFT	channelmap.h	/^	CHANNEL_POSITION_TOP_REAR_LEFT,$/;"	e	enum:channel_position
CHANNEL_POSITION_TOP_REAR_RIGHT	channelmap.h	/^	CHANNEL_POSITION_TOP_REAR_RIGHT,$/;"	e	enum:channel_position
CHUNK_SIZE	buffer.h	5;"	d
CMDLINE_H	cmdline.h	2;"	d
CMD_LIVE	command_mode.h	/^	CMD_LIVE	= 1 << 1,$/;"	e	enum:__anon2
CMD_UNSAFE	command_mode.h	/^	CMD_UNSAFE	= 1 << 0,$/;"	e	enum:__anon2
CMUS_COND_INITIALIZER	locking.h	7;"	d
CMUS_LIBS	Makefile	/^CMUS_LIBS = $(PTHREAD_LIBS) $(NCURSES_LIBS) $(ICONV_LIBS) $(DL_LIBS) $(DISCID_LIBS) $(CUE_LIBS) -lm $(COMPAT_LIBS)$/;"	m
CMUS_MUTEX_INITIALIZER	locking.h	6;"	d
COLOR_CMDLINE_ATTR	options.h	/^	COLOR_CMDLINE_ATTR,$/;"	e	enum:__anon26
COLOR_CMDLINE_BG	options.h	/^	COLOR_CMDLINE_BG,$/;"	e	enum:__anon25
COLOR_CMDLINE_FG	options.h	/^	COLOR_CMDLINE_FG,$/;"	e	enum:__anon25
COLOR_CUR_SEL_ATTR	options.h	/^	COLOR_CUR_SEL_ATTR,$/;"	e	enum:__anon26
COLOR_ERROR	options.h	/^	COLOR_ERROR,$/;"	e	enum:__anon25
COLOR_INFO	options.h	/^	COLOR_INFO,$/;"	e	enum:__anon25
COLOR_SEPARATOR	options.h	/^	COLOR_SEPARATOR,$/;"	e	enum:__anon25
COLOR_STATUSLINE_ATTR	options.h	/^	COLOR_STATUSLINE_ATTR,$/;"	e	enum:__anon26
COLOR_STATUSLINE_BG	options.h	/^	COLOR_STATUSLINE_BG,$/;"	e	enum:__anon25
COLOR_STATUSLINE_FG	options.h	/^	COLOR_STATUSLINE_FG,$/;"	e	enum:__anon25
COLOR_TITLELINE_ATTR	options.h	/^	COLOR_TITLELINE_ATTR,$/;"	e	enum:__anon26
COLOR_TITLELINE_BG	options.h	/^	COLOR_TITLELINE_BG,$/;"	e	enum:__anon25
COLOR_TITLELINE_FG	options.h	/^	COLOR_TITLELINE_FG,$/;"	e	enum:__anon25
COLOR_WIN_ATTR	options.h	/^	COLOR_WIN_ATTR,$/;"	e	enum:__anon26
COLOR_WIN_BG	options.h	/^	COLOR_WIN_BG,$/;"	e	enum:__anon25
COLOR_WIN_CUR	options.h	/^	COLOR_WIN_CUR,$/;"	e	enum:__anon25
COLOR_WIN_CUR_SEL_ATTR	options.h	/^	COLOR_WIN_CUR_SEL_ATTR,$/;"	e	enum:__anon26
COLOR_WIN_CUR_SEL_BG	options.h	/^	COLOR_WIN_CUR_SEL_BG,$/;"	e	enum:__anon25
COLOR_WIN_CUR_SEL_FG	options.h	/^	COLOR_WIN_CUR_SEL_FG,$/;"	e	enum:__anon25
COLOR_WIN_DIR	options.h	/^	COLOR_WIN_DIR,$/;"	e	enum:__anon25
COLOR_WIN_FG	options.h	/^	COLOR_WIN_FG,$/;"	e	enum:__anon25
COLOR_WIN_INACTIVE_CUR_SEL_ATTR	options.h	/^	COLOR_WIN_INACTIVE_CUR_SEL_ATTR,$/;"	e	enum:__anon26
COLOR_WIN_INACTIVE_CUR_SEL_BG	options.h	/^	COLOR_WIN_INACTIVE_CUR_SEL_BG,$/;"	e	enum:__anon25
COLOR_WIN_INACTIVE_CUR_SEL_FG	options.h	/^	COLOR_WIN_INACTIVE_CUR_SEL_FG,$/;"	e	enum:__anon25
COLOR_WIN_INACTIVE_SEL_ATTR	options.h	/^	COLOR_WIN_INACTIVE_SEL_ATTR,$/;"	e	enum:__anon26
COLOR_WIN_INACTIVE_SEL_BG	options.h	/^	COLOR_WIN_INACTIVE_SEL_BG,$/;"	e	enum:__anon25
COLOR_WIN_INACTIVE_SEL_FG	options.h	/^	COLOR_WIN_INACTIVE_SEL_FG,$/;"	e	enum:__anon25
COLOR_WIN_SEL_ATTR	options.h	/^	COLOR_WIN_SEL_ATTR,$/;"	e	enum:__anon26
COLOR_WIN_SEL_BG	options.h	/^	COLOR_WIN_SEL_BG,$/;"	e	enum:__anon25
COLOR_WIN_SEL_FG	options.h	/^	COLOR_WIN_SEL_FG,$/;"	e	enum:__anon25
COLOR_WIN_TITLE_ATTR	options.h	/^	COLOR_WIN_TITLE_ATTR,$/;"	e	enum:__anon26
COLOR_WIN_TITLE_BG	options.h	/^	COLOR_WIN_TITLE_BG,$/;"	e	enum:__anon25
COLOR_WIN_TITLE_FG	options.h	/^	COLOR_WIN_TITLE_FG,$/;"	e	enum:__anon25
COMB_BASE	expr.c	35;"	d	file:
COMMAND_MODE	ui_curses.h	/^	COMMAND_MODE,$/;"	e	enum:ui_input_mode
COMPAT_LIBS	config.mk	/^COMPAT_LIBS = $/;"	m
COMPILER_H	compiler.h	2;"	d
CONFIG_AAC	config.mk	/^CONFIG_AAC = n$/;"	m
CONFIG_ALSA	config.mk	/^CONFIG_ALSA = n$/;"	m
CONFIG_AO	config.mk	/^CONFIG_AO = n$/;"	m
CONFIG_ARTS	config.mk	/^CONFIG_ARTS = n$/;"	m
CONFIG_CDIO	config.mk	/^CONFIG_CDIO = n$/;"	m
CONFIG_CDIO_H	config/cdio.h	2;"	d
CONFIG_CUE	config.mk	/^CONFIG_CUE = n$/;"	m
CONFIG_CUE_H	config/cue.h	2;"	d
CONFIG_CURSES_H	config/curses.h	2;"	d
CONFIG_DATADIR_H	config/datadir.h	2;"	d
CONFIG_DEBUG_H	config/debug.h	2;"	d
CONFIG_FFMPEG	config.mk	/^CONFIG_FFMPEG = n$/;"	m
CONFIG_FFMPEG_H	config/ffmpeg.h	2;"	d
CONFIG_FLAC	config.mk	/^CONFIG_FLAC = n$/;"	m
CONFIG_ICONV_H	config/iconv.h	2;"	d
CONFIG_LIBDIR_H	config/libdir.h	2;"	d
CONFIG_MAD	config.mk	/^CONFIG_MAD = n$/;"	m
CONFIG_MIKMOD	config.mk	/^CONFIG_MIKMOD = n$/;"	m
CONFIG_MODPLUG	config.mk	/^CONFIG_MODPLUG = n$/;"	m
CONFIG_MODPLUG_H	config/modplug.h	2;"	d
CONFIG_MP4	config.mk	/^CONFIG_MP4 = n$/;"	m
CONFIG_MP4_H	config/mp4.h	2;"	d
CONFIG_MPC	config.mk	/^CONFIG_MPC = n$/;"	m
CONFIG_MPC_H	config/mpc.h	2;"	d
CONFIG_OPUS	config.mk	/^CONFIG_OPUS = n$/;"	m
CONFIG_OSS	config.mk	/^CONFIG_OSS = n$/;"	m
CONFIG_PULSE	config.mk	/^CONFIG_PULSE = n$/;"	m
CONFIG_ROAR	config.mk	/^CONFIG_ROAR = n$/;"	m
CONFIG_SUN	config.mk	/^CONFIG_SUN = n$/;"	m
CONFIG_TREMOR_H	config/tremor.h	2;"	d
CONFIG_UTILS_H	config/utils.h	2;"	d
CONFIG_VORBIS	config.mk	/^CONFIG_VORBIS = n$/;"	m
CONFIG_WAV	config.mk	/^CONFIG_WAV = y$/;"	m
CONFIG_WAVEOUT	config.mk	/^CONFIG_WAVEOUT = n$/;"	m
CONFIG_WAVPACK	config.mk	/^CONFIG_WAVPACK = n$/;"	m
CONFIG_XMALLOC_H	config/xmalloc.h	2;"	d
CONVERT_H	convert.h	2;"	d
CS_PAUSED	player.c	/^	CS_PAUSED$/;"	e	enum:consumer_status	file:
CS_PLAYING	player.c	/^	CS_PLAYING,$/;"	e	enum:consumer_status	file:
CS_STOPPED	player.c	/^	CS_STOPPED,$/;"	e	enum:consumer_status	file:
CTX_BROWSER	keys.h	/^	CTX_BROWSER,$/;"	e	enum:key_context
CTX_COMMON	keys.h	/^	CTX_COMMON,$/;"	e	enum:key_context
CTX_FILTERS	keys.h	/^	CTX_FILTERS,$/;"	e	enum:key_context
CTX_LIBRARY	keys.h	/^	CTX_LIBRARY,$/;"	e	enum:key_context
CTX_PLAYLIST	keys.h	/^	CTX_PLAYLIST,$/;"	e	enum:key_context
CTX_QUEUE	keys.h	/^	CTX_QUEUE,$/;"	e	enum:key_context
CTX_SETTINGS	keys.h	/^	CTX_SETTINGS,$/;"	e	enum:key_context
CURSED_COMMANDLINE	ui_curses.c	/^	CURSED_COMMANDLINE,$/;"	e	enum:__anon29	file:
CURSED_DIR	ui_curses.c	/^	CURSED_DIR,$/;"	e	enum:__anon29	file:
CURSED_ERROR	ui_curses.c	/^	CURSED_ERROR,$/;"	e	enum:__anon29	file:
CURSED_INFO	ui_curses.c	/^	CURSED_INFO,$/;"	e	enum:__anon29	file:
CURSED_SEPARATOR	ui_curses.c	/^	CURSED_SEPARATOR,$/;"	e	enum:__anon29	file:
CURSED_STATUSLINE	ui_curses.c	/^	CURSED_STATUSLINE,$/;"	e	enum:__anon29	file:
CURSED_TITLELINE	ui_curses.c	/^	CURSED_TITLELINE,$/;"	e	enum:__anon29	file:
CURSED_WIN	ui_curses.c	/^	CURSED_WIN,$/;"	e	enum:__anon29	file:
CURSED_WIN_ACTIVE	ui_curses.c	/^	CURSED_WIN_ACTIVE,$/;"	e	enum:__anon29	file:
CURSED_WIN_ACTIVE_CUR	ui_curses.c	/^	CURSED_WIN_ACTIVE_CUR,$/;"	e	enum:__anon29	file:
CURSED_WIN_ACTIVE_SEL	ui_curses.c	/^	CURSED_WIN_ACTIVE_SEL,$/;"	e	enum:__anon29	file:
CURSED_WIN_ACTIVE_SEL_CUR	ui_curses.c	/^	CURSED_WIN_ACTIVE_SEL_CUR,$/;"	e	enum:__anon29	file:
CURSED_WIN_CUR	ui_curses.c	/^	CURSED_WIN_CUR,$/;"	e	enum:__anon29	file:
CURSED_WIN_SEL	ui_curses.c	/^	CURSED_WIN_SEL,$/;"	e	enum:__anon29	file:
CURSED_WIN_SEL_CUR	ui_curses.c	/^	CURSED_WIN_SEL_CUR,$/;"	e	enum:__anon29	file:
CURSED_WIN_TITLE	ui_curses.c	/^	CURSED_WIN_TITLE,$/;"	e	enum:__anon29	file:
CUR_ALBUM	lib.h	85;"	d
CUR_ARTIST	lib.h	86;"	d
DATADIR	config/datadir.h	4;"	d
DBL_MAX_LEN	format_print.c	95;"	d	file:
DEBUG	config/debug.h	4;"	d
DEBUG_H	debug.h	2;"	d
DEF_FO_DOUBLE	format_print.h	51;"	d
DEF_FO_END	format_print.h	52;"	d
DEF_FO_INT	format_print.h	49;"	d
DEF_FO_STR	format_print.h	48;"	d
DEF_FO_TIME	format_print.h	50;"	d
DL_CFLAGS	config.mk	/^DL_CFLAGS = $/;"	m
DL_LIBS	config.mk	/^DL_LIBS = -ldl -Wl,--export-dynamic$/;"	m
DN	options.c	1182;"	d	file:
DN_FLAGS	options.c	1183;"	d	file:
DT	options.c	1184;"	d	file:
EDITABLE_H	editable.h	20;"	d
EXPR_AND	expr.h	/^	EXPR_AND,$/;"	e	enum:expr_type
EXPR_BOOL	expr.h	/^	EXPR_BOOL$/;"	e	enum:expr_type
EXPR_H	expr.h	20;"	d
EXPR_INT	expr.h	/^	EXPR_INT,$/;"	e	enum:expr_type
EXPR_NOT	expr.h	/^	EXPR_NOT,$/;"	e	enum:expr_type
EXPR_OR	expr.h	/^	EXPR_OR,$/;"	e	enum:expr_type
EXPR_STR	expr.h	/^	EXPR_STR,$/;"	e	enum:expr_type
FH_SIZE	lib.c	104;"	d	file:
FILE_TYPE_CDDA	cmus.h	/^	FILE_TYPE_CDDA$/;"	e	enum:file_type
FILE_TYPE_DIR	cmus.h	/^	FILE_TYPE_DIR,$/;"	e	enum:file_type
FILE_TYPE_FILE	cmus.h	/^	FILE_TYPE_FILE,$/;"	e	enum:file_type
FILE_TYPE_INVALID	cmus.h	/^	FILE_TYPE_INVALID,$/;"	e	enum:file_type
FILE_TYPE_PL	cmus.h	/^	FILE_TYPE_PL,$/;"	e	enum:file_type
FILE_TYPE_URL	cmus.h	/^	FILE_TYPE_URL,$/;"	e	enum:file_type
FILTERS_H	filters.h	20;"	d
FILTERS_VIEW	options.h	/^	FILTERS_VIEW,$/;"	e	enum:__anon24
FLAG_HELP	ui_curses.c	/^	FLAG_HELP,$/;"	e	enum:__anon32	file:
FLAG_LISTEN	ui_curses.c	/^	FLAG_LISTEN,$/;"	e	enum:__anon32	file:
FLAG_PLUGINS	ui_curses.c	/^	FLAG_PLUGINS,$/;"	e	enum:__anon32	file:
FLAG_SHOW_CURSOR	ui_curses.c	/^	FLAG_SHOW_CURSOR,$/;"	e	enum:__anon32	file:
FLAG_VERSION	ui_curses.c	/^	FLAG_VERSION,$/;"	e	enum:__anon32	file:
FMT_CURRENT	options.c	/^	FMT_CURRENT,$/;"	e	enum:format_id	file:
FMT_CURRENT_ALT	options.c	/^	FMT_CURRENT_ALT,$/;"	e	enum:format_id	file:
FMT_PLAYLIST	options.c	/^	FMT_PLAYLIST,$/;"	e	enum:format_id	file:
FMT_PLAYLIST_ALT	options.c	/^	FMT_PLAYLIST_ALT,$/;"	e	enum:format_id	file:
FMT_PLAYLIST_VA	options.c	/^	FMT_PLAYLIST_VA,$/;"	e	enum:format_id	file:
FMT_TITLE	options.c	/^	FMT_TITLE,$/;"	e	enum:format_id	file:
FMT_TITLE_ALT	options.c	/^	FMT_TITLE_ALT,$/;"	e	enum:format_id	file:
FMT_TRACKWIN	options.c	/^	FMT_TRACKWIN,$/;"	e	enum:format_id	file:
FMT_TRACKWIN_ALT	options.c	/^	FMT_TRACKWIN_ALT,$/;"	e	enum:format_id	file:
FMT_TRACKWIN_VA	options.c	/^	FMT_TRACKWIN_VA,$/;"	e	enum:format_id	file:
FO_DOUBLE	format_print.h	/^	enum { FO_STR = 1, FO_INT, FO_TIME, FO_DOUBLE } type;$/;"	e	enum:format_option::__anon14
FO_INT	format_print.h	/^	enum { FO_STR = 1, FO_INT, FO_TIME, FO_DOUBLE } type;$/;"	e	enum:format_option::__anon14
FO_STR	format_print.h	/^	enum { FO_STR = 1, FO_INT, FO_TIME, FO_DOUBLE } type;$/;"	e	enum:format_option::__anon14
FO_TIME	format_print.h	/^	enum { FO_STR = 1, FO_INT, FO_TIME, FO_DOUBLE } type;$/;"	e	enum:format_option::__anon14
FS_IGNORE	filters.h	/^	FS_IGNORE,$/;"	e	enum:__anon12
FS_NO	filters.h	/^	FS_NO,$/;"	e	enum:__anon12
FS_YES	filters.h	/^	FS_YES,$/;"	e	enum:__anon12
GBUF	gbuf.h	16;"	d
GBUF_H	gbuf.h	2;"	d
GENERIC_ITER_NEXT	iter.h	79;"	d
GENERIC_ITER_PREV	iter.h	54;"	d
GENERIC_TREE_ITER_NEXT	iter.h	129;"	d
GENERIC_TREE_ITER_PREV	iter.h	104;"	d
GINSTALL	config.mk	/^GINSTALL = install$/;"	m
GLOB_H	glob.h	20;"	d
GLOB_QMARK	glob.c	/^		GLOB_QMARK,$/;"	e	enum:glob_item::__anon15	file:
GLOB_STAR	glob.c	/^		GLOB_STAR,$/;"	e	enum:glob_item::__anon15	file:
GLOB_TEXT	glob.c	/^		GLOB_TEXT$/;"	e	enum:glob_item::__anon15	file:
GROWING_KEYVALS	keyval.h	15;"	d
HASH_SIZE	cache.c	42;"	d	file:
HAVE_BYTESWAP_H	config/utils.h	4;"	d
HAVE_FFMPEG_AVCODEC_H	config/ffmpeg.h	4;"	d
HAVE_ICONV	config/iconv.h	4;"	d
HAVE_RESIZETERM	config/curses.h	4;"	d
HAVE_STRDUP	config/xmalloc.h	4;"	d
HAVE_STRNDUP	config/xmalloc.h	5;"	d
HAVE_USE_DEFAULT_COLORS	config/curses.h	5;"	d
HELP_H	help.h	22;"	d
HELP_VIEW	options.h	/^	HELP_VIEW,$/;"	e	enum:__anon24
HE_BOUND	help.h	/^		HE_BOUND,		\/* bound keys		*\/$/;"	e	enum:help_entry::__anon16
HE_OPTION	help.h	/^		HE_OPTION,$/;"	e	enum:help_entry::__anon16
HE_TEXT	help.h	/^		HE_TEXT,		\/* text entries 	*\/$/;"	e	enum:help_entry::__anon16
HE_UNBOUND	help.h	/^		HE_UNBOUND,		\/* unbound commands	*\/$/;"	e	enum:help_entry::__anon16
HOSTCC	config.mk	/^HOSTCC = gcc$/;"	m
HOSTLD	config.mk	/^HOSTLD = gcc$/;"	m
HOST_CFLAGS	config.mk	/^HOST_CFLAGS = -g -O2 -Wall$/;"	m
HOST_LDFLAGS	config.mk	/^HOST_LDFLAGS = $/;"	m
ICONV_CFLAGS	config.mk	/^ICONV_CFLAGS = $/;"	m
ICONV_LIBS	config.mk	/^ICONV_LIBS = $/;"	m
INSTALL	lib.mk	/^INSTALL		:= @$(topdir)\/scripts\/install$/;"	m
INSTALL_LOG	lib.mk	/^INSTALL_LOG	:= $(topdir)\/.install.log$/;"	m
IOP_EQ	expr.h	/^				IOP_EQ = OP_EQ,$/;"	e	enum:expr::__anon7::__anon10::__anon11
IOP_GE	expr.h	/^				IOP_GE = OP_GE,$/;"	e	enum:expr::__anon7::__anon10::__anon11
IOP_GT	expr.h	/^				IOP_GT = OP_GT,$/;"	e	enum:expr::__anon7::__anon10::__anon11
IOP_LE	expr.h	/^				IOP_LE = OP_LE,$/;"	e	enum:expr::__anon7::__anon10::__anon11
IOP_LT	expr.h	/^				IOP_LT = OP_LT,$/;"	e	enum:expr::__anon7::__anon10::__anon11
IOP_NE	expr.h	/^				IOP_NE = OP_NE$/;"	e	enum:expr::__anon7::__anon10::__anon11
IP_ERROR_ERRNO	ip.h	/^	IP_ERROR_ERRNO,$/;"	e	enum:__anon18
IP_ERROR_FILE_FORMAT	ip.h	/^	IP_ERROR_FILE_FORMAT,$/;"	e	enum:__anon18
IP_ERROR_FUNCTION_NOT_SUPPORTED	ip.h	/^	IP_ERROR_FUNCTION_NOT_SUPPORTED,$/;"	e	enum:__anon18
IP_ERROR_HTTP_REDIRECT_LIMIT	ip.h	/^	IP_ERROR_HTTP_REDIRECT_LIMIT,$/;"	e	enum:__anon18
IP_ERROR_HTTP_RESPONSE	ip.h	/^	IP_ERROR_HTTP_RESPONSE,$/;"	e	enum:__anon18
IP_ERROR_HTTP_STATUS	ip.h	/^	IP_ERROR_HTTP_STATUS,$/;"	e	enum:__anon18
IP_ERROR_INTERNAL	ip.h	/^	IP_ERROR_INTERNAL$/;"	e	enum:__anon18
IP_ERROR_INVALID_URI	ip.h	/^	IP_ERROR_INVALID_URI,$/;"	e	enum:__anon18
IP_ERROR_NOT_OPTION	ip.h	/^	IP_ERROR_NOT_OPTION,$/;"	e	enum:__anon18
IP_ERROR_NO_DISC	ip.h	/^	IP_ERROR_NO_DISC,$/;"	e	enum:__anon18
IP_ERROR_SAMPLE_FORMAT	ip.h	/^	IP_ERROR_SAMPLE_FORMAT,$/;"	e	enum:__anon18
IP_ERROR_SUCCESS	ip.h	/^	IP_ERROR_SUCCESS,$/;"	e	enum:__anon18
IP_ERROR_UNRECOGNIZED_FILE_TYPE	ip.h	/^	IP_ERROR_UNRECOGNIZED_FILE_TYPE,$/;"	e	enum:__anon18
IP_ERROR_UNSUPPORTED_FILE_TYPE	ip.h	/^	IP_ERROR_UNSUPPORTED_FILE_TYPE,$/;"	e	enum:__anon18
IP_ERROR_WRONG_DISC	ip.h	/^	IP_ERROR_WRONG_DISC,$/;"	e	enum:__anon18
JOB_H	job.h	20;"	d
JOB_TYPE_ANY	worker.h	23;"	d
JOB_TYPE_LIB	cmus.h	12;"	d
JOB_TYPE_NONE	worker.h	22;"	d
JOB_TYPE_PL	cmus.h	13;"	d
JOB_TYPE_QUEUE	cmus.h	14;"	d
KEYS_H	keys.h	22;"	d
KEYVAL_H	keyval.h	2;"	d
KEY_IS_CHAR	keys.c	57;"	d	file:
LANG	lib.mk	/^LANG		:= C$/;"	m
LC_ALL	lib.mk	/^LC_ALL		:= C$/;"	m
LD	config.mk	/^LD = gcc$/;"	m
LDDLFLAGS	config.mk	/^LDDLFLAGS = -shared$/;"	m
LDFLAGS	config.mk	/^LDFLAGS =  $/;"	m
LDSOFLAGS	config.mk	/^LDSOFLAGS = -shared$/;"	m
LIBDIR	config/libdir.h	4;"	d
LIB_H	lib.h	2;"	d
LIST_HEAD	list.h	51;"	d
LIST_HEAD_INIT	list.h	49;"	d
LIST_POISON1	list.h	32;"	d
LIST_POISON2	list.h	33;"	d
MAX_CLIENTS	server.c	46;"	d	file:
MODPLUG_API_8	config/modplug.h	4;"	d
MPC_SV8	config/mpc.h	4;"	d
NCURSES_CFLAGS	config.mk	/^NCURSES_CFLAGS =  $/;"	m
NCURSES_LIBS	config.mk	/^NCURSES_LIBS = -lncurses$/;"	m
NORMAL_MODE	ui_curses.h	/^	NORMAL_MODE,$/;"	e	enum:ui_input_mode
NR_ATTRS	options.h	/^	NR_ATTRS$/;"	e	enum:__anon26
NR_COLORS	options.h	/^	NR_COLORS$/;"	e	enum:__anon25
NR_COMBINATIONS	expr.c	25;"	d	file:
NR_CTXS	keys.h	35;"	d
NR_CURSED	ui_curses.c	/^	NR_CURSED$/;"	e	enum:__anon29	file:
NR_EXPRS	expr.h	38;"	d
NR_FLAGS	ui_curses.c	/^	NR_FLAGS$/;"	e	enum:__anon32	file:
NR_FMTS	options.c	/^	NR_FMTS$/;"	e	enum:format_id	file:
NR_MIXER_FDS	mixer.h	26;"	d
NR_OPS	expr.h	26;"	d
NR_PLAYER_STATUS	player.h	/^	NR_PLAYER_STATUS$/;"	e	enum:player_status
NR_SFS	ui_curses.c	/^	NR_SFS$/;"	e	enum:__anon31	file:
NR_SPECIALS	expr.c	34;"	d	file:
NR_TFS	ui_curses.c	/^	NR_TFS$/;"	e	enum:__anon30	file:
NR_TOKS	expr.c	46;"	d	file:
NR_VIEWS	options.h	/^	NR_VIEWS$/;"	e	enum:__anon24
N_ELEMENTS	utils.h	19;"	d
OPTIONS_H	options.h	20;"	d
OPTION_MAX_SIZE	options.h	24;"	d
OPT_PROGRAM_PATH	options.h	/^	OPT_PROGRAM_PATH = 1 << 0,$/;"	e	enum:__anon23
OP_EQ	expr.h	/^enum { OP_LT, OP_LE, OP_EQ, OP_GE, OP_GT, OP_NE };$/;"	e	enum:__anon6
OP_ERROR_ERRNO	op.h	/^	OP_ERROR_ERRNO,$/;"	e	enum:__anon19
OP_ERROR_INTERNAL	op.h	/^	OP_ERROR_INTERNAL$/;"	e	enum:__anon19
OP_ERROR_NOT_INITIALIZED	op.h	/^	OP_ERROR_NOT_INITIALIZED,$/;"	e	enum:__anon19
OP_ERROR_NOT_OPEN	op.h	/^	OP_ERROR_NOT_OPEN,$/;"	e	enum:__anon19
OP_ERROR_NOT_OPTION	op.h	/^	OP_ERROR_NOT_OPTION,$/;"	e	enum:__anon19
OP_ERROR_NOT_SUPPORTED	op.h	/^	OP_ERROR_NOT_SUPPORTED,$/;"	e	enum:__anon19
OP_ERROR_NO_PLUGIN	op.h	/^	OP_ERROR_NO_PLUGIN,$/;"	e	enum:__anon19
OP_ERROR_SAMPLE_FORMAT	op.h	/^	OP_ERROR_SAMPLE_FORMAT,$/;"	e	enum:__anon19
OP_ERROR_SUCCESS	op.h	/^	OP_ERROR_SUCCESS,$/;"	e	enum:__anon19
OP_GE	expr.h	/^enum { OP_LT, OP_LE, OP_EQ, OP_GE, OP_GT, OP_NE };$/;"	e	enum:__anon6
OP_GT	expr.h	/^enum { OP_LT, OP_LE, OP_EQ, OP_GE, OP_GT, OP_NE };$/;"	e	enum:__anon6
OP_LE	expr.h	/^enum { OP_LT, OP_LE, OP_EQ, OP_GE, OP_GT, OP_NE };$/;"	e	enum:__anon6
OP_LT	expr.h	/^enum { OP_LT, OP_LE, OP_EQ, OP_GE, OP_GT, OP_NE };$/;"	e	enum:__anon6
OP_NE	expr.h	/^enum { OP_LT, OP_LE, OP_EQ, OP_GE, OP_GT, OP_NE };$/;"	e	enum:__anon6
PKG_CONFIG	config.mk	/^PKG_CONFIG = \/usr\/bin\/pkg-config$/;"	m
PLAYER_ERROR_ERRNO	player.h	/^	PLAYER_ERROR_ERRNO,$/;"	e	enum:__anon27
PLAYER_ERROR_NOT_SUPPORTED	player.h	/^	PLAYER_ERROR_NOT_SUPPORTED$/;"	e	enum:__anon27
PLAYER_ERROR_SUCCESS	player.h	/^	PLAYER_ERROR_SUCCESS,$/;"	e	enum:__anon27
PLAYER_STATUS_PAUSED	player.h	/^	PLAYER_STATUS_PAUSED,$/;"	e	enum:player_status
PLAYER_STATUS_PLAYING	player.h	/^	PLAYER_STATUS_PLAYING,$/;"	e	enum:player_status
PLAYER_STATUS_STOPPED	player.h	/^	PLAYER_STATUS_STOPPED,$/;"	e	enum:player_status
PLAYLIST_VIEW	options.h	/^	PLAYLIST_VIEW,$/;"	e	enum:__anon24
PL_H	pl.h	20;"	d
PROG_H	prog.h	2;"	d
PS_PAUSED	player.c	/^	PS_PAUSED$/;"	e	enum:producer_status	file:
PS_PLAYING	player.c	/^	PS_PLAYING,$/;"	e	enum:producer_status	file:
PS_STOPPED	player.c	/^	PS_STOPPED,$/;"	e	enum:producer_status	file:
PS_UNLOADED	player.c	/^	PS_UNLOADED,$/;"	e	enum:producer_status	file:
PTHREAD_CFLAGS	config.mk	/^PTHREAD_CFLAGS = -D_REENTRANT$/;"	m
PTHREAD_LIBS	config.mk	/^PTHREAD_LIBS = -lpthread$/;"	m
PTR_ARRAY	load_dir.h	54;"	d
Q	lib.mk	/^    Q = @$/;"	m
Q	lib.mk	/^  Q =$/;"	m
QUEUE_VIEW	options.h	/^	QUEUE_VIEW,$/;"	e	enum:__anon24
RB_BLACK	rbtree.h	105;"	d
RB_CLEAR_NODE	rbtree.h	138;"	d
RB_EMPTY_NODE	rbtree.h	137;"	d
RB_EMPTY_ROOT	rbtree.h	136;"	d
RB_RED	rbtree.h	104;"	d
RB_ROOT	rbtree.h	133;"	d
REV	Makefile	/^REV	= HEAD$/;"	m
REV_SORT_ALBUM	track_info.h	74;"	d
REV_SORT_ALBUMARTIST	track_info.h	86;"	d
REV_SORT_ARTIST	track_info.h	73;"	d
REV_SORT_BITRATE	track_info.h	89;"	d
REV_SORT_CODEC	track_info.h	90;"	d
REV_SORT_CODEC_PROFILE	track_info.h	91;"	d
REV_SORT_COMMENT	track_info.h	85;"	d
REV_SORT_DATE	track_info.h	78;"	d
REV_SORT_DISCNUMBER	track_info.h	77;"	d
REV_SORT_FILEMTIME	track_info.h	88;"	d
REV_SORT_FILENAME	track_info.h	87;"	d
REV_SORT_GENRE	track_info.h	84;"	d
REV_SORT_MEDIA	track_info.h	92;"	d
REV_SORT_ORIGINALDATE	track_info.h	79;"	d
REV_SORT_RG_ALBUM_GAIN	track_info.h	82;"	d
REV_SORT_RG_ALBUM_PEAK	track_info.h	83;"	d
REV_SORT_RG_TRACK_GAIN	track_info.h	80;"	d
REV_SORT_RG_TRACK_PEAK	track_info.h	81;"	d
REV_SORT_TITLE	track_info.h	75;"	d
REV_SORT_TRACKNUMBER	track_info.h	76;"	d
REV_SORT__START	track_info.h	72;"	d
RG_ALBUM	player.h	/^	RG_ALBUM,$/;"	e	enum:replaygain
RG_ALBUM_PREFERRED	player.h	/^	RG_ALBUM_PREFERRED$/;"	e	enum:replaygain
RG_DISABLED	player.h	/^	RG_DISABLED,$/;"	e	enum:replaygain
RG_TRACK	player.h	/^	RG_TRACK,$/;"	e	enum:replaygain
RG_TRACK_PREFERRED	player.h	/^	RG_TRACK_PREFERRED,$/;"	e	enum:replaygain
SCALE_SAMPLES	player.c	233;"	d	file:
SEARCH_BACKWARD	search.h	/^enum search_direction { SEARCH_FORWARD, SEARCH_BACKWARD };$/;"	e	enum:search_direction
SEARCH_FORWARD	search.h	/^enum search_direction { SEARCH_FORWARD, SEARCH_BACKWARD };$/;"	e	enum:search_direction
SEARCH_MODE	ui_curses.h	/^	SEARCH_MODE$/;"	e	enum:ui_input_mode
SECOND_SIZE	options.c	242;"	d	file:
SF_BIGENDIAN_MASK	sf.h	32;"	d
SF_BIGENDIAN_SHIFT	sf.h	38;"	d
SF_BITRATE	ui_curses.c	/^	SF_BITRATE,$/;"	e	enum:__anon31	file:
SF_BITS_MASK	sf.h	34;"	d
SF_BITS_SHIFT	sf.h	40;"	d
SF_BUFFER	ui_curses.c	/^	SF_BUFFER,$/;"	e	enum:__anon31	file:
SF_CHANNELS_MASK	sf.h	36;"	d
SF_CHANNELS_SHIFT	sf.h	42;"	d
SF_CONTINUE	ui_curses.c	/^	SF_CONTINUE,$/;"	e	enum:__anon31	file:
SF_DURATION	ui_curses.c	/^	SF_DURATION,$/;"	e	enum:__anon31	file:
SF_FOLLOW	ui_curses.c	/^	SF_FOLLOW,$/;"	e	enum:__anon31	file:
SF_LVOLUME	ui_curses.c	/^	SF_LVOLUME,$/;"	e	enum:__anon31	file:
SF_PLAYLISTMODE	ui_curses.c	/^	SF_PLAYLISTMODE,$/;"	e	enum:__anon31	file:
SF_POSITION	ui_curses.c	/^	SF_POSITION,$/;"	e	enum:__anon31	file:
SF_RATE_MASK	sf.h	35;"	d
SF_RATE_SHIFT	sf.h	41;"	d
SF_REPEAT	ui_curses.c	/^	SF_REPEAT,$/;"	e	enum:__anon31	file:
SF_RVOLUME	ui_curses.c	/^	SF_RVOLUME,$/;"	e	enum:__anon31	file:
SF_SHUFFLE	ui_curses.c	/^	SF_SHUFFLE,$/;"	e	enum:__anon31	file:
SF_SIGNED_MASK	sf.h	33;"	d
SF_SIGNED_SHIFT	sf.h	39;"	d
SF_STATUS	ui_curses.c	/^	SF_STATUS,$/;"	e	enum:__anon31	file:
SF_TOTAL	ui_curses.c	/^	SF_TOTAL,$/;"	e	enum:__anon31	file:
SF_VOLUME	ui_curses.c	/^	SF_VOLUME,$/;"	e	enum:__anon31	file:
SOFLAGS	config.mk	/^SOFLAGS = -fPIC$/;"	m
SOFT_VOL_SCALE	player.c	156;"	d	file:
SOP_EQ	expr.h	/^				SOP_EQ = OP_EQ,$/;"	e	enum:expr::__anon7::__anon8::__anon9
SOP_NE	expr.h	/^				SOP_NE = OP_NE$/;"	e	enum:expr::__anon7::__anon8::__anon9
SORTED_VIEW	options.h	/^	SORTED_VIEW,$/;"	e	enum:__anon24
SORT_ALBUM	track_info.h	53;"	d
SORT_ALBUMARTIST	track_info.h	65;"	d
SORT_ARTIST	track_info.h	52;"	d
SORT_BITRATE	track_info.h	68;"	d
SORT_CODEC	track_info.h	69;"	d
SORT_CODEC_PROFILE	track_info.h	70;"	d
SORT_COMMENT	track_info.h	64;"	d
SORT_DATE	track_info.h	57;"	d
SORT_DISCNUMBER	track_info.h	56;"	d
SORT_FILEMTIME	track_info.h	67;"	d
SORT_FILENAME	track_info.h	66;"	d
SORT_GENRE	track_info.h	63;"	d
SORT_INVALID	track_info.h	51;"	d
SORT_MEDIA	track_info.h	71;"	d
SORT_ORIGINALDATE	track_info.h	58;"	d
SORT_RG_ALBUM_GAIN	track_info.h	61;"	d
SORT_RG_ALBUM_PEAK	track_info.h	62;"	d
SORT_RG_TRACK_GAIN	track_info.h	59;"	d
SORT_RG_TRACK_PEAK	track_info.h	60;"	d
SORT_TITLE	track_info.h	54;"	d
SORT_TRACKNUMBER	track_info.h	55;"	d
SRC	Makefile	/^SRC = $(wildcard *.c)$/;"	m
STRINGIZE	utils.h	22;"	d
STRINGIZE_HELPER	utils.h	21;"	d
TF_ALBUM	ui_curses.c	/^	TF_ALBUM,$/;"	e	enum:__anon30	file:
TF_ALBUMARTIST	ui_curses.c	/^	TF_ALBUMARTIST,$/;"	e	enum:__anon30	file:
TF_ARRANGER	ui_curses.c	/^	TF_ARRANGER,$/;"	e	enum:__anon30	file:
TF_ARTIST	ui_curses.c	/^	TF_ARTIST,$/;"	e	enum:__anon30	file:
TF_BITRATE	ui_curses.c	/^	TF_BITRATE,$/;"	e	enum:__anon30	file:
TF_CODEC	ui_curses.c	/^	TF_CODEC,$/;"	e	enum:__anon30	file:
TF_CODEC_PROFILE	ui_curses.c	/^	TF_CODEC_PROFILE,$/;"	e	enum:__anon30	file:
TF_COMMENT	ui_curses.c	/^	TF_COMMENT,$/;"	e	enum:__anon30	file:
TF_COMPOSER	ui_curses.c	/^	TF_COMPOSER,$/;"	e	enum:__anon30	file:
TF_CONDUCTOR	ui_curses.c	/^	TF_CONDUCTOR,$/;"	e	enum:__anon30	file:
TF_DISC	ui_curses.c	/^	TF_DISC,$/;"	e	enum:__anon30	file:
TF_DURATION	ui_curses.c	/^	TF_DURATION,$/;"	e	enum:__anon30	file:
TF_FILE	ui_curses.c	/^	TF_FILE,$/;"	e	enum:__anon30	file:
TF_GENRE	ui_curses.c	/^	TF_GENRE,$/;"	e	enum:__anon30	file:
TF_LABEL	ui_curses.c	/^	TF_LABEL,$/;"	e	enum:__anon30	file:
TF_LYRICIST	ui_curses.c	/^	TF_LYRICIST,$/;"	e	enum:__anon30	file:
TF_MEDIA	ui_curses.c	/^	TF_MEDIA,$/;"	e	enum:__anon30	file:
TF_OPUS	ui_curses.c	/^	TF_OPUS,$/;"	e	enum:__anon30	file:
TF_ORIGINALYEAR	ui_curses.c	/^	TF_ORIGINALYEAR,$/;"	e	enum:__anon30	file:
TF_PART	ui_curses.c	/^	TF_PART,$/;"	e	enum:__anon30	file:
TF_PARTNUMBER	ui_curses.c	/^	TF_PARTNUMBER,$/;"	e	enum:__anon30	file:
TF_PATHFILE	ui_curses.c	/^	TF_PATHFILE,$/;"	e	enum:__anon30	file:
TF_PERFORMER	ui_curses.c	/^	TF_PERFORMER,$/;"	e	enum:__anon30	file:
TF_PUBLISHER	ui_curses.c	/^	TF_PUBLISHER,$/;"	e	enum:__anon30	file:
TF_REMIXER	ui_curses.c	/^	TF_REMIXER,$/;"	e	enum:__anon30	file:
TF_RG_ALBUM_GAIN	ui_curses.c	/^	TF_RG_ALBUM_GAIN,$/;"	e	enum:__anon30	file:
TF_RG_ALBUM_PEAK	ui_curses.c	/^	TF_RG_ALBUM_PEAK,$/;"	e	enum:__anon30	file:
TF_RG_TRACK_GAIN	ui_curses.c	/^	TF_RG_TRACK_GAIN,$/;"	e	enum:__anon30	file:
TF_RG_TRACK_PEAK	ui_curses.c	/^	TF_RG_TRACK_PEAK,$/;"	e	enum:__anon30	file:
TF_SUBTITLE	ui_curses.c	/^	TF_SUBTITLE,$/;"	e	enum:__anon30	file:
TF_TITLE	ui_curses.c	/^	TF_TITLE,$/;"	e	enum:__anon30	file:
TF_TRACK	ui_curses.c	/^	TF_TRACK,$/;"	e	enum:__anon30	file:
TF_WORK	ui_curses.c	/^	TF_WORK,$/;"	e	enum:__anon30	file:
TF_YEAR	ui_curses.c	/^	TF_YEAR,$/;"	e	enum:__anon30	file:
TI_MATCH_ALBUM	track_info.h	95;"	d
TI_MATCH_ALBUMARTIST	track_info.h	97;"	d
TI_MATCH_ALL	track_info.h	98;"	d
TI_MATCH_ARTIST	track_info.h	94;"	d
TI_MATCH_TITLE	track_info.h	96;"	d
TOK_AND	expr.c	/^	TOK_AND,$/;"	e	enum:token_type	file:
TOK_EQ	expr.c	/^	TOK_EQ,$/;"	e	enum:token_type	file:
TOK_GE	expr.c	/^	TOK_GE,$/;"	e	enum:token_type	file:
TOK_GT	expr.c	/^	TOK_GT,$/;"	e	enum:token_type	file:
TOK_INT_OR_KEY	expr.c	/^	TOK_INT_OR_KEY,$/;"	e	enum:token_type	file:
TOK_KEY	expr.c	/^	TOK_KEY,$/;"	e	enum:token_type	file:
TOK_LE	expr.c	/^	TOK_LE,$/;"	e	enum:token_type	file:
TOK_LPAREN	expr.c	/^	TOK_LPAREN,$/;"	e	enum:token_type	file:
TOK_LT	expr.c	/^	TOK_LT,$/;"	e	enum:token_type	file:
TOK_NE	expr.c	/^	TOK_NE,$/;"	e	enum:token_type	file:
TOK_NOT	expr.c	/^	TOK_NOT,$/;"	e	enum:token_type	file:
TOK_OR	expr.c	/^	TOK_OR,$/;"	e	enum:token_type	file:
TOK_RPAREN	expr.c	/^	TOK_RPAREN,$/;"	e	enum:token_type	file:
TOK_STR	expr.c	/^	TOK_STR$/;"	e	enum:token_type	file:
TRACK_H	track.h	20;"	d
TREE_VIEW	options.h	/^	TREE_VIEW,$/;"	e	enum:__anon24
UNION_INIT	format_print.h	43;"	d
UNION_INIT	format_print.h	45;"	d
USE_MPEG4IP	config/mp4.h	4;"	d
U_COLLATE_H	u_collate.h	20;"	d
U_INVALID_MASK	uchar.h	32;"	d
V	lib.mk	/^  V := 0$/;"	m
V	lib.mk	/^  V := 1$/;"	m
VERSION	Makefile	/^VERSION	= $(or $(_ver0),$(_ver1),$(_ver2),$(_ver3))$/;"	m
VF_PERCENTAGE	command_mode.c	1154;"	d	file:
VF_RELATIVE	command_mode.c	1153;"	d	file:
_BROWSER_H	browser.h	20;"	d
_BUFFER_H	buffer.h	2;"	d
_CHANNELMAP_H	channelmap.h	2;"	d
_CMUS_H	cmus.h	2;"	d
_COMMAND_MODE_H	command_mode.h	20;"	d
_COMMENT_H	comment.h	2;"	d
_DISCID_H	discid.h	20;"	d
_FILE_H	file.h	2;"	d
_FORMAT_PRINT_H	format_print.h	20;"	d
_HISTORY_H	history.h	20;"	d
_HTTP_H	http.h	20;"	d
_INPUT_H	input.h	20;"	d
_IP_H	ip.h	2;"	d
_ITER_H	iter.h	2;"	d
_LINUX_LIST_H	list.h	19;"	d
_LINUX_RBTREE_H	rbtree.h	96;"	d
_LOAD_DIR_H	load_dir.h	20;"	d
_LOCKING_H	locking.h	2;"	d
_MERGESORT_H	mergesort.h	20;"	d
_MISC_H	misc.h	20;"	d
_MIXER_H	mixer.h	20;"	d
_OP_H	op.h	20;"	d
_OUTPUT_H	output.h	2;"	d
_PATH_H	path.h	20;"	d
_PCM_H	pcm.h	20;"	d
_PLAYER_H	player.h	20;"	d
_PLAY_QUEUE_H	play_queue.h	20;"	d
_SEARCH_H	search.h	20;"	d
_SEARCH_MODE_H	search_mode.h	20;"	d
_SERVER_H	server.h	20;"	d
_SF_H	sf.h	20;"	d
_SPAWN_H	spawn.h	20;"	d
_TABEXP_FILE_H	tabexp_file.h	20;"	d
_TABEXP_H	tabexp.h	20;"	d
_TRACK_INFO_H	track_info.h	2;"	d
_UCHAR_H	uchar.h	20;"	d
_UI_CURSES_H	ui_curses.h	20;"	d
_UTILS_H	utils.h	2;"	d
_WINDOW_H	window.h	20;"	d
_WORKER_H	worker.h	20;"	d
_XMALLOC_H	xmalloc.h	20;"	d
_XSTRJOIN_H	xstrjoin.h	20;"	d
__FORMAT	compiler.h	34;"	d
__MALLOC	compiler.h	39;"	d
__MALLOC	compiler.h	43;"	d
__NORETURN	compiler.h	30;"	d
__STR	debug.h	21;"	d
__consumer_drain_and_stop	player.c	/^static void __consumer_drain_and_stop(void)$/;"	f	file:
__consumer_handle_eof	player.c	/^static void __consumer_handle_eof(void)$/;"	f	file:
__consumer_pause	player.c	/^static void __consumer_pause(void)$/;"	f	file:
__consumer_play	player.c	/^static void __consumer_play(void)$/;"	f	file:
__consumer_position_update	player.c	/^static void __consumer_position_update(void)$/;"	f	file:
__consumer_status_update	player.c	/^static void __consumer_status_update(enum consumer_status status)$/;"	f	file:
__consumer_stop	player.c	/^static void __consumer_stop(void)$/;"	f	file:
__debug_bug	debug.c	/^void __debug_bug(const char *function, const char *fmt, ...)$/;"	f
__debug_print	debug.c	/^void __debug_print(const char *function, const char *fmt, ...)$/;"	f
__editable_for_each_sel	editable.c	/^int __editable_for_each_sel(struct editable *e, int (*cb)(void *data, struct track_info *ti),$/;"	f
__file_changed	player.c	/^static inline void __file_changed(struct track_info *ti)$/;"	f	file:
__list_add	list.h	/^static inline void __list_add(struct list_head *new,$/;"	f
__list_del	list.h	/^static inline void __list_del(struct list_head *prev, struct list_head *next)$/;"	f
__list_for_each	list.h	239;"	d
__list_splice	list.h	/^static inline void __list_splice(struct list_head *list,$/;"	f
__player_status_changed	player.c	/^static void __player_status_changed(void)$/;"	f	file:
__prebuffer	player.c	/^static void __prebuffer(void)$/;"	f	file:
__producer_buffer_fill_update	player.c	/^static void __producer_buffer_fill_update(void)$/;"	f	file:
__producer_pause	player.c	/^static void __producer_pause(void)$/;"	f	file:
__producer_play	player.c	/^static void __producer_play(void)$/;"	f	file:
__producer_set_file	player.c	/^static void __producer_set_file(struct track_info *ti)$/;"	f	file:
__producer_status_update	player.c	/^static void __producer_status_update(enum producer_status status)$/;"	f	file:
__producer_stop	player.c	/^static void __producer_stop(void)$/;"	f	file:
__producer_unload	player.c	/^static void __producer_unload(void)$/;"	f	file:
__rb_erase_color	rbtree.c	/^static void __rb_erase_color(struct rb_node *node, struct rb_node *parent,$/;"	f	file:
__rb_rotate_left	rbtree.c	/^static void __rb_rotate_left(struct rb_node *node, struct rb_root *root)$/;"	f	file:
__rb_rotate_right	rbtree.c	/^static void __rb_rotate_right(struct rb_node *node, struct rb_root *root)$/;"	f	file:
__tree_for_each_sel	tree.c	/^int __tree_for_each_sel(int (*cb)(void *data, struct track_info *ti), void *data, int reverse)$/;"	f
_ver0	Makefile	/^_ver0	= $(shell git describe $(REV) 2>\/dev\/null)$/;"	m
_ver1	Makefile	/^_ver1	= $(shell git describe --tags $(REV) 2>\/dev\/null)$/;"	m
_ver2	Makefile	/^_ver2	= $(shell git rev-parse --verify --short $(REV) 2>\/dev\/null)$/;"	m
_ver3	Makefile	/^_ver3	= v2.5.0$/;"	m
aaa_mode	lib.c	/^enum aaa_mode aaa_mode = AAA_MODE_ALL;$/;"	v	typeref:enum:aaa_mode
aaa_mode	lib.h	/^enum aaa_mode {$/;"	g
aaa_mode_filter	lib.c	/^static int aaa_mode_filter(const struct simple_track *track)$/;"	f	file:
aaa_mode_names	options.c	/^const char * const aaa_mode_names[] = {$/;"	v
act_stat	filters.h	/^	unsigned act_stat : 2;$/;"	m	struct:filter_entry
add	expr.c	/^static void add(struct expr **rootp, struct expr *expr)$/;"	f	file:
add	job.h	/^	add_ti_cb add;$/;"	m	struct:add_data
add_album	tree.c	/^static void add_album(struct album *album)$/;"	f	file:
add_artist	tree.c	/^static void add_artist(struct artist *artist)$/;"	f	file:
add_cdda	job.c	/^static void add_cdda(const char *url)$/;"	f	file:
add_data	job.h	/^struct add_data {$/;"	s
add_dir	job.c	/^static void add_dir(const char *dirname, const char *root)$/;"	f	file:
add_file	job.c	/^static void add_file(const char *filename, int force)$/;"	f	file:
add_file_cue	job.c	/^static int add_file_cue(const char *filename)$/;"	f	file:
add_from_browser	command_mode.c	/^static void add_from_browser(add_ti_cb add, int job_type)$/;"	f	file:
add_pl	job.c	/^static void add_pl(const char *filename)$/;"	f	file:
add_pl_line	browser.c	/^static int add_pl_line(void *data, const char *line)$/;"	f	file:
add_plugin	output.c	/^static void add_plugin(struct output_plugin *plugin)$/;"	f	file:
add_ti	cache.c	/^static void add_ti(struct track_info *ti, unsigned int hash)$/;"	f	file:
add_ti	command_mode.c	/^static int add_ti(void *data, struct track_info *ti)$/;"	f	file:
add_ti	job.c	/^static void add_ti(struct track_info *ti)$/;"	f	file:
add_ti_cb	cmus.h	/^typedef void (*add_ti_cb)(struct track_info *);$/;"	t
add_url	job.c	/^static void add_url(const char *url)$/;"	f	file:
addr	server.c	/^} addr;$/;"	v	typeref:union:__anon28	file:
album	command_mode.c	/^	const struct album *album;$/;"	m	struct:album_list	typeref:struct:album_list::album	file:
album	lib.h	/^	struct album *album;$/;"	m	struct:tree_track	typeref:struct:tree_track::album
album	lib.h	/^struct album {$/;"	s
album	track_info.h	/^	const char *album;$/;"	m	struct:track_info
album_add_track	tree.c	/^static void album_add_track(struct album *album, struct tree_track *track)$/;"	f	file:
album_first_track	lib.c	/^static struct tree_track *album_first_track(const struct album *album)$/;"	f	file:
album_for_each_track	tree.c	/^static int album_for_each_track(struct album *album, int (*cb)(void *data, struct track_info *ti),$/;"	f	file:
album_free	tree.c	/^static void album_free(struct album *album)$/;"	f	file:
album_last_track	lib.c	/^static struct tree_track *album_last_track(const struct album *album)$/;"	f	file:
album_list	command_mode.c	/^struct album_list {$/;"	s	file:
album_new	tree.c	/^static struct album *album_new(struct artist *artist, const char *name,$/;"	f	file:
album_root	lib.h	/^	struct rb_root album_root;$/;"	m	struct:artist	typeref:struct:artist::rb_root
album_selected	tree.c	/^static inline int album_selected(struct album *album)$/;"	f	file:
album_sort_collkey	tree.c	/^static inline const char *album_sort_collkey(const struct album *a)$/;"	f	file:
album_to_iter	tree.c	/^static inline void album_to_iter(struct album *album, struct iter *iter)$/;"	f	file:
albumartist	track_info.h	/^	const char *albumartist;$/;"	m	struct:track_info
albumsort	track_info.h	/^	const char *albumsort;$/;"	m	struct:track_info
align_left	format_print.c	/^static int align_left;$/;"	v	file:
all_wins_changed	lib.c	/^static void all_wins_changed(void)$/;"	f	file:
alloc	gbuf.h	/^	size_t alloc;$/;"	m	struct:gbuf
alloc	keyval.h	/^	int alloc;$/;"	m	struct:growing_keyvals
alloc	load_dir.h	/^	int alloc;$/;"	m	struct:ptr_array
arg_expand_cmd	command_mode.c	/^static int arg_expand_cmd = -1;$/;"	v	file:
artist	lib.h	/^	struct artist *artist;$/;"	m	struct:album	typeref:struct:album::artist
artist	lib.h	/^struct artist {$/;"	s
artist	track_info.h	/^	const char *artist;$/;"	m	struct:track_info
artist_copy	tree.c	/^static struct artist *artist_copy(const struct artist *artist)$/;"	f	file:
artist_first_track	lib.c	/^static struct tree_track *artist_first_track(const struct artist *artist)$/;"	f	file:
artist_for_each_track	tree.c	/^static int artist_for_each_track(struct artist *artist, int (*cb)(void *data, struct track_info *ti),$/;"	f	file:
artist_free	tree.c	/^static void artist_free(struct artist *artist)$/;"	f	file:
artist_last_track	lib.c	/^static struct tree_track *artist_last_track(const struct artist *artist)$/;"	f	file:
artist_new	tree.c	/^static struct artist *artist_new(const char *name, const char *sort_name, int is_compilation)$/;"	f	file:
artist_sort_collkey	tree.c	/^static inline const char *artist_sort_collkey(const struct artist *a)$/;"	f	file:
artist_sort_name	lib.c	/^const char *artist_sort_name(const struct artist *a)$/;"	f
artist_to_iter	tree.c	/^static inline void artist_to_iter(struct artist *artist, struct iter *iter)$/;"	f	file:
artistsort	track_info.h	/^	const char *artistsort;$/;"	m	struct:track_info
attr_enum_names	options.c	/^static const char * const attr_enum_names[6 + 1] = {$/;"	v	file:
attr_names	options.c	/^static const char * const attr_names[NR_ATTRS] = {$/;"	v	file:
attrs	options.c	/^int attrs[NR_ATTRS] = {$/;"	v
authenticated	server.h	/^	unsigned int authenticated : 1;$/;"	m	struct:client
auto_artist_sort_name	tree.c	/^static char *auto_artist_sort_name(const char *name)$/;"	f	file:
auto_reshuffle	options.c	/^int auto_reshuffle = 1;$/;"	v
auto_sort_name	lib.h	/^	char *auto_sort_name;$/;"	m	struct:artist
backspace	command_mode.c	/^static void backspace(void)$/;"	f	file:
backspace	search_mode.c	/^static void backspace(void)$/;"	f	file:
base	unidecomp.h	/^	uchar base;$/;"	m	struct:__anon33
base64_encode	http.c	/^char *base64_encode(const char *str)$/;"	f
bc	command_mode.h	/^	int bc;$/;"	m	struct:command
binding	help.h	/^		const struct binding *binding;		\/* HE_BOUND	*\/$/;"	m	union:help_entry::__anon17	typeref:struct:help_entry::__anon17::binding
binding	keys.h	/^struct binding {$/;"	s
bindir	config.mk	/^bindir = \/usr\/local\/bin$/;"	m
bitrate	cache.c	/^	long bitrate;$/;"	m	struct:cache_entry	file:
bitrate	input.c	/^	long bitrate;$/;"	m	struct:input_plugin	file:
bitrate	ip.h	/^	long (*bitrate)(struct input_plugin_data *ip_data);$/;"	m	struct:input_plugin_ops
bitrate	track_info.h	/^	long bitrate;$/;"	m	struct:track_info
bitrate_current	ip.h	/^	long (*bitrate_current)(struct input_plugin_data *ip_data);$/;"	m	struct:input_plugin_ops
blen	cmdline.h	/^	int blen;$/;"	m	struct:cmdline
bool_names	options.c	/^static const char * const bool_names[] = {$/;"	v	file:
bound_cmp	help.c	/^static int bound_cmp(struct list_head *ai, struct list_head *bi)$/;"	f	file:
bound_head	help.c	/^static struct list_head *bound_head;$/;"	v	typeref:struct:list_head	file:
bound_tail	help.c	/^static struct list_head *bound_tail;$/;"	v	typeref:struct:list_head	file:
bpos	cmdline.h	/^	int bpos;$/;"	m	struct:cmdline
browser_cd	browser.c	/^static void browser_cd(const char *dir)$/;"	f	file:
browser_cd_playlist	browser.c	/^static void browser_cd_playlist(const char *filename)$/;"	f	file:
browser_chdir	browser.c	/^int browser_chdir(const char *dir)$/;"	f
browser_delete	browser.c	/^void browser_delete(void)$/;"	f
browser_dir	browser.c	/^char *browser_dir;$/;"	v
browser_dir	options.c	/^	char *browser_dir;$/;"	m	struct:resume	file:
browser_enter	browser.c	/^void browser_enter(void)$/;"	f
browser_entry	browser.h	/^struct browser_entry {$/;"	s
browser_entry_to_iter	browser.c	/^static inline void browser_entry_to_iter(struct browser_entry *e, struct iter *iter)$/;"	f	file:
browser_exit	browser.c	/^void browser_exit(void)$/;"	f
browser_get_sel	browser.c	/^char *browser_get_sel(void)$/;"	f
browser_init	browser.c	/^void browser_init(void)$/;"	f
browser_load	browser.c	/^static int browser_load(const char *name)$/;"	f	file:
browser_reload	browser.c	/^void browser_reload(void)$/;"	f
browser_search_get_current	browser.c	/^static int browser_search_get_current(void *data, struct iter *iter)$/;"	f	file:
browser_search_matches	browser.c	/^static int browser_search_matches(void *data, struct iter *iter, const char *text)$/;"	f	file:
browser_search_ops	browser.c	/^static const struct searchable_ops browser_search_ops = {$/;"	v	typeref:struct:searchable_ops	file:
browser_searchable	browser.c	/^struct searchable *browser_searchable;$/;"	v	typeref:struct:searchable
browser_up	browser.c	/^void browser_up(void)$/;"	f
browser_win	browser.c	/^struct window *browser_win;$/;"	v	typeref:struct:window
bswap16	utils.h	162;"	d
bswap16	utils.h	165;"	d
bswap16	utils.h	167;"	d
bswap32	utils.h	180;"	d
bswap32	utils.h	183;"	d
bswap32	utils.h	185;"	d
buf_int	options.c	/^static void buf_int(char *buf, int val)$/;"	f	file:
buffer	gbuf.h	/^	char *buffer;$/;"	m	struct:gbuf
buffer_chunks	buffer.c	/^static struct chunk *buffer_chunks = NULL;$/;"	v	typeref:struct:chunk	file:
buffer_consume	buffer.c	/^void buffer_consume(int count)$/;"	f
buffer_fill	buffer.c	/^int buffer_fill(int count)$/;"	f
buffer_fill	player.h	/^	int buffer_fill;$/;"	m	struct:player_info
buffer_fill_changed	player.h	/^	unsigned int buffer_fill_changed : 1;$/;"	m	struct:player_info
buffer_for_each_line	file.c	/^void buffer_for_each_line(const char *buf, int size,$/;"	f
buffer_for_each_line_reverse	file.c	/^void buffer_for_each_line_reverse(const char *buf, int size,$/;"	f
buffer_free	buffer.c	/^void buffer_free(void)$/;"	f
buffer_get_filled_chunks	buffer.c	/^int buffer_get_filled_chunks(void)$/;"	f
buffer_get_rpos	buffer.c	/^int buffer_get_rpos(char **pos)$/;"	f
buffer_get_wpos	buffer.c	/^int buffer_get_wpos(char **pos)$/;"	f
buffer_init	buffer.c	/^void buffer_init(void)$/;"	f
buffer_mutex	buffer.c	/^static pthread_mutex_t buffer_mutex = CMUS_MUTEX_INITIALIZER;$/;"	v	file:
buffer_nr_chunks	buffer.c	/^unsigned int buffer_nr_chunks;$/;"	v
buffer_reset	buffer.c	/^void buffer_reset(void)$/;"	f
buffer_ridx	buffer.c	/^static unsigned int buffer_ridx;$/;"	v	file:
buffer_second_size	player.c	/^static inline unsigned int buffer_second_size(void)$/;"	f	file:
buffer_sf	player.c	/^static sample_format_t buffer_sf;$/;"	v	file:
buffer_size	player.h	/^	int buffer_size;$/;"	m	struct:player_info
buffer_space	op.h	/^	int (*buffer_space)(void);$/;"	m	struct:output_plugin_ops
buffer_widx	buffer.c	/^static unsigned int buffer_widx;$/;"	v	file:
builtin	expr.c	/^} builtin[] = {$/;"	v	typeref:struct:__anon5	file:
cache_close	cache.c	/^int cache_close(void)$/;"	f
cache_entry	cache.c	/^struct cache_entry {$/;"	s	file:
cache_entry_to_ti	cache.c	/^static struct track_info *cache_entry_to_ti(struct cache_entry *e)$/;"	f	file:
cache_filename	cache.c	/^static char *cache_filename;$/;"	v	file:
cache_get_ti	cache.c	/^struct track_info *cache_get_ti(const char *filename, int force)$/;"	f
cache_header	cache.c	/^static char cache_header[8] = "CTC\\0\\0\\0\\0\\0";$/;"	v	file:
cache_init	cache.c	/^int cache_init(void)$/;"	f
cache_lock	cache.h	9;"	d
cache_mutex	cache.c	/^pthread_mutex_t cache_mutex = CMUS_MUTEX_INITIALIZER;$/;"	v
cache_refresh	cache.c	/^struct track_info **cache_refresh(int *count, int force)$/;"	f
cache_remove_ti	cache.c	/^void cache_remove_ti(struct track_info *ti)$/;"	f
cache_unlock	cache.h	10;"	d
calc_vol	command_mode.c	/^static int calc_vol(int val, int old, int max_vol, unsigned int flags)$/;"	f	file:
cancel_type	worker.c	/^static int cancel_type = JOB_TYPE_NONE;$/;"	v	file:
cb	cmus.c	/^	int (*cb)(void *data, const char *line);$/;"	m	struct:pl_data	file:
cb	command_mode.c	/^	add_ti_cb cb;$/;"	m	struct:wrapper_cb_data	file:
cdda_device	options.c	/^char *cdda_device = NULL;$/;"	v
ch	format_print.h	/^	char ch;$/;"	m	struct:format_option
ch	keys.h	/^	uchar ch;$/;"	m	struct:key
ch_to_key	keys.c	/^static const struct key *ch_to_key(uchar ch)$/;"	f	file:
change_sf	player.c	/^static int change_sf(int drop)$/;"	f	file:
changed	window.h	/^	unsigned changed : 1;$/;"	m	struct:window
channel_map	ip.h	/^	channel_position_t channel_map[CHANNELS_MAX];$/;"	m	struct:input_plugin_data
channel_map_copy	channelmap.h	/^static inline channel_position_t *channel_map_copy(channel_position_t *dst, const channel_position_t *src)$/;"	f
channel_map_equal	channelmap.h	/^static inline int channel_map_equal(const channel_position_t *a, const channel_position_t *b, int channels)$/;"	f
channel_map_init_stereo	channelmap.h	/^static inline void channel_map_init_stereo(channel_position_t *map)$/;"	f
channel_map_init_waveex	channelmap.c	/^void channel_map_init_waveex(int channels, unsigned int mask, channel_position_t *map)$/;"	f
channel_map_valid	channelmap.h	/^static inline int channel_map_valid(const channel_position_t *map)$/;"	f
channel_position	channelmap.h	/^enum channel_position {$/;"	g
channel_position_t	channelmap.h	/^typedef enum channel_position	channel_position_t;$/;"	t	typeref:enum:channel_position
charset	ui_curses.c	/^char *charset = NULL;$/;"	v
chunk	buffer.c	/^struct chunk {$/;"	s	file:
clamp	utils.h	/^static inline int clamp(int val, int minval, int maxval)$/;"	f
clean	lib.mk	/^clean		:= $(dependencies)$/;"	m
clear_error	ui_curses.c	/^static void clear_error(void)$/;"	f	file:
clen	cmdline.h	/^	int clen;$/;"	m	struct:cmdline
client	server.h	/^struct client {$/;"	s
client_fd	ui_curses.c	/^static int client_fd = -1;$/;"	v	file:
client_head	server.c	/^LIST_HEAD(client_head);$/;"	v
close	ip.h	/^	int (*close)(struct input_plugin_data *ip_data);$/;"	m	struct:input_plugin_ops
close	mixer.h	/^	int (*close)(void);$/;"	m	struct:mixer_plugin_ops
close	op.h	/^	int (*close)(void);$/;"	m	struct:output_plugin_ops
cmd	keys.h	/^	char cmd[];$/;"	m	struct:binding
cmd	lib.mk	/^cmd = @$(if $($(quiet)cmd_$(1)),echo '   $(call $(quiet)cmd_$(1),$(2))' &&) $(call cmd_$(1),$(2))$/;"	m
cmd_add	command_mode.c	/^static void cmd_add(char *arg)$/;"	f	file:
cmd_ar	lib.mk	/^      cmd_ar = $(AR) $(ARFLAGS) $@ $^$/;"	m
cmd_as	lib.mk	/^      cmd_as = $(AS) -c $(ASFLAGS) -o $@ $<$/;"	m
cmd_bind	command_mode.c	/^static void cmd_bind(char *arg)$/;"	f	file:
cmd_browser_up	command_mode.c	/^static void cmd_browser_up(char *arg)$/;"	f	file:
cmd_cc	lib.mk	/^      cmd_cc    = $(CC) -c $(CPPFLAGS) $(CFLAGS) -o $@ $<$/;"	m
cmd_cc_lo	lib.mk	/^      cmd_cc_lo = $(CC) -c $(CPPFLAGS) $(CFLAGS) $(SOFLAGS) -o $@ $<$/;"	m
cmd_cd	command_mode.c	/^static void cmd_cd(char *arg)$/;"	f	file:
cmd_clear	command_mode.c	/^static void cmd_clear(char *arg)$/;"	f	file:
cmd_colorscheme	command_mode.c	/^static void cmd_colorscheme(char *arg)$/;"	f	file:
cmd_cxx	lib.mk	/^      cmd_cxx    = $(CXX) -c $(CPPFLAGS) $(CXXFLAGS) -o $@ $<$/;"	m
cmd_cxx_lo	lib.mk	/^      cmd_cxx_lo = $(CXX) -c $(CPPFLAGS) $(CXXFLAGS) $(SOFLAGS) -o $@ $<$/;"	m
cmd_cxxld	lib.mk	/^      cmd_cxxld = $(CXXLD) $(CXXLDFLAGS) -o $@ $^ $(1)$/;"	m
cmd_cxxld_dl	lib.mk	/^      cmd_cxxld_dl = $(CXXLD) $(LDDLFLAGS) $(CXXLDFLAGS) -o $@ $^ $(1)$/;"	m
cmd_cxxld_so	lib.mk	/^      cmd_cxxld_so = $(CXXLD) $(LDSOFLAGS) $(CXXLDFLAGS) -o $@ $^ $(1)$/;"	m
cmd_echo	command_mode.c	/^static void cmd_echo(char *arg)$/;"	f	file:
cmd_factivate	command_mode.c	/^static void cmd_factivate(char *arg)$/;"	f	file:
cmd_filter	command_mode.c	/^static void cmd_filter(char *arg)$/;"	f	file:
cmd_fset	command_mode.c	/^static void cmd_fset(char *arg)$/;"	f	file:
cmd_help	command_mode.c	/^static void cmd_help(char *arg)$/;"	f	file:
cmd_history	command_mode.c	/^static struct history cmd_history;$/;"	v	typeref:struct:history	file:
cmd_history_filename	command_mode.c	/^static char *cmd_history_filename;$/;"	v	file:
cmd_hostcc	lib.mk	/^      cmd_hostcc    = $(HOSTCC) -c $(HOST_CFLAGS) -o $@ $<$/;"	m
cmd_hostld	lib.mk	/^      cmd_hostld = $(HOSTLD) $(HOST_LDFLAGS) -o $@ $^ $(1)$/;"	m
cmd_invert	command_mode.c	/^static void cmd_invert(char *arg)$/;"	f	file:
cmd_ld	lib.mk	/^      cmd_ld = $(LD) $(LDFLAGS) -o $@ $^ $(1)$/;"	m
cmd_ld_dl	lib.mk	/^      cmd_ld_dl = $(LD) $(LDDLFLAGS) $(LDFLAGS) -o $@ $^ $(1)$/;"	m
cmd_ld_so	lib.mk	/^      cmd_ld_so = $(LD) $(LDSOFLAGS) $(LDFLAGS) -o $@ $^ $(1)$/;"	m
cmd_live_filter	command_mode.c	/^static void cmd_live_filter(char *arg)$/;"	f	file:
cmd_load	command_mode.c	/^static void cmd_load(char *arg)$/;"	f	file:
cmd_lqueue	command_mode.c	/^static void cmd_lqueue(char *arg)$/;"	f	file:
cmd_mark	command_mode.c	/^static void cmd_mark(char *arg)$/;"	f	file:
cmd_p_next	command_mode.c	/^static void cmd_p_next(char *arg)$/;"	f	file:
cmd_p_pause	command_mode.c	/^static void cmd_p_pause(char *arg)$/;"	f	file:
cmd_p_play	command_mode.c	/^static void cmd_p_play(char *arg)$/;"	f	file:
cmd_p_prev	command_mode.c	/^static void cmd_p_prev(char *arg)$/;"	f	file:
cmd_p_stop	command_mode.c	/^static void cmd_p_stop(char *arg)$/;"	f	file:
cmd_prev_view	command_mode.c	/^static void cmd_prev_view(char *arg)$/;"	f	file:
cmd_push	command_mode.c	/^static void cmd_push(char *arg)$/;"	f	file:
cmd_quit	command_mode.c	/^static void cmd_quit(char *arg)$/;"	f	file:
cmd_refresh	command_mode.c	/^static void cmd_refresh(char *arg)$/;"	f	file:
cmd_reshuffle	command_mode.c	/^static void cmd_reshuffle(char *arg)$/;"	f	file:
cmd_run	command_mode.c	/^static void cmd_run(char *arg)$/;"	f	file:
cmd_save	command_mode.c	/^static void cmd_save(char *arg)$/;"	f	file:
cmd_search_next	command_mode.c	/^static void cmd_search_next(char *arg)$/;"	f	file:
cmd_search_prev	command_mode.c	/^static void cmd_search_prev(char *arg)$/;"	f	file:
cmd_seek	command_mode.c	/^static void cmd_seek(char *arg)$/;"	f	file:
cmd_set	command_mode.c	/^static void cmd_set(char *arg)$/;"	f	file:
cmd_shell	command_mode.c	/^static void cmd_shell(char *arg)$/;"	f	file:
cmd_showbind	command_mode.c	/^static void cmd_showbind(char *arg)$/;"	f	file:
cmd_source	command_mode.c	/^static void cmd_source(char *arg)$/;"	f	file:
cmd_status	server.c	/^static int cmd_status(struct client *client)$/;"	f	file:
cmd_toggle	command_mode.c	/^static void cmd_toggle(char *arg)$/;"	f	file:
cmd_tqueue	command_mode.c	/^static void cmd_tqueue(char *arg)$/;"	f	file:
cmd_unbind	command_mode.c	/^static void cmd_unbind(char *arg)$/;"	f	file:
cmd_unmark	command_mode.c	/^static void cmd_unmark(char *arg)$/;"	f	file:
cmd_update_cache	command_mode.c	/^static void cmd_update_cache(char *arg)$/;"	f	file:
cmd_view	command_mode.c	/^static void cmd_view(char *arg)$/;"	f	file:
cmd_vol	command_mode.c	/^static void cmd_vol(char *arg)$/;"	f	file:
cmd_win_activate	command_mode.c	/^static void cmd_win_activate(char *arg)$/;"	f	file:
cmd_win_add_Q	command_mode.c	/^static void cmd_win_add_Q(char *arg)$/;"	f	file:
cmd_win_add_l	command_mode.c	/^static void cmd_win_add_l(char *arg)$/;"	f	file:
cmd_win_add_p	command_mode.c	/^static void cmd_win_add_p(char *arg)$/;"	f	file:
cmd_win_add_q	command_mode.c	/^static void cmd_win_add_q(char *arg)$/;"	f	file:
cmd_win_bottom	command_mode.c	/^static void cmd_win_bottom(char *arg)$/;"	f	file:
cmd_win_down	command_mode.c	/^static void cmd_win_down(char *arg)$/;"	f	file:
cmd_win_mv_after	command_mode.c	/^static void cmd_win_mv_after(char *arg)$/;"	f	file:
cmd_win_mv_before	command_mode.c	/^static void cmd_win_mv_before(char *arg)$/;"	f	file:
cmd_win_next	command_mode.c	/^static void cmd_win_next(char *arg)$/;"	f	file:
cmd_win_pg_bottom	command_mode.c	/^static void cmd_win_pg_bottom(char *arg)$/;"	f	file:
cmd_win_pg_down	command_mode.c	/^static void cmd_win_pg_down(char *arg)$/;"	f	file:
cmd_win_pg_middle	command_mode.c	/^static void cmd_win_pg_middle(char *arg)$/;"	f	file:
cmd_win_pg_top	command_mode.c	/^static void cmd_win_pg_top(char *arg)$/;"	f	file:
cmd_win_pg_up	command_mode.c	/^static void cmd_win_pg_up(char *arg)$/;"	f	file:
cmd_win_remove	command_mode.c	/^static void cmd_win_remove(char *arg)$/;"	f	file:
cmd_win_sel_cur	command_mode.c	/^static void cmd_win_sel_cur(char *arg)$/;"	f	file:
cmd_win_toggle	command_mode.c	/^static void cmd_win_toggle(char *arg)$/;"	f	file:
cmd_win_top	command_mode.c	/^static void cmd_win_top(char *arg)$/;"	f	file:
cmd_win_up	command_mode.c	/^static void cmd_win_up(char *arg)$/;"	f	file:
cmd_win_update	command_mode.c	/^static void cmd_win_update(char *arg)$/;"	f	file:
cmd_win_update_cache	command_mode.c	/^static void cmd_win_update_cache(char *arg)$/;"	f	file:
cmdline	cmdline.c	/^struct cmdline cmdline;$/;"	v	typeref:struct:cmdline
cmdline	cmdline.h	/^struct cmdline {$/;"	s
cmdline_backspace	cmdline.c	/^void cmdline_backspace(void)$/;"	f
cmdline_backspace_to_bol	cmdline.c	/^void cmdline_backspace_to_bol(void)$/;"	f
cmdline_backward_delete_word	cmdline.c	/^void cmdline_backward_delete_word(const char *delim)$/;"	f
cmdline_backward_word	cmdline.c	/^void cmdline_backward_word(const char *delim)$/;"	f
cmdline_clear	cmdline.c	/^void cmdline_clear(void)$/;"	f
cmdline_clear_end	cmdline.c	/^void cmdline_clear_end(void)$/;"	f
cmdline_cursor_column	ui_curses.c	/^static int cmdline_cursor_column(void)$/;"	f	file:
cmdline_delete_ch	cmdline.c	/^void cmdline_delete_ch(void)$/;"	f
cmdline_delete_word	cmdline.c	/^void cmdline_delete_word(const char *delim)$/;"	f
cmdline_filename_delimiters	cmdline.c	/^const char cmdline_filename_delimiters[] = "\/";$/;"	v
cmdline_forward_word	cmdline.c	/^void cmdline_forward_word(const char *delim)$/;"	f
cmdline_init	cmdline.c	/^void cmdline_init(void)$/;"	f
cmdline_insert_ch	cmdline.c	/^void cmdline_insert_ch(uchar ch)$/;"	f
cmdline_modified	command_mode.c	/^static void cmdline_modified(void)$/;"	f	file:
cmdline_move_end	cmdline.c	/^void cmdline_move_end(void)$/;"	f
cmdline_move_home	cmdline.c	/^void cmdline_move_home(void)$/;"	f
cmdline_move_left	cmdline.c	/^void cmdline_move_left(void)$/;"	f
cmdline_move_right	cmdline.c	/^void cmdline_move_right(void)$/;"	f
cmdline_set_text	cmdline.c	/^void cmdline_set_text(const char *text)$/;"	f
cmdline_word_delimiters	cmdline.c	/^const char cmdline_word_delimiters[]     = " ";$/;"	v
cmp_intp	command_mode.c	/^static int cmp_intp(const void *ap, const void *bp)$/;"	f	file:
cmus-y	Makefile	/^cmus-y := \\$/;"	m
cmus_add	cmus.c	/^void cmus_add(add_ti_cb add, const char *name, enum file_type ft, int jt, int force)$/;"	f
cmus_config_dir	misc.c	/^const char *cmus_config_dir = NULL;$/;"	v
cmus_detect_ft	cmus.c	/^enum file_type cmus_detect_ft(const char *name, char **ret)$/;"	f
cmus_exit	cmus.c	/^void cmus_exit(void)$/;"	f
cmus_init	cmus.c	/^int cmus_init(void)$/;"	f
cmus_is_playable	cmus.c	/^int cmus_is_playable(const char *filename)$/;"	f
cmus_is_playlist	cmus.c	/^int cmus_is_playlist(const char *filename)$/;"	f
cmus_is_supported	cmus.c	/^int cmus_is_supported(const char *filename)$/;"	f
cmus_mutex_lock	locking.c	/^void cmus_mutex_lock(pthread_mutex_t *mutex)$/;"	f
cmus_mutex_unlock	locking.c	/^void cmus_mutex_unlock(pthread_mutex_t *mutex)$/;"	f
cmus_next	cmus.c	/^void cmus_next(void)$/;"	f
cmus_opt	options.h	/^struct cmus_opt {$/;"	s
cmus_play_file	cmus.c	/^void cmus_play_file(const char *filename)$/;"	f
cmus_playlist_for_each	cmus.c	/^int cmus_playlist_for_each(const char *buf, int size, int reverse,$/;"	f
cmus_prev	cmus.c	/^void cmus_prev(void)$/;"	f
cmus_running	ui_curses.c	/^int cmus_running = 1;$/;"	v
cmus_save	cmus.c	/^int cmus_save(for_each_ti_cb for_each_ti, const char *filename)$/;"	f
cmus_save_ext	cmus.c	/^int cmus_save_ext(for_each_ti_cb for_each_ti, const char *filename)$/;"	f
cmus_socket_path	misc.c	/^const char *cmus_socket_path = NULL;$/;"	v
cmus_update_cache	cmus.c	/^void cmus_update_cache(int force)$/;"	f
cmus_update_lib	cmus.c	/^void cmus_update_lib(void)$/;"	f
cmus_update_tis	cmus.c	/^void cmus_update_tis(struct track_info **tis, int nr, int force)$/;"	f
code	http.h	/^	int code;$/;"	m	struct:http_get
codec	input.c	/^	char *codec;$/;"	m	struct:input_plugin	file:
codec	ip.h	/^	char *(*codec)(struct input_plugin_data *ip_data);$/;"	m	struct:input_plugin_ops
codec	track_info.h	/^	char *codec;$/;"	m	struct:track_info
codec_profile	input.c	/^	char *codec_profile;$/;"	m	struct:input_plugin	file:
codec_profile	ip.h	/^	char *(*codec_profile)(struct input_plugin_data *ip_data);$/;"	m	struct:input_plugin_ops
codec_profile	track_info.h	/^	char *codec_profile;$/;"	m	struct:track_info
collapse_artist	tree.c	/^static struct artist *collapse_artist;$/;"	v	typeref:struct:artist	file:
collkey_album	track_info.h	/^	char *collkey_album;$/;"	m	struct:track_info
collkey_albumartist	track_info.h	/^	char *collkey_albumartist;$/;"	m	struct:track_info
collkey_artist	track_info.h	/^	char *collkey_artist;$/;"	m	struct:track_info
collkey_auto_sort_name	lib.h	/^	char *collkey_auto_sort_name;$/;"	m	struct:artist
collkey_comment	track_info.h	/^	char *collkey_comment;$/;"	m	struct:track_info
collkey_genre	track_info.h	/^	char *collkey_genre;$/;"	m	struct:track_info
collkey_name	lib.h	/^	char *collkey_name;$/;"	m	struct:album
collkey_name	lib.h	/^	char *collkey_name;$/;"	m	struct:artist
collkey_sort_name	lib.h	/^	char *collkey_sort_name;$/;"	m	struct:album
collkey_sort_name	lib.h	/^	char *collkey_sort_name;$/;"	m	struct:artist
collkey_title	track_info.h	/^	char *collkey_title;$/;"	m	struct:track_info
color_enum_names	options.c	/^static const char * const color_enum_names[1 + 8 * 2 + 1] = {$/;"	v	file:
color_names	options.c	/^static const char * const color_names[NR_COLORS] = {$/;"	v	file:
colors	options.c	/^int colors[NR_COLORS] = {$/;"	v
command	command_mode.h	/^struct command {$/;"	s
command	help.h	/^		const struct command *command;		\/* HE_UNBOUND	*\/$/;"	m	union:help_entry::__anon17	typeref:struct:help_entry::__anon17::command
command_mode_ch	command_mode.c	/^void command_mode_ch(uchar ch)$/;"	f
command_mode_escape	command_mode.c	/^void command_mode_escape(int c)$/;"	f
command_mode_key	command_mode.c	/^void command_mode_key(int key)$/;"	f
commands	command_mode.c	/^struct command commands[] = {$/;"	v	typeref:struct:command
commands_exit	command_mode.c	/^void commands_exit(void)$/;"	f
commands_init	command_mode.c	/^void commands_init(void)$/;"	f
comment	track_info.h	/^	const char *comment;$/;"	m	struct:track_info
comments	track_info.h	/^	struct keyval *comments;$/;"	m	struct:track_info	typeref:struct:track_info::keyval
comments_add	comment.c	/^int comments_add(struct growing_keyvals *c, const char *key, char *val)$/;"	f
comments_add_const	comment.c	/^int comments_add_const(struct growing_keyvals *c, const char *key, const char *val)$/;"	f
comments_get_albumartist	comment.c	/^const char *comments_get_albumartist(const struct keyval *comments)$/;"	f
comments_get_artistsort	comment.c	/^const char *comments_get_artistsort(const struct keyval *comments)$/;"	f
comments_get_date	comment.c	/^int comments_get_date(const struct keyval *comments, const char *key)$/;"	f
comments_get_double	comment.c	/^double comments_get_double(const struct keyval *comments, const char *key)$/;"	f
comments_get_int	comment.c	/^int comments_get_int(const struct keyval *comments, const char *key)$/;"	f
compare_rand	track.c	/^static int compare_rand(const struct rb_node *a, const struct rb_node *b)$/;"	f	file:
complete_cdda_url	discid.c	/^char *complete_cdda_url(const char *device, const char *url)$/;"	f
composed	unidecomp.h	/^	uchar composed;$/;"	m	struct:__anon33
confirm_run	options.c	/^int confirm_run = 1;$/;"	v
consumer_lock	player.c	115;"	d	file:
consumer_loop	player.c	/^static void *consumer_loop(void *arg)$/;"	f	file:
consumer_mutex	player.c	/^static pthread_mutex_t consumer_mutex = CMUS_MUTEX_INITIALIZER;$/;"	v	file:
consumer_playing	player.c	/^static pthread_cond_t consumer_playing = CMUS_COND_INITIALIZER;$/;"	v	file:
consumer_pos	player.c	/^static unsigned int consumer_pos = 0;$/;"	v	file:
consumer_running	player.c	/^static int consumer_running = 1;$/;"	v	file:
consumer_status	player.c	/^enum consumer_status {$/;"	g	file:
consumer_status	player.c	/^static enum consumer_status consumer_status = CS_STOPPED;$/;"	v	typeref:enum:consumer_status	file:
consumer_thread	player.c	/^static pthread_t consumer_thread;$/;"	v	file:
consumer_unlock	player.c	116;"	d	file:
container_of	compiler.h	58;"	d
container_of	compiler.h	60;"	d
container_of	compiler.h	64;"	d
container_of_portable	compiler.h	56;"	d
conv_buffer	ui_curses.c	/^static char conv_buffer[512];$/;"	v	file:
convert	convert.c	/^ssize_t convert(const char *inbuf, ssize_t inbuf_size,$/;"	f
convert_16_1ch_to_16_2ch	pcm.c	/^static void convert_16_1ch_to_16_2ch(void *dst, const void *src, int count)$/;"	f	file:
convert_s8_1ch_to_s16_2ch	pcm.c	/^static void convert_s8_1ch_to_s16_2ch(void *dst, const void *src, int count)$/;"	f	file:
convert_s8_2ch_to_s16_2ch	pcm.c	/^static void convert_s8_2ch_to_s16_2ch(void *dst, const void *src, int count)$/;"	f	file:
convert_u16_be_to_s16_le	pcm.c	/^static void convert_u16_be_to_s16_le(void *buf, int count)$/;"	f	file:
convert_u16_le_to_s16_le	pcm.c	/^static void convert_u16_le_to_s16_le(void *buf, int count)$/;"	f	file:
convert_u8_1ch_to_s16_2ch	pcm.c	/^static void convert_u8_1ch_to_s16_2ch(void *dst, const void *src, int count)$/;"	f	file:
convert_u8_2ch_to_s16_2ch	pcm.c	/^static void convert_u8_2ch_to_s16_2ch(void *dst, const void *src, int count)$/;"	f	file:
count	input.c	/^	int count;$/;"	m	struct:read_playlist_data	file:
count	keyval.h	/^	int count;$/;"	m	struct:growing_keyvals
count	load_dir.h	/^	int count;$/;"	m	struct:ptr_array
count	tabexp.h	/^	int count;$/;"	m	struct:tabexp
count_albums	command_mode.c	/^static int count_albums(void)$/;"	f	file:
counter	ip.h	/^	int counter;$/;"	m	struct:input_plugin_data
cpos	cmdline.h	/^	int cpos;$/;"	m	struct:cmdline
ctrl_c_pressed	ui_curses.c	/^static int ctrl_c_pressed = 0;$/;"	v	file:
ctx	keys.h	/^	enum key_context ctx;$/;"	m	struct:binding	typeref:enum:binding::key_context
cur_job	worker.c	/^static struct worker_job *cur_job = NULL;$/;"	v	typeref:struct:worker_job	file:
cur_track_ti	lib.c	/^static struct track_info *cur_track_ti = NULL;$/;"	v	typeref:struct:track_info	file:
cur_view	ui_curses.c	/^int cur_view = TREE_VIEW;$/;"	v
current_alt_format	options.c	/^char *current_alt_format = NULL;$/;"	v
current_bitrate	player.h	/^	int current_bitrate;$/;"	m	struct:player_info
current_format	options.c	/^char *current_format = NULL;$/;"	v
current_track	ui_curses.c	/^static struct simple_track *current_track;$/;"	v	typeref:struct:simple_track	file:
current_win	command_mode.c	/^static struct window *current_win(void)$/;"	f	file:
cursed_to_attr_idx	ui_curses.c	/^static unsigned char cursed_to_attr_idx[NR_CURSED] = {$/;"	v	file:
cursed_to_bg_idx	ui_curses.c	/^static unsigned char cursed_to_bg_idx[NR_CURSED] = {$/;"	v	file:
cursed_to_fg_idx	ui_curses.c	/^static unsigned char cursed_to_fg_idx[NR_CURSED] = {$/;"	v	file:
cursor_x	ui_curses.c	/^static int cursor_x;$/;"	v	file:
cursor_y	ui_curses.c	/^static int cursor_y;$/;"	v	file:
d	load_dir.h	/^	DIR *d;$/;"	m	struct:directory
d_print	debug.h	29;"	d
data	buffer.c	/^	char data[CHUNK_SIZE];$/;"	m	struct:chunk	file:
data	cmus.c	/^	void *data;$/;"	m	struct:pl_data	file:
data	input.c	/^	struct input_plugin_data data;$/;"	m	struct:input_plugin	typeref:struct:input_plugin::input_plugin_data	file:
data	search.c	/^	void *data;$/;"	m	struct:searchable	file:
data	worker.c	/^	void *data;$/;"	m	struct:worker_job	file:
data0	iter.h	/^	void *data0;$/;"	m	struct:iter
data1	iter.h	/^	void *data1;$/;"	m	struct:iter
data2	iter.h	/^	void *data2;$/;"	m	struct:iter
datadir	config.mk	/^datadir = \/usr\/local\/share$/;"	m
date	lib.h	/^	int date;$/;"	m	struct:album
date	track_info.h	/^	int date;$/;"	m	struct:track_info
debug_init	debug.c	/^void debug_init(void)$/;"	f
debug_stream	debug.c	/^static FILE *debug_stream = NULL;$/;"	v	file:
delete	search_mode.c	/^static void delete(void)$/;"	f	file:
dependencies	lib.mk	/^dependencies	:= $(wildcard .dep-*)$/;"	m
die	prog.c	/^void __NORETURN die(const char *format, ...)$/;"	f
die_errno	prog.c	/^void __NORETURN die_errno(const char *format, ...)$/;"	f
dir_close	load_dir.c	/^void dir_close(struct directory *dir)$/;"	f
dir_entry	load_dir.h	/^struct dir_entry {$/;"	s
dir_entry_cmp	job.c	/^static int dir_entry_cmp(const void *ap, const void *bp)$/;"	f	file:
dir_entry_cmp_reverse	job.c	/^static int dir_entry_cmp_reverse(const void *ap, const void *bp)$/;"	f	file:
dir_exists	misc.c	/^static int dir_exists(const char *dirname)$/;"	f	file:
dir_open	load_dir.c	/^int dir_open(struct directory *dir, const char *name)$/;"	f
dir_read	load_dir.c	/^const char *dir_read(struct directory *dir)$/;"	f
directory	load_dir.h	/^struct directory {$/;"	s
discnumber	track_info.h	/^	int discnumber;$/;"	m	struct:track_info
display_artist_sort_name	options.c	/^int display_artist_sort_name;$/;"	v
distclean	lib.mk	/^distclean	:=$/;"	m
do_add_job	job.c	/^void do_add_job(void *data)$/;"	f
do_browser_load	browser.c	/^static int do_browser_load(const char *name)$/;"	f	file:
do_cache_remove_ti	cache.c	/^static void do_cache_remove_ti(struct track_info *ti, unsigned int hash)$/;"	f	file:
do_clear_before	lib.c	/^static int do_clear_before(const char *str, struct expr *expr)$/;"	f	file:
do_cmus_save	cmus.c	/^static int do_cmus_save(for_each_ti_cb for_each_ti, const char *filename, save_tracks_cb save_tracks)$/;"	f	file:
do_editable_add	editable.c	/^static void do_editable_add(struct editable *e, struct simple_track *track, int tiebreak)$/;"	f	file:
do_filters_set_filter	filters.c	/^static void do_filters_set_filter(const char *keyval)$/;"	f	file:
do_find_album	tree.c	/^static struct album *do_find_album(const struct album *album,$/;"	f	file:
do_find_artist	tree.c	/^static struct artist *do_find_artist(const struct artist *artist,$/;"	f	file:
do_glob_match	glob.c	/^static int do_glob_match(struct list_head *head, struct list_head *first, const char *text)$/;"	f	file:
do_http_get	input.c	/^static int do_http_get(struct http_get *hg, const char *uri, int redirections)$/;"	f	file:
do_lib_filter	lib.c	/^static void do_lib_filter(int clear_before)$/;"	f	file:
do_lib_for_each	lib.c	/^static int do_lib_for_each(int (*cb)(void *data, struct track_info *ti), void *data, int filtered)$/;"	f	file:
do_parse_flags	command_mode.c	/^static int do_parse_flags(const char **strp, const char *flags, int only_last)$/;"	f	file:
do_save	command_mode.c	/^static void do_save(for_each_ti_cb for_each_ti, const char *arg, char **filenamep, save_ti_cb save_ti)$/;"	f	file:
do_search	search.c	/^static int do_search(struct searchable *s, struct iter *iter, const char *text, int direction)$/;"	f	file:
do_set_softvol	options.c	/^static void do_set_softvol(int soft)$/;"	f	file:
do_u_search	search.c	/^static int do_u_search(struct searchable *s, struct iter *iter, const char *text, int direction)$/;"	f	file:
do_u_strcasestr	uchar.c	/^static inline char *do_u_strcasestr(const char *haystack, const char *needle, int only_base_chars)$/;"	f	file:
do_u_strncase_equal	uchar.c	/^static inline int do_u_strncase_equal(const char *a, const char *b, size_t len, int only_base_chars)$/;"	f	file:
do_update_cache_job	job.c	/^void do_update_cache_job(void *data)$/;"	f
do_update_commandline	ui_curses.c	/^static void do_update_commandline(void)$/;"	f	file:
do_update_job	job.c	/^void do_update_job(void *data)$/;"	f
do_update_statusline	ui_curses.c	/^static void do_update_statusline(void)$/;"	f	file:
do_update_titleline	ui_curses.c	/^static void do_update_titleline(void)$/;"	f	file:
do_update_view	ui_curses.c	/^static void do_update_view(int full)$/;"	f	file:
double_len	format_print.c	/^static int double_len(double num)$/;"	f	file:
doublecmp0	track_info.c	/^static int doublecmp0(double a, double b)$/;"	f	file:
draw_separator	ui_curses.c	/^static void draw_separator(void)$/;"	f	file:
drop	op.h	/^	int (*drop)(void);$/;"	m	struct:output_plugin_ops
dummy_filter	pl.c	/^static int dummy_filter(const struct simple_track *track)$/;"	f	file:
dump_buffer	ui_curses.c	/^static void dump_buffer(const char *buffer)$/;"	f	file:
dump_print_buffer	ui_curses.c	/^static void dump_print_buffer(int row, int col)$/;"	f	file:
duration	cache.c	/^	int duration;$/;"	m	struct:cache_entry	file:
duration	input.c	/^	int duration;$/;"	m	struct:input_plugin	file:
duration	ip.h	/^	int (*duration)(struct input_plugin_data *ip_data);$/;"	m	struct:input_plugin_ops
duration	track_info.h	/^	int duration;$/;"	m	struct:track_info
edit_sel_filter	filters.c	/^static void edit_sel_filter(void)$/;"	f	file:
editable	editable.h	/^struct editable {$/;"	s
editable_add	editable.c	/^void editable_add(struct editable *e, struct simple_track *track)$/;"	f
editable_add_before	editable.c	/^void editable_add_before(struct editable *e, struct simple_track *track)$/;"	f
editable_clear	editable.c	/^void editable_clear(struct editable *e)$/;"	f
editable_for_each_sel	editable.c	/^int editable_for_each_sel(struct editable *e, int (*cb)(void *data, struct track_info *ti),$/;"	f
editable_init	editable.c	/^void editable_init(struct editable *e, void (*free_track)(struct list_head *item))$/;"	f
editable_invert_marks	editable.c	/^void editable_invert_marks(struct editable *e)$/;"	f
editable_lock	editable.h	73;"	d
editable_mark	editable.c	/^void editable_mark(struct editable *e, const char *filter)$/;"	f
editable_move_after	editable.c	/^void editable_move_after(struct editable *e)$/;"	f
editable_move_before	editable.c	/^void editable_move_before(struct editable *e)$/;"	f
editable_mutex	editable.c	/^pthread_mutex_t editable_mutex = CMUS_MUTEX_INITIALIZER;$/;"	v
editable_remove_matching_tracks	editable.c	/^void editable_remove_matching_tracks(struct editable *e,$/;"	f
editable_remove_sel	editable.c	/^void editable_remove_sel(struct editable *e)$/;"	f
editable_remove_track	editable.c	/^void editable_remove_track(struct editable *e, struct simple_track *track)$/;"	f
editable_set_sort_keys	editable.c	/^void editable_set_sort_keys(struct editable *e, sort_key_t *keys)$/;"	f
editable_sort	editable.c	/^void editable_sort(struct editable *e)$/;"	f
editable_toggle_mark	editable.c	/^void editable_toggle_mark(struct editable *e)$/;"	f
editable_track_to_iter	editable.h	/^static inline void editable_track_to_iter(struct editable *e, struct simple_track *track, struct iter *iter)$/;"	f
editable_unlock	editable.h	74;"	d
editable_unmark	editable.c	/^void editable_unmark(struct editable *e)$/;"	f
editable_update_track	editable.c	/^void editable_update_track(struct editable *e, struct track_info *old, struct track_info *new)$/;"	f
eint	expr.h	/^		} eint;$/;"	m	union:expr::__anon7	typeref:struct:expr::__anon7::__anon10
empty	format_print.h	/^	unsigned int empty : 1;$/;"	m	struct:format_option
ends_with	utils.h	/^static inline int ends_with(const char *str, const char *suffix)$/;"	f
ensure_filter_name	filters.c	/^static int ensure_filter_name(const char *name, int sel_stat)$/;"	f	file:
enter_command_mode	ui_curses.c	/^void enter_command_mode(void)$/;"	f
enter_search_backward_mode	ui_curses.c	/^void enter_search_backward_mode(void)$/;"	f
enter_search_mode	ui_curses.c	/^void enter_search_mode(void)$/;"	f
entry_cmp	browser.c	/^static int entry_cmp(const struct browser_entry *a, const struct browser_entry *b)$/;"	f	file:
eof	input.c	/^	unsigned int eof : 1;$/;"	m	struct:input_plugin	file:
error_buf	expr.c	/^static char error_buf[64] = { 0, };$/;"	v	file:
error_buf	ui_curses.c	/^static char error_buf[512];$/;"	v	file:
error_count	ui_curses.c	/^static int error_count = 0;$/;"	v	file:
error_msg	player.h	/^	char *error_msg;$/;"	m	struct:player_info
error_msg	ui_curses.c	/^void error_msg(const char *format, ...)$/;"	f
error_time	ui_curses.c	/^static time_t error_time = 0;$/;"	v	file:
escape	misc.c	/^const char *escape(const char *str)$/;"	f
estr	expr.h	/^		} estr;$/;"	m	union:expr::__anon7	typeref:struct:expr::__anon7::__anon8
exampledir	config.mk	/^exampledir = \/usr\/local\/share\/doc\/cmus\/examples$/;"	m
exit	mixer.h	/^	int (*exit)(void);$/;"	m	struct:mixer_plugin_ops
exit	op.h	/^	int (*exit)(void);$/;"	m	struct:output_plugin_ops
exit_all	ui_curses.c	/^static void exit_all(void)$/;"	f	file:
expand	command_mode.h	/^	void (*expand)(const char *str);$/;"	m	struct:command
expand_add	command_mode.c	/^static void expand_add(const char *str)$/;"	f	file:
expand_bind_args	command_mode.c	/^static void expand_bind_args(const char *str)$/;"	f	file:
expand_colorscheme	command_mode.c	/^static void expand_colorscheme(const char *str)$/;"	f	file:
expand_command_line	command_mode.c	/^static void expand_command_line(const char *str)$/;"	f	file:
expand_commands	command_mode.c	/^static void expand_commands(const char *str)$/;"	f	file:
expand_directories	command_mode.c	/^static void expand_directories(const char *str)$/;"	f	file:
expand_env_path	tabexp_file.c	/^void expand_env_path(const char *src,$/;"	f
expand_factivate	command_mode.c	/^static void expand_factivate(const char *str)$/;"	f	file:
expand_filename	misc.c	/^char *expand_filename(const char *name)$/;"	f
expand_files	command_mode.c	/^static void expand_files(const char *str)$/;"	f	file:
expand_files_and_dirs	tabexp_file.c	/^void expand_files_and_dirs(const char *src,$/;"	f
expand_fset	command_mode.c	/^static void expand_fset(const char *str)$/;"	f	file:
expand_key_context	command_mode.c	/^static void expand_key_context(const char *str, const char *force)$/;"	f	file:
expand_load_save	command_mode.c	/^static void expand_load_save(const char *str)$/;"	f	file:
expand_options	command_mode.c	/^static void expand_options(const char *str)$/;"	f	file:
expand_playable	command_mode.c	/^static void expand_playable(const char *str)$/;"	f	file:
expand_playlist	command_mode.c	/^static void expand_playlist(const char *str)$/;"	f	file:
expand_program_paths	command_mode.c	/^static void expand_program_paths(const char *str)$/;"	f	file:
expand_program_paths_option	command_mode.c	/^static void expand_program_paths_option(const char *str, const char *opt)$/;"	f	file:
expand_short_expr	expr.c	/^static char *expand_short_expr(const char *expr_short)$/;"	f	file:
expand_supported	command_mode.c	/^static void expand_supported(const char *str)$/;"	f	file:
expand_toptions	command_mode.c	/^static void expand_toptions(const char *str)$/;"	f	file:
expand_unbind_args	command_mode.c	/^static void expand_unbind_args(const char *str)$/;"	f	file:
expanded	lib.h	/^	unsigned int expanded : 1;$/;"	m	struct:artist
expbuf	command_mode.c	/^static char expbuf[512];$/;"	v	file:
expr	expr.h	/^struct expr {$/;"	s
expr_check_leaves	expr.c	/^int expr_check_leaves(struct expr **exprp, const char *(*get_filter)(const char *name))$/;"	f
expr_error	expr.c	/^const char *expr_error(void)$/;"	f
expr_eval	expr.c	/^int expr_eval(struct expr *expr, struct track_info *ti)$/;"	f
expr_free	expr.c	/^void expr_free(struct expr *expr)$/;"	f
expr_get_match_type	expr.c	/^unsigned int expr_get_match_type(struct expr *expr)$/;"	f
expr_is_harmless	expr.c	/^int expr_is_harmless(const struct expr *expr)$/;"	f
expr_is_short	expr.c	/^int expr_is_short(const char *str)$/;"	f
expr_names	expr.c	/^static const char * const expr_names[NR_EXPRS] = {$/;"	v	file:
expr_new	expr.c	/^static struct expr *expr_new(int type)$/;"	f	file:
expr_parse	expr.c	/^struct expr *expr_parse(const char *str)$/;"	f
expr_type	expr.h	/^enum expr_type {$/;"	g
extensions	input.c	/^	const char * const *extensions;$/;"	m	struct:ip	file:
fd	http.h	/^	int fd;$/;"	m	struct:http_get
fd	ip.h	/^	int fd;$/;"	m	struct:input_plugin_data
fd	server.h	/^	int fd;$/;"	m	struct:client
fh_entry	lib.c	/^struct fh_entry {$/;"	s	file:
file_changed	player.c	/^static inline void file_changed(struct track_info *ti)$/;"	f	file:
file_changed	player.h	/^	unsigned int file_changed : 1;$/;"	m	struct:player_info
file_for_each_line	file.c	/^int file_for_each_line(const char *filename,$/;"	f
file_get_mtime	utils.h	/^static inline time_t file_get_mtime(const char *filename)$/;"	f
file_type	cmus.h	/^enum file_type {$/;"	g
filename	history.h	/^	char *filename;$/;"	m	struct:history
filename	ip.h	/^	char *filename;$/;"	m	struct:input_plugin_data
filename	options.c	/^	char *filename;$/;"	m	struct:resume	file:
filename	track_info.h	/^	char *filename;$/;"	m	struct:track_info
fill_track_fopts_track_info	ui_curses.c	/^static void fill_track_fopts_track_info(struct track_info *info)$/;"	f	file:
filled	buffer.c	/^	unsigned int filled : 1;$/;"	m	struct:chunk	file:
filter	filters.h	/^	char *filter;$/;"	m	struct:filter_entry
filter	lib.c	/^static struct expr *filter = NULL;$/;"	v	typeref:struct:expr	file:
filter_any	command_mode.c	/^static int filter_any(const char *name, const struct stat *s)$/;"	f	file:
filter_directories	command_mode.c	/^static int filter_directories(const char *name, const struct stat *s)$/;"	f	file:
filter_entry	filters.h	/^struct filter_entry {$/;"	s
filter_entry_to_iter	filters.c	/^static inline void filter_entry_to_iter(struct filter_entry *e, struct iter *iter)$/;"	f	file:
filter_executable_files	command_mode.c	/^static int filter_executable_files(const char *name, const struct stat *s)$/;"	f	file:
filter_playable	command_mode.c	/^static int filter_playable(const char *name, const struct stat *s)$/;"	f	file:
filter_playlist	command_mode.c	/^static int filter_playlist(const char *name, const struct stat *s)$/;"	f	file:
filter_supported	command_mode.c	/^static int filter_supported(const char *name, const struct stat *s)$/;"	f	file:
filters_activate	filters.c	/^void filters_activate(void)$/;"	f
filters_activate_names	filters.c	/^void filters_activate_names(const char *str)$/;"	f
filters_delete_filter	filters.c	/^void filters_delete_filter(void)$/;"	f
filters_exit	filters.c	/^void filters_exit(void)$/;"	f
filters_head	filters.c	/^LIST_HEAD(filters_head);$/;"	v
filters_init	filters.c	/^void filters_init(void)$/;"	f
filters_search_get_current	filters.c	/^static int filters_search_get_current(void *data, struct iter *iter)$/;"	f	file:
filters_search_matches	filters.c	/^static int filters_search_matches(void *data, struct iter *iter, const char *text)$/;"	f	file:
filters_search_ops	filters.c	/^static const struct searchable_ops filters_search_ops = {$/;"	v	typeref:struct:searchable_ops	file:
filters_searchable	filters.c	/^struct searchable *filters_searchable;$/;"	v	typeref:struct:searchable
filters_set_anonymous	filters.c	/^void filters_set_anonymous(const char *val)$/;"	f
filters_set_filter	filters.c	/^void filters_set_filter(const char *keyval)$/;"	f
filters_set_live	filters.c	/^void filters_set_live(const char *val)$/;"	f
filters_toggle_filter	filters.c	/^void filters_toggle_filter(void)$/;"	f
filters_win	filters.c	/^struct window *filters_win;$/;"	v	typeref:struct:window
find_album	tree.c	/^static struct album *find_album(const struct album *album)$/;"	f	file:
find_artist	tree.c	/^static struct artist *find_artist(const struct artist *artist)$/;"	f	file:
find_binding	keys.c	/^static struct binding *find_binding(enum key_context c, const struct key *k)$/;"	f	file:
find_context	keys.c	/^static int find_context(const char *name)$/;"	f	file:
find_filter	filters.c	/^static struct filter_entry *find_filter(const char *name)$/;"	f	file:
find_insert_after_point	editable.c	/^static struct list_head *find_insert_after_point(struct editable *e, struct list_head *item)$/;"	f	file:
find_insert_before_point	editable.c	/^static struct list_head *find_insert_before_point(struct editable *e, struct list_head *item)$/;"	f	file:
find_key	keys.c	/^static const struct key *find_key(const char *name)$/;"	f	file:
find_plugin	input.c	/^static struct ip *find_plugin(int idx)$/;"	f	file:
find_plugin	output.c	/^static struct output_plugin *find_plugin(int idx)$/;"	f	file:
first_byte_mask	uchar.c	/^static unsigned int first_byte_mask[4] = { 0x7f, 0x1f, 0x0f, 0x07 };$/;"	v	file:
fix_key	comment.c	/^static const char *fix_key(const char *key)$/;"	f	file:
flag_to_view	command_mode.c	/^static int flag_to_view(int flag)$/;"	f	file:
flags	command_mode.h	/^	unsigned int flags;$/;"	m	struct:command
flags	options.c	/^	unsigned int flags;$/;"	m	struct:__anon22	file:
flags	options.h	/^	unsigned int flags;$/;"	m	struct:cmus_opt
flags_set	track_info.c	/^static inline int flags_set(const struct track_info *ti, unsigned int flags)$/;"	f	file:
flush_buffer	cache.c	/^static void flush_buffer(int fd, struct gbuf *buf)$/;"	f	file:
flush_ti_buffer	job.c	/^static void flush_ti_buffer(void)$/;"	f	file:
fo_double	format_print.h	/^		double fo_double;$/;"	m	union:format_option::__anon13
fo_int	format_print.h	/^		int fo_int;$/;"	m	union:format_option::__anon13
fo_str	format_print.h	/^		const char *fo_str;$/;"	m	union:format_option::__anon13
fo_time	format_print.h	/^		int fo_time;$/;"	m	union:format_option::__anon13
follow	options.c	/^int follow = 0;$/;"	v
fopt_set_double	ui_curses.c	/^static inline void fopt_set_double(struct format_option *fopt, double value, int empty)$/;"	f	file:
fopt_set_int	ui_curses.c	/^static inline void fopt_set_int(struct format_option *fopt, int value, int empty)$/;"	f	file:
fopt_set_str	ui_curses.c	/^static inline void fopt_set_str(struct format_option *fopt, const char *str)$/;"	f	file:
fopt_set_time	ui_curses.c	/^static inline void fopt_set_time(struct format_option *fopt, int value, int empty)$/;"	f	file:
for_each_name	filters.c	/^static int for_each_name(const char *str, int (*cb)(const char *name, int sel_stat))$/;"	f	file:
for_each_sel_ti_cb	cmus.h	/^typedef int (*for_each_sel_ti_cb)(track_info_cb cb, void *data, int reverse);$/;"	t
for_each_ti_cb	cmus.h	/^typedef int (*for_each_ti_cb)(track_info_cb cb, void *data);$/;"	t
force	job.h	/^	unsigned int force : 1;$/;"	m	struct:add_data
force	job.h	/^	unsigned int force : 1;$/;"	m	struct:update_cache_data
force	job.h	/^	unsigned int force : 1;$/;"	m	struct:update_data
format_double	format_print.c	/^static int format_double(char *buf, int buflen, double num)$/;"	f	file:
format_id	options.c	/^enum format_id {$/;"	g	file:
format_option	format_print.h	/^struct format_option {$/;"	s
format_print	format_print.c	/^int format_print(char *str, int str_width, const char *format, const struct format_option *fopts)$/;"	f
format_str	ui_curses.c	/^static int format_str(char *buf, const char *str, int width)$/;"	f	file:
format_valid	format_print.c	/^int format_valid(const char *format, const struct format_option *fopts)$/;"	f
free_add_job	job.c	/^void free_add_job(void *data)$/;"	f
free_browser_list	browser.c	/^static void free_browser_list(void)$/;"	f	file:
free_cb	worker.c	/^	void (*free_cb)(void *data);$/;"	m	struct:worker_job	file:
free_filter	filters.c	/^static void free_filter(struct filter_entry *e)$/;"	f	file:
free_lib_track	lib.c	/^static void free_lib_track(struct list_head *item)$/;"	f	file:
free_str_array	xmalloc.h	/^static inline void free_str_array(char **array)$/;"	f
free_tokens	expr.c	/^static void free_tokens(struct list_head *head)$/;"	f	file:
free_track	editable.h	/^	void (*free_track)(struct list_head *item);$/;"	m	struct:editable
free_update_cache_job	job.c	/^void free_update_cache_job(void *data)$/;"	f
free_update_job	job.c	/^void free_update_job(void *data)$/;"	f
fullname	browser.c	/^static char *fullname(const char *path, const char *name)$/;"	f	file:
func	command_mode.h	/^	void (*func)(char *arg);$/;"	m	struct:command
gbuf	gbuf.h	/^struct gbuf {$/;"	s
gbuf_add_bytes	gbuf.c	/^void gbuf_add_bytes(struct gbuf *buf, const void *data, size_t len)$/;"	f
gbuf_add_ch	gbuf.c	/^void gbuf_add_ch(struct gbuf *buf, char ch)$/;"	f
gbuf_add_str	gbuf.c	/^void gbuf_add_str(struct gbuf *buf, const char *str)$/;"	f
gbuf_addf	gbuf.c	/^void gbuf_addf(struct gbuf *buf, const char *fmt, ...)$/;"	f
gbuf_avail	gbuf.h	/^static inline size_t gbuf_avail(struct gbuf *buf)$/;"	f
gbuf_clear	gbuf.h	/^static inline void gbuf_clear(struct gbuf *buf)$/;"	f
gbuf_empty_buffer	gbuf.c	/^char gbuf_empty_buffer[1];$/;"	v
gbuf_free	gbuf.c	/^void gbuf_free(struct gbuf *buf)$/;"	f
gbuf_grow	gbuf.c	/^void gbuf_grow(struct gbuf *buf, size_t more)$/;"	f
gbuf_init	gbuf.c	/^static inline void gbuf_init(struct gbuf *buf)$/;"	f	file:
gbuf_set	gbuf.c	/^void gbuf_set(struct gbuf *buf, int c, size_t count)$/;"	f
gbuf_steal	gbuf.c	/^char *gbuf_steal(struct gbuf *buf)$/;"	f
gen_cdda_url	discid.c	/^char *gen_cdda_url(const char *disc_id, int start_track, int end_track)$/;"	f
genre	track_info.h	/^	const char *genre;$/;"	m	struct:track_info
get	options.c	/^	opt_get_cb get;$/;"	m	struct:__anon22	file:
get	options.h	/^	opt_get_cb get;$/;"	m	struct:cmus_opt
get_aaa_mode	options.c	/^static void get_aaa_mode(unsigned int id, char *buf)$/;"	f	file:
get_attr	options.c	/^static void get_attr(unsigned int id, char *buf)$/;"	f	file:
get_auto_reshuffle	options.c	/^static void get_auto_reshuffle(unsigned int id, char *buf)$/;"	f	file:
get_base_from_composed	uchar.c	/^static uchar get_base_from_composed(uchar ch)$/;"	f	file:
get_buffer_seconds	options.c	/^static void get_buffer_seconds(unsigned int id, char *buf)$/;"	f	file:
get_client_fd	ui_curses.c	/^int get_client_fd(void)$/;"	f
get_color	options.c	/^static void get_color(unsigned int id, char *buf)$/;"	f	file:
get_command	command_mode.c	/^struct command *get_command(const char *str)$/;"	f
get_confirm_run	options.c	/^static void get_confirm_run(unsigned int id, char *buf)$/;"	f	file:
get_context	command_mode.c	/^static int get_context(const char *str, int len)$/;"	f	file:
get_continue	options.c	/^static void get_continue(unsigned int id, char *buf)$/;"	f	file:
get_current	search.h	/^	int (*get_current)(void *data, struct iter *iter);$/;"	m	struct:searchable_ops
get_default_cdda_device	discid.c	/^char *get_default_cdda_device(void)$/;"	f
get_device	options.c	/^static void get_device(unsigned int id, char *buf)$/;"	f	file:
get_device_disc_id	discid.c	/^static int get_device_disc_id(const char *device, char **disc_id, int *num_tracks)$/;"	f	file:
get_disc_id	discid.c	/^int get_disc_id(const char *device, char **disc_id, int *num_tracks)$/;"	f
get_display_artist_sort_name	options.c	/^static void get_display_artist_sort_name(unsigned int id, char *buf)$/;"	f	file:
get_dsp_option	output.c	/^static void get_dsp_option(unsigned int id, char *buf)$/;"	f	file:
get_ext	cmus.c	/^static const char *get_ext(const char *filename)$/;"	f	file:
get_extension	path.c	/^const char *get_extension(const char *filename)$/;"	f
get_fds	mixer.h	/^	int (*get_fds)(int *fds);$/;"	m	struct:mixer_plugin_ops
get_filter	filters.c	/^static const char *get_filter(const char *name)$/;"	f	file:
get_follow	options.c	/^static void get_follow(unsigned int id, char *buf)$/;"	f	file:
get_format	options.c	/^static void get_format(unsigned int id, char *buf)$/;"	f	file:
get_full_dir_name	tabexp_file.c	/^static char *get_full_dir_name(const char *dir)$/;"	f	file:
get_home	tabexp_file.c	/^static char *get_home(const char *user)$/;"	f	file:
get_home_dir	misc.c	/^static char *get_home_dir(const char *username)$/;"	f	file:
get_icecast_default_charset	options.c	/^static void get_icecast_default_charset(unsigned int id, char *buf)$/;"	f	file:
get_id3_default_charset	options.c	/^static void get_id3_default_charset(unsigned int id, char *buf)$/;"	f	file:
get_int_or_key	expr.c	/^static struct token *get_int_or_key(const char *str, int *idxp)$/;"	f	file:
get_ip_option	input.c	/^static void get_ip_option(unsigned int id, char *buf)$/;"	f	file:
get_lib_sort	options.c	/^static void get_lib_sort(unsigned int id, char *buf)$/;"	f	file:
get_mixer_option	output.c	/^static void get_mixer_option(unsigned int id, char *buf)$/;"	f	file:
get_next	player.c	/^static inline int get_next(struct track_info **ti)$/;"	f	file:
get_next	player.h	/^	int (*get_next)(struct track_info **ti);$/;"	m	struct:player_callbacks
get_next	search.h	/^	int (*get_next)(struct iter *iter);$/;"	m	struct:searchable_ops
get_next	ui_curses.c	/^static int get_next(struct track_info **ti)$/;"	f	file:
get_next	window.h	/^	int (*get_next)(struct iter *iter);$/;"	m	struct:window
get_non_empty_env	misc.c	/^static char *get_non_empty_env(const char *name)$/;"	f	file:
get_number	command_mode.c	/^static int get_number(char *str, char **end)$/;"	f	file:
get_one_ti	command_mode.c	/^static int get_one_ti(void *data, struct track_info *ti)$/;"	f	file:
get_ops_by_extension	input.c	/^static const struct input_plugin_ops *get_ops_by_extension(const char *ext, struct list_head **headp)$/;"	f	file:
get_ops_by_mime_type	input.c	/^static const struct input_plugin_ops *get_ops_by_mime_type(const char *mime_type)$/;"	f	file:
get_option	ip.h	/^	int (*get_option)(int key, char **val);$/;"	m	struct:input_plugin_ops
get_option	mixer.h	/^	int (*get_option)(int key, char **val);$/;"	m	struct:mixer_plugin_ops
get_option	op.h	/^	int (*get_option)(int key, char **val);$/;"	m	struct:output_plugin_ops
get_option	prog.c	/^int get_option(char **argvp[], const struct option *options, char **arg)$/;"	f
get_output_plugin	options.c	/^static void get_output_plugin(unsigned int id, char *buf)$/;"	f	file:
get_passwd	options.c	/^static void get_passwd(unsigned int id, char *buf)$/;"	f	file:
get_pl_sort	options.c	/^static void get_pl_sort(unsigned int id, char *buf)$/;"	f	file:
get_play_library	options.c	/^static void get_play_library(unsigned int id, char *buf)$/;"	f	file:
get_play_sorted	options.c	/^static void get_play_sorted(unsigned int id, char *buf)$/;"	f	file:
get_prev	search.h	/^	int (*get_prev)(struct iter *iter);$/;"	m	struct:searchable_ops
get_prev	window.h	/^	int (*get_prev)(struct iter *iter);$/;"	m	struct:window
get_repeat	options.c	/^static void get_repeat(unsigned int id, char *buf)$/;"	f	file:
get_repeat_current	options.c	/^static void get_repeat_current(unsigned int id, char *buf)$/;"	f	file:
get_replaygain	options.c	/^static void get_replaygain(unsigned int id, char *buf)$/;"	f	file:
get_replaygain_limit	options.c	/^static void get_replaygain_limit(unsigned int id, char *buf)$/;"	f	file:
get_replaygain_preamp	options.c	/^static void get_replaygain_preamp(unsigned int id, char *buf)$/;"	f	file:
get_resume	options.c	/^static void get_resume(unsigned int id, char *buf)$/;"	f	file:
get_rewind_offset	options.c	/^static void get_rewind_offset(unsigned int id, char *buf)$/;"	f	file:
get_scroll_offset	options.c	/^static void get_scroll_offset(unsigned int id, char *buf)$/;"	f	file:
get_sel_track	lib.c	/^static struct tree_track *get_sel_track(void)$/;"	f	file:
get_selected	editable.c	/^static struct simple_track *get_selected(struct editable *e)$/;"	f	file:
get_set_term_title	options.c	/^static void get_set_term_title(unsigned int id, char *buf)$/;"	f	file:
get_show_current_bitrate	options.c	/^static void get_show_current_bitrate(unsigned int id, char *buf)$/;"	f	file:
get_show_hidden	options.c	/^static void get_show_hidden(unsigned int id, char *buf)$/;"	f	file:
get_show_playback_position	options.c	/^static void get_show_playback_position(unsigned int id, char *buf)$/;"	f	file:
get_show_remaining_time	options.c	/^static void get_show_remaining_time(unsigned int id, char *buf)$/;"	f	file:
get_shuffle	options.c	/^static void get_shuffle(unsigned int id, char *buf)$/;"	f	file:
get_skip_track_info	options.c	/^static void get_skip_track_info(unsigned int id, char *buf)$/;"	f	file:
get_smart_artist_sort	options.c	/^static void get_smart_artist_sort(unsigned int id, char *buf)$/;"	f	file:
get_softvol	options.c	/^static void get_softvol(unsigned int id, char *buf)$/;"	f	file:
get_softvol_state	options.c	/^static void get_softvol_state(unsigned int id, char *buf)$/;"	f	file:
get_status_display_program	options.c	/^static void get_status_display_program(unsigned int id, char *buf)$/;"	f	file:
get_str	expr.c	/^static struct token *get_str(const char *str, int *idxp)$/;"	f	file:
get_stream_title	ui_curses.c	/^const char *get_stream_title(void)$/;"	f
get_token	expr.c	/^static struct token *get_token(const char *str, int *idxp)$/;"	f	file:
get_track_infos	cache.c	/^static struct track_info **get_track_infos(void)$/;"	f	file:
get_volume	mixer.h	/^	int (*get_volume)(int *l, int *r);$/;"	m	struct:mixer_plugin_ops
get_window_size	ui_curses.c	/^static int get_window_size(int *lines, int *columns)$/;"	f	file:
get_words	misc.c	/^char **get_words(const char *text)$/;"	f
get_wrap_search	options.c	/^static void get_wrap_search(unsigned int id, char *buf)$/;"	f	file:
getentry	utils.h	24;"	d
glob_compile	glob.c	/^void glob_compile(struct list_head *head, const char *pattern)$/;"	f
glob_free	glob.c	/^void glob_free(struct list_head *head)$/;"	f
glob_head	expr.h	/^			struct list_head glob_head;$/;"	m	struct:expr::__anon7::__anon8	typeref:struct:expr::__anon7::__anon8::list_head
glob_item	glob.c	/^struct glob_item {$/;"	s	file:
glob_match	glob.c	/^int glob_match(struct list_head *head, const char *text)$/;"	f
growing_keyvals	keyval.h	/^struct growing_keyvals {$/;"	s
h	buffer.c	/^	unsigned int h : 31;$/;"	m	struct:chunk	file:
handle	input.c	/^	void *handle;$/;"	m	struct:ip	file:
handle	output.c	/^	void *handle;$/;"	m	struct:output_plugin	file:
handle_ch	ui_curses.c	/^static void handle_ch(uchar ch)$/;"	f	file:
handle_escape	ui_curses.c	/^static void handle_escape(int c)$/;"	f	file:
handle_key	keys.c	/^static int handle_key(const struct binding *b, const struct key *k)$/;"	f	file:
handle_key	ui_curses.c	/^static void handle_key(int key)$/;"	f	file:
handle_line	input.c	/^static int handle_line(void *data, const char *uri)$/;"	f	file:
handle_line	job.c	/^static int handle_line(void *data, const char *line)$/;"	f	file:
handle_line	options.c	/^static int handle_line(void *data, const char *line)$/;"	f	file:
handle_resume_line	options.c	/^static int handle_resume_line(void *data, const char *line)$/;"	f	file:
has_arg	prog.h	/^	int has_arg;$/;"	m	struct:option
hash_add_to_views	lib.c	/^static void hash_add_to_views(void)$/;"	f	file:
hash_insert	lib.c	/^static int hash_insert(struct track_info *ti)$/;"	f	file:
hash_remove	lib.c	/^static void hash_remove(struct track_info *ti)$/;"	f	file:
hash_str	utils.h	/^static inline uint32_t hash_str(const char *s)$/;"	f
hash_table	cache.c	/^static struct track_info *hash_table[HASH_SIZE];$/;"	v	typeref:struct:track_info	file:
head	editable.h	/^	struct list_head head;$/;"	m	struct:editable	typeref:struct:editable::list_head
head	history.h	/^	struct list_head head;$/;"	m	struct:history	typeref:struct:history::list_head
head	search.c	/^	struct iter head;$/;"	m	struct:searchable	typeref:struct:searchable::iter	file:
head	tabexp.h	/^	char *head;$/;"	m	struct:tabexp
head	window.h	/^	struct iter head;$/;"	m	struct:window	typeref:struct:window::iter
headers	http.h	/^	struct keyval *headers;$/;"	m	struct:http_get	typeref:struct:http_get::keyval
help_add_all_unbound	help.c	/^void help_add_all_unbound(void)$/;"	f
help_add_bound	help.c	/^void help_add_bound(const struct binding *bind)$/;"	f
help_add_defaults	help.c	/^static void help_add_defaults(void)$/;"	f	file:
help_add_text	help.c	/^static void help_add_text(const char *s)$/;"	f	file:
help_add_unbound	help.c	/^void help_add_unbound(struct command *cmd)$/;"	f
help_entry	help.h	/^struct help_entry {$/;"	s
help_entry_to_iter	help.c	/^static inline void help_entry_to_iter(struct help_entry *e, struct iter *iter)$/;"	f	file:
help_exit	help.c	/^void help_exit(void)$/;"	f
help_init	help.c	/^void help_init(void)$/;"	f
help_remove	help.c	/^void help_remove(void)$/;"	f
help_remove_bound	help.c	/^void help_remove_bound(const struct binding *bind)$/;"	f
help_remove_unbound	help.c	/^void help_remove_unbound(struct command *cmd)$/;"	f
help_search_get_current	help.c	/^static int help_search_get_current(void *data, struct iter *iter)$/;"	f	file:
help_search_matches	help.c	/^static int help_search_matches(void *data, struct iter *iter, const char *text)$/;"	f	file:
help_search_ops	help.c	/^static const struct searchable_ops help_search_ops = {$/;"	v	typeref:struct:searchable_ops	file:
help_searchable	help.c	/^struct searchable *help_searchable;$/;"	v	typeref:struct:searchable
help_select	help.c	/^void help_select(void)$/;"	f
help_toggle	help.c	/^void help_toggle(void)$/;"	f
help_win	help.c	/^struct window *help_win;$/;"	v	typeref:struct:window
hex_tab	uchar.c	/^const char hex_tab[16] = "0123456789abcdef";$/;"	v
hidden_filter	browser.c	/^static int hidden_filter(const char *name, const struct stat *s)$/;"	f	file:
history	history.h	/^struct history {$/;"	s
history_add_line	history.c	/^void history_add_line(struct history *history, const char *line)$/;"	f
history_add_tail	history.c	/^static int history_add_tail(void *data, const char *line)$/;"	f	file:
history_entry	history.c	/^struct history_entry {$/;"	s	file:
history_entry_free	history.c	/^static void history_entry_free(struct history_entry *history)$/;"	f	file:
history_entry_new	history.c	/^static struct history_entry *history_entry_new(const char *text)$/;"	f	file:
history_free	history.c	/^void history_free(struct history *history)$/;"	f
history_load	history.c	/^void history_load(struct history *history, char *filename, int max_lines)$/;"	f
history_reset_search	history.c	/^void history_reset_search(struct history *history)$/;"	f
history_save	history.c	/^void history_save(struct history *history)$/;"	f
history_search_backward	history.c	/^const char *history_search_backward(struct history *history, const char *text)$/;"	f
history_search_forward	history.c	/^const char *history_search_forward(struct history *history, const char *text)$/;"	f
history_search_text	command_mode.c	/^static char *history_search_text = NULL;$/;"	v	file:
history_search_text	search_mode.c	/^static char *history_search_text = NULL;$/;"	v	file:
home_dir	misc.c	/^const char *home_dir = NULL;$/;"	v
host	http.h	/^	char *host;$/;"	m	struct:http_uri
http_code	input.c	/^	int http_code;$/;"	m	struct:input_plugin	file:
http_connection_timeout	input.c	/^static int http_connection_timeout = 5e3;$/;"	v	file:
http_free_uri	http.c	/^void http_free_uri(struct http_uri *u)$/;"	f
http_get	http.c	/^int http_get(struct http_get *hg, struct keyval *headers, int timeout_ms)$/;"	f
http_get	http.h	/^struct http_get {$/;"	s
http_get_free	http.c	/^void http_get_free(struct http_get *hg)$/;"	f
http_open	http.c	/^int http_open(struct http_get *hg, int timeout_ms)$/;"	f
http_parse_response	http.c	/^static int http_parse_response(char *str, struct http_get *hg)$/;"	f	file:
http_parse_uri	http.c	/^int http_parse_uri(const char *uri, struct http_uri *u)$/;"	f
http_read_body	http.c	/^char *http_read_body(int fd, size_t *size, int timeout_ms)$/;"	f
http_read_response	http.c	/^static int http_read_response(int fd, struct gbuf *buf, int timeout_ms)$/;"	f	file:
http_read_timeout	input.c	/^static int http_read_timeout = 5e3;$/;"	v	file:
http_reason	input.c	/^	char *http_reason;$/;"	m	struct:input_plugin	file:
http_uri	http.h	/^struct http_uri {$/;"	s
http_write	http.c	/^static int http_write(int fd, const char *buf, int count, int timeout_ms)$/;"	f	file:
icecast_default_charset	options.c	/^char *icecast_default_charset = NULL;$/;"	v
icy_genre	ip.h	/^	char *icy_genre;$/;"	m	struct:input_plugin_data
icy_name	ip.h	/^	char *icy_name;$/;"	m	struct:input_plugin_data
icy_url	ip.h	/^	char *icy_url;$/;"	m	struct:input_plugin_data
id	options.h	/^	unsigned int id;$/;"	m	struct:cmus_opt
id3_default_charset	options.c	/^char *id3_default_charset = NULL;$/;"	v
id_to_fmt	options.c	/^static char **id_to_fmt(enum format_id id)$/;"	f	file:
info	track.h	/^	struct track_info *info;$/;"	m	struct:simple_track	typeref:struct:simple_track::track_info
info_msg	ui_curses.c	/^void info_msg(const char *format, ...)$/;"	f
init	mixer.h	/^	int (*init)(void);$/;"	m	struct:mixer_plugin_ops
init	op.h	/^	int (*init)(void);$/;"	m	struct:output_plugin_ops
init_all	ui_curses.c	/^static void init_all(void)$/;"	f	file:
init_curses	ui_curses.c	/^static void init_curses(void)$/;"	f	file:
init_plugin	output.c	/^static void init_plugin(struct output_plugin *o)$/;"	f	file:
input_mode	ui_curses.c	/^enum ui_input_mode input_mode = NORMAL_MODE;$/;"	v	typeref:enum:ui_input_mode
input_plugin	input.c	/^struct input_plugin {$/;"	s	file:
input_plugin_data	ip.h	/^struct input_plugin_data {$/;"	s
input_plugin_ops	ip.h	/^struct input_plugin_ops {$/;"	s
insert_artist	tree.c	/^static void insert_artist(struct artist *artist, struct rb_root *root)$/;"	f	file:
interesting	comment.c	/^static const char *interesting[] = {$/;"	v	file:
ip	input.c	/^	struct input_plugin *ip;$/;"	m	struct:read_playlist_data	typeref:struct:read_playlist_data::input_plugin	file:
ip	input.c	/^struct ip {$/;"	s	file:
ip	player.c	/^static struct input_plugin *ip = NULL;$/;"	v	typeref:struct:input_plugin	file:
ip_add_options	input.c	/^void ip_add_options(void)$/;"	f
ip_bitrate	input.c	/^int ip_bitrate(struct input_plugin *ip)$/;"	f
ip_close	input.c	/^int ip_close(struct input_plugin *ip)$/;"	f
ip_codec	input.c	/^char *ip_codec(struct input_plugin *ip)$/;"	f
ip_codec_profile	input.c	/^char *ip_codec_profile(struct input_plugin *ip)$/;"	f
ip_current_bitrate	input.c	/^int ip_current_bitrate(struct input_plugin *ip)$/;"	f
ip_delete	input.c	/^void ip_delete(struct input_plugin *ip)$/;"	f
ip_dump_plugins	input.c	/^void ip_dump_plugins(void)$/;"	f
ip_duration	input.c	/^int ip_duration(struct input_plugin *ip)$/;"	f
ip_eof	input.c	/^int ip_eof(struct input_plugin *ip)$/;"	f
ip_get_channel_map	input.c	/^void ip_get_channel_map(struct input_plugin *ip, channel_position_t *channel_map)$/;"	f
ip_get_error_msg	input.c	/^char *ip_get_error_msg(struct input_plugin *ip, int rc, const char *arg)$/;"	f
ip_get_filename	input.c	/^const char *ip_get_filename(struct input_plugin *ip)$/;"	f
ip_get_metadata	input.c	/^const char *ip_get_metadata(struct input_plugin *ip)$/;"	f
ip_get_sf	input.c	/^sample_format_t ip_get_sf(struct input_plugin *ip)$/;"	f
ip_get_supported_extensions	input.c	/^char **ip_get_supported_extensions(void)$/;"	f
ip_get_ti	cache.c	/^static struct track_info *ip_get_ti(const char *filename)$/;"	f	file:
ip_init	input.c	/^static void ip_init(struct input_plugin *ip, char *filename)$/;"	f	file:
ip_is_remote	input.c	/^int ip_is_remote(struct input_plugin *ip)$/;"	f
ip_load_plugins	input.c	/^void ip_load_plugins(void)$/;"	f
ip_metadata_changed	input.c	/^int ip_metadata_changed(struct input_plugin *ip)$/;"	f
ip_new	input.c	/^struct input_plugin *ip_new(const char *filename)$/;"	f
ip_open	input.c	/^int ip_open(struct input_plugin *ip)$/;"	f
ip_read	input.c	/^int ip_read(struct input_plugin *ip, char *buffer, int count)$/;"	f
ip_read_comments	input.c	/^int ip_read_comments(struct input_plugin *ip, struct keyval **comments)$/;"	f
ip_reset	input.c	/^static void ip_reset(struct input_plugin *ip, int close_fd)$/;"	f	file:
ip_seek	input.c	/^int ip_seek(struct input_plugin *ip, double offset)$/;"	f
ip_setup	input.c	/^void ip_setup(struct input_plugin *ip)$/;"	f
is_cdda_url	utils.h	/^static inline int is_cdda_url(const char *name)$/;"	f
is_compilation	lib.h	/^	unsigned int is_compilation : 1;$/;"	m	struct:artist
is_cue_url	utils.h	/^static inline int is_cue_url(const char *name)$/;"	f
is_filtered	lib.c	/^static int is_filtered(struct track_info *ti)$/;"	f	file:
is_filtered_cb	lib.c	/^static int is_filtered_cb(void *data, struct track_info *ti)$/;"	f	file:
is_freeform_true	utils.h	/^static inline int is_freeform_true(const char *c)$/;"	f
is_http_url	utils.h	/^static inline int is_http_url(const char *name)$/;"	f
is_link	load_dir.h	/^	int is_link;$/;"	m	struct:directory
is_stdout_filename	command_mode.c	/^static int is_stdout_filename(const char *str)$/;"	f	file:
is_url	utils.h	/^static inline int is_url(const char *name)$/;"	f
is_va_compilation	track_info.h	/^	int is_va_compilation : 1;$/;"	m	struct:track_info
is_various_artists	comment.c	/^static int is_various_artists(const char *a)$/;"	f	file:
iter	iter.h	/^struct iter {$/;"	s
iter_head	iter.h	/^static inline void iter_head(struct iter *iter)$/;"	f
iter_init	iter.h	/^static inline void iter_init(struct iter *iter)$/;"	f
iter_is_empty	iter.h	/^static inline int iter_is_empty(struct iter *iter)$/;"	f
iter_is_head	iter.h	/^static inline int iter_is_head(struct iter *iter)$/;"	f
iter_is_null	iter.h	/^static inline int iter_is_null(struct iter *iter)$/;"	f
iter_to_album	lib.h	/^static inline struct album *iter_to_album(const struct iter *iter)$/;"	f
iter_to_artist	lib.h	/^static inline struct artist *iter_to_artist(const struct iter *iter)$/;"	f
iter_to_browser_entry	browser.h	/^static inline struct browser_entry *iter_to_browser_entry(struct iter *iter)$/;"	f
iter_to_filter_entry	filters.h	/^static inline struct filter_entry *iter_to_filter_entry(struct iter *iter)$/;"	f
iter_to_help_entry	help.h	/^static inline struct help_entry *iter_to_help_entry(struct iter *iter)$/;"	f
iter_to_simple_track	track.h	/^static inline struct simple_track *iter_to_simple_track(const struct iter *iter)$/;"	f
iter_to_sorted_track	lib.h	/^static inline struct tree_track *iter_to_sorted_track(const struct iter *iter)$/;"	f
iter_to_tree_search_track	tree.c	/^static inline struct tree_track *iter_to_tree_search_track(const struct iter *iter)$/;"	f	file:
iter_to_tree_track	lib.h	/^static inline struct tree_track *iter_to_tree_track(const struct iter *iter)$/;"	f
iters_equal	iter.h	/^static inline int iters_equal(struct iter *a, struct iter *b)$/;"	f
jd	job.c	/^static struct add_data *jd;$/;"	v	typeref:struct:add_data	file:
job_cb	worker.c	/^	void (*job_cb)(void *data);$/;"	m	struct:worker_job	file:
key	expr.c	/^	const char *key;$/;"	m	struct:__anon5	file:
key	expr.h	/^	char *key;$/;"	m	struct:expr
key	keys.h	/^	const struct key *key;$/;"	m	struct:binding	typeref:struct:binding::key
key	keys.h	/^	int key;$/;"	m	struct:key
key	keys.h	/^struct key {$/;"	s
key	keyval.h	/^	char *key;$/;"	m	struct:keyval
key	options.c	/^	sort_key_t key;$/;"	m	struct:__anon21	file:
key_bind	keys.c	/^int key_bind(const char *context, const char *key, const char *cmd, int force)$/;"	f
key_bindings	keys.c	/^struct binding *key_bindings[NR_CTXS] = { NULL, };$/;"	v	typeref:struct:binding
key_context	keys.h	/^enum key_context {$/;"	g
key_context_names	keys.c	/^const char * const key_context_names[NR_CTXS + 1] = {$/;"	v
key_map	comment.c	/^} key_map[] = {$/;"	v	typeref:struct:__anon3	file:
key_table	keys.c	/^const struct key key_table[] = {$/;"	v	typeref:struct:key
key_unbind	keys.c	/^int key_unbind(const char *context, const char *key, int force)$/;"	f
keycode_to_key	keys.c	/^static const struct key *keycode_to_key(int key)$/;"	f	file:
keyval	keyval.h	/^struct keyval {$/;"	s
keyvals	keyval.h	/^	struct keyval *keyvals;$/;"	m	struct:growing_keyvals	typeref:struct:growing_keyvals::keyval
keyvals_add	keyval.c	/^void keyvals_add(struct growing_keyvals *c, const char *key, char *val)$/;"	f
keyvals_add_basic_auth	input.c	/^static void keyvals_add_basic_auth(struct growing_keyvals *c,$/;"	f	file:
keyvals_dup	keyval.c	/^struct keyval *keyvals_dup(const struct keyval *keyvals)$/;"	f
keyvals_free	keyval.c	/^void keyvals_free(struct keyval *keyvals)$/;"	f
keyvals_get_val	keyval.c	/^const char *keyvals_get_val(const struct keyval *keyvals, const char *key)$/;"	f
keyvals_get_val_growing	keyval.c	/^const char *keyvals_get_val_growing(const struct growing_keyvals *c, const char *key)$/;"	f
keyvals_init	keyval.c	/^void keyvals_init(struct growing_keyvals *c, const struct keyval *keyvals)$/;"	f
keyvals_new	keyval.c	/^struct keyval *keyvals_new(int num)$/;"	f
keyvals_terminate	keyval.c	/^void keyvals_terminate(struct growing_keyvals *c)$/;"	f
l	buffer.c	/^	unsigned int l;$/;"	m	struct:chunk	file:
l_str	format_print.c	/^static char *l_str = NULL;$/;"	v	file:
l_str_size	format_print.c	/^static int l_str_size = -1;$/;"	v	file:
left	expr.h	/^	struct expr *left, *right, *parent;$/;"	m	struct:expr	typeref:struct:expr::expr
len	gbuf.h	/^	size_t len;$/;"	m	struct:gbuf
len	load_dir.h	/^	int len;$/;"	m	struct:directory
len_tab	uchar.c	/^static const signed char len_tab[256] = {$/;"	v	file:
lib_add_track	lib.c	/^void lib_add_track(struct track_info *ti)$/;"	f
lib_artist_root	tree.c	/^struct rb_root lib_artist_root;$/;"	v	typeref:struct:rb_root
lib_autosave_filename	ui_curses.c	/^static char *lib_autosave_filename;$/;"	v	file:
lib_clear_store	lib.c	/^void lib_clear_store(void)$/;"	f
lib_cur_track	lib.c	/^struct tree_track *lib_cur_track = NULL;$/;"	v	typeref:struct:tree_track
lib_cur_win	tree.c	/^struct window *lib_cur_win;$/;"	v	typeref:struct:window
lib_editable	lib.c	/^struct editable lib_editable;$/;"	v	typeref:struct:editable
lib_ext_filename	ui_curses.c	/^char *lib_ext_filename = NULL;$/;"	v
lib_filename	options.c	/^	char *lib_filename;$/;"	m	struct:resume	file:
lib_filename	ui_curses.c	/^char *lib_filename = NULL;$/;"	v
lib_find_track	lib.c	/^struct tree_track *lib_find_track(struct track_info *ti)$/;"	f
lib_for_each	lib.c	/^int lib_for_each(int (*cb)(void *data, struct track_info *ti), void *data)$/;"	f
lib_for_each_filtered	lib.c	/^int lib_for_each_filtered(int (*cb)(void *data, struct track_info *ti), void *data)$/;"	f
lib_get_cur_stored_track	lib.c	/^struct track_info *lib_get_cur_stored_track(void)$/;"	f
lib_init	lib.c	/^void lib_init(void)$/;"	f
lib_live_filter	lib.c	/^char *lib_live_filter = NULL;$/;"	v
lib_remove	lib.c	/^int lib_remove(struct track_info *ti)$/;"	f
lib_reshuffle	lib.c	/^void lib_reshuffle(void)$/;"	f
lib_set_filter	lib.c	/^void lib_set_filter(struct expr *expr)$/;"	f
lib_set_live_filter	lib.c	/^void lib_set_live_filter(const char *str)$/;"	f
lib_set_next	lib.c	/^struct track_info *lib_set_next(void)$/;"	f
lib_set_prev	lib.c	/^struct track_info *lib_set_prev(void)$/;"	f
lib_set_track	lib.c	/^struct track_info *lib_set_track(struct tree_track *track)$/;"	f
lib_shuffle_root	lib.c	/^static struct rb_root lib_shuffle_root;$/;"	v	typeref:struct:rb_root	file:
lib_store_cur_track	lib.c	/^void lib_store_cur_track(struct track_info *ti)$/;"	f
lib_track_win	tree.c	/^struct window *lib_track_win;$/;"	v	typeref:struct:window
lib_tree_win	tree.c	/^struct window *lib_tree_win;$/;"	v	typeref:struct:window
libdir	config.mk	/^libdir = \/usr\/local\/lib$/;"	m
likely	compiler.h	17;"	d
likely	compiler.h	24;"	d
line	cmdline.h	/^	char *line;$/;"	m	struct:cmdline
lines	history.h	/^	int lines;$/;"	m	struct:history
list_add	list.h	/^static inline void list_add(struct list_head *new, struct list_head *head)$/;"	f
list_add_rand	track.c	/^void list_add_rand(struct list_head *head, struct list_head *node, int nr)$/;"	f
list_add_sorted	help.c	/^static void list_add_sorted(struct list_head *new, struct list_head *head,$/;"	f	file:
list_add_tail	list.h	/^static inline void list_add_tail(struct list_head *new, struct list_head *head)$/;"	f
list_del	list.h	/^static inline void list_del(struct list_head *entry)$/;"	f
list_del_init	list.h	/^static inline void list_del_init(struct list_head *entry)$/;"	f
list_empty	list.h	/^static inline int list_empty(const struct list_head *head)$/;"	f
list_entry	list.h	217;"	d
list_for_each	list.h	225;"	d
list_for_each_entry	list.h	267;"	d
list_for_each_entry_continue	list.h	304;"	d
list_for_each_entry_reverse	list.h	280;"	d
list_for_each_entry_safe	list.h	318;"	d
list_for_each_prev	list.h	247;"	d
list_for_each_safe	list.h	257;"	d
list_head	list.h	/^struct list_head {$/;"	s
list_init	list.h	/^static inline void list_init(struct list_head *head)$/;"	f
list_mergesort	mergesort.c	/^void list_mergesort(struct list_head *head,$/;"	f
list_move	list.h	/^static inline void list_move(struct list_head *list, struct list_head *head)$/;"	f
list_move_tail	list.h	/^static inline void list_move_tail(struct list_head *list,$/;"	f
list_prepare_entry	list.h	294;"	d
list_splice	list.h	/^static inline void list_splice(struct list_head *list, struct list_head *head)$/;"	f
list_splice_init	list.h	/^static inline void list_splice_init(struct list_head *list,$/;"	f
list_win_alt_format	options.c	/^char *list_win_alt_format = NULL;$/;"	v
list_win_format	options.c	/^char *list_win_format = NULL;$/;"	v
list_win_format_va	options.c	/^char *list_win_format_va = NULL;$/;"	v
live_filter	options.c	/^	char *live_filter;$/;"	m	struct:resume	file:
live_filter_expr	lib.c	/^static struct expr *live_filter_expr = NULL;$/;"	v	typeref:struct:expr	file:
load_dir	tabexp_file.c	/^static void load_dir(struct ptr_array *array,$/;"	f	file:
load_themes	command_mode.c	/^static void load_themes(const char *dirname, const char *str, struct ptr_array *array)$/;"	f	file:
long_key	expr.c	/^	const char *long_key;$/;"	m	struct:__anon4	file:
long_opt	prog.h	/^	const char *long_opt;$/;"	m	struct:option
long_option	prog.c	/^static int long_option(const char *opt, const struct option *options)$/;"	f	file:
lookup_cache_entry	cache.c	/^struct track_info *lookup_cache_entry(const char *filename, unsigned int hash)$/;"	f
lookup_key_type	expr.c	/^static enum expr_type lookup_key_type(const char *key)$/;"	f	file:
lookup_long_key	expr.c	/^static const char *lookup_long_key(char c)$/;"	f	file:
main	ui_curses.c	/^int main(int argc, char *argv[])$/;"	f
main_loop	ui_curses.c	/^static void main_loop(void)$/;"	f	file:
make_dir	misc.c	/^static void make_dir(const char *dirname)$/;"	f	file:
malloc_fail	xmalloc.c	/^void malloc_fail(void)$/;"	f
mandir	config.mk	/^mandir = \/usr\/local\/share\/man$/;"	m
map_short2long	expr.c	/^} map_short2long[] = {$/;"	v	typeref:struct:__anon4	file:
marked	track.h	/^	unsigned int marked : 1;$/;"	m	struct:simple_track
match_word	track_info.c	/^static inline int match_word(const struct track_info *ti, const char *word, unsigned int flags)$/;"	f	file:
matches	search.h	/^	int (*matches)(void *data, struct iter *iter, const char *text);$/;"	m	struct:searchable_ops
max	utils.h	/^static inline int max(int a, int b)$/;"	f
max_args	command_mode.h	/^	int max_args;$/;"	m	struct:command
max_lines	history.h	/^	int max_lines;$/;"	m	struct:history
max_val	uchar.c	/^static int max_val[4] = { 0x00007f, 0x0007ff, 0x00ffff, 0x10ffff };$/;"	v	file:
media	track_info.h	/^	const char *media;$/;"	m	struct:track_info
metadata	ip.h	/^	char *metadata;$/;"	m	struct:input_plugin_data
metadata	player.h	/^	char metadata[255 * 16 + 1];$/;"	m	struct:player_info
metadata_changed	ip.h	/^	unsigned int metadata_changed : 1;$/;"	m	struct:input_plugin_data
metadata_changed	player.c	/^static inline void metadata_changed(void)$/;"	f	file:
metadata_changed	player.h	/^	unsigned int metadata_changed : 1;$/;"	m	struct:player_info
metaint	ip.h	/^	int metaint;$/;"	m	struct:input_plugin_data
mime_types	input.c	/^	const char * const *mime_types;$/;"	m	struct:ip	file:
min	utils.h	/^static inline int min(int a, int b)$/;"	f
min_args	command_mode.h	/^	int min_args;$/;"	m	struct:command
min_val	uchar.c	/^static int min_val[4] = { 0x000000, 0x000080, 0x000800, 0x010000 };$/;"	v	file:
misc_init	misc.c	/^int misc_init(void)$/;"	f
mixer_close	output.c	/^void mixer_close(void)$/;"	f
mixer_get_fds	output.c	/^int mixer_get_fds(int *fds)$/;"	f
mixer_initialized	output.c	/^	unsigned int mixer_initialized : 1;$/;"	m	struct:output_plugin	file:
mixer_open	output.c	/^	unsigned int mixer_open : 1;$/;"	m	struct:output_plugin	file:
mixer_open	output.c	/^void mixer_open(void)$/;"	f
mixer_ops	output.c	/^	const struct mixer_plugin_ops *mixer_ops;$/;"	m	struct:output_plugin	typeref:struct:output_plugin::mixer_plugin_ops	file:
mixer_options	output.c	/^	const char * const *mixer_options;$/;"	m	struct:output_plugin	file:
mixer_plugin_ops	mixer.h	/^struct mixer_plugin_ops {$/;"	s
mixer_read_volume	output.c	/^int mixer_read_volume(void)$/;"	f
mixer_set_volume	output.c	/^int mixer_set_volume(int left, int right)$/;"	f
mmap_file	file.c	/^char *mmap_file(const char *filename, int *size)$/;"	f
mode	load_dir.h	/^	mode_t mode;$/;"	m	struct:dir_entry
move_item	editable.c	/^static void move_item(struct editable *e, struct list_head *head, struct list_head *item)$/;"	f	file:
move_sel	editable.c	/^static void move_sel(struct editable *e, struct list_head *after)$/;"	f	file:
ms_sleep	utils.h	/^static inline void ms_sleep(int ms)$/;"	f
msg_is_error	ui_curses.c	/^static int msg_is_error;$/;"	v	file:
mtime	cache.c	/^	time_t mtime;$/;"	m	struct:cache_entry	file:
mtime	track_info.h	/^	time_t mtime;$/;"	m	struct:track_info
mutex	player.h	/^	pthread_mutex_t mutex;$/;"	m	struct:player_info
name	browser.h	/^	char name[];$/;"	m	struct:browser_entry
name	command_mode.h	/^	const char *name;$/;"	m	struct:command
name	filters.h	/^	char *name;$/;"	m	struct:filter_entry
name	input.c	/^	char *name;$/;"	m	struct:ip	file:
name	job.h	/^	char *name;$/;"	m	struct:add_data
name	keys.h	/^	const char *name;$/;"	m	struct:key
name	lib.h	/^	char *name;$/;"	m	struct:album
name	lib.h	/^	char *name;$/;"	m	struct:artist
name	load_dir.h	/^	char name[];$/;"	m	struct:dir_entry
name	options.c	/^	const char *name;$/;"	m	struct:__anon20	file:
name	options.c	/^	const char *name;$/;"	m	struct:__anon22	file:
name	options.h	/^	const char *name;$/;"	m	struct:cmus_opt
name	output.c	/^	char *name;$/;"	m	struct:output_plugin	file:
needs_to_resize	ui_curses.c	/^static int needs_to_resize = 1;$/;"	v	file:
new	cache.c	/^static int new;$/;"	v	file:
new	comment.c	/^	const char *new;$/;"	m	struct:__anon3	file:
next	keys.h	/^	struct binding *next;$/;"	m	struct:binding	typeref:struct:binding::binding
next	lib.c	/^	struct fh_entry *next;$/;"	m	struct:fh_entry	typeref:struct:fh_entry::fh_entry	file:
next	list.h	/^	struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::list_head
next	track_info.h	/^	struct track_info *next;$/;"	m	struct:track_info	typeref:struct:track_info::track_info
next_word	cmdline.c	/^static int next_word(const char *str, int bpos, int *cdiff, const char *delim, int direction)$/;"	f	file:
node	browser.h	/^	struct list_head node;$/;"	m	struct:browser_entry	typeref:struct:browser_entry::list_head
node	command_mode.c	/^	struct list_head node;$/;"	m	struct:album_list	typeref:struct:album_list::list_head	file:
node	command_mode.c	/^	struct list_head node;$/;"	m	struct:track_list	typeref:struct:track_list::list_head	file:
node	expr.c	/^	struct list_head node;$/;"	m	struct:token	typeref:struct:token::list_head	file:
node	filters.h	/^	struct list_head node;$/;"	m	struct:filter_entry	typeref:struct:filter_entry::list_head
node	glob.c	/^	struct list_head node;$/;"	m	struct:glob_item	typeref:struct:glob_item::list_head	file:
node	help.h	/^	struct list_head node;$/;"	m	struct:help_entry	typeref:struct:help_entry::list_head
node	history.c	/^	struct list_head node;$/;"	m	struct:history_entry	typeref:struct:history_entry::list_head	file:
node	input.c	/^	struct list_head node;$/;"	m	struct:ip	typeref:struct:ip::list_head	file:
node	options.h	/^	struct list_head node;$/;"	m	struct:cmus_opt	typeref:struct:cmus_opt::list_head
node	output.c	/^	struct list_head node;$/;"	m	struct:output_plugin	typeref:struct:output_plugin::list_head	file:
node	server.h	/^	struct list_head node;$/;"	m	struct:client	typeref:struct:client::list_head
node	track.h	/^	struct list_head node;$/;"	m	struct:simple_track	typeref:struct:simple_track::list_head
node	worker.c	/^	struct list_head node;$/;"	m	struct:worker_job	typeref:struct:worker_job::list_head	file:
normal_filter	browser.c	/^static int normal_filter(const char *name, const struct stat *s)$/;"	f	file:
normal_get_first	lib.c	/^static struct tree_track *normal_get_first(void)$/;"	f	file:
normal_get_next	lib.c	/^static struct tree_track *normal_get_next(void)$/;"	f	file:
normal_get_prev	lib.c	/^static struct tree_track *normal_get_prev(void)$/;"	f	file:
normal_mode_ch	keys.c	/^void normal_mode_ch(uchar ch)$/;"	f
normal_mode_key	keys.c	/^void normal_mode_key(int key)$/;"	f
nr_marked	editable.h	/^	unsigned int nr_marked;$/;"	m	struct:editable
nr_options	options.c	/^int nr_options = 0;$/;"	v
nr_rows	window.h	/^	int nr_rows;$/;"	m	struct:window
nr_tracks	editable.h	/^	unsigned int nr_tracks;$/;"	m	struct:editable
ns_sleep	utils.h	/^static inline void ns_sleep(int ns)$/;"	f
numlen	format_print.c	/^static int numlen(int num)$/;"	f	file:
obj	Makefile	/^obj = $(SRC:%.c=%.o)$/;"	m
offsetof	compiler.h	12;"	d
offsetof	compiler.h	13;"	d
old	comment.c	/^	const char *old;$/;"	m	struct:__anon3	file:
op	expr.h	/^			} op;$/;"	m	struct:expr::__anon7::__anon10	typeref:enum:expr::__anon7::__anon10::__anon11
op	expr.h	/^			} op;$/;"	m	struct:expr::__anon7::__anon8	typeref:enum:expr::__anon7::__anon8::__anon9
op	output.c	/^static struct output_plugin *op = NULL;$/;"	v	typeref:struct:output_plugin	file:
op_add_options	output.c	/^void op_add_options(void)$/;"	f
op_buffer_space	output.c	/^int op_buffer_space(void)$/;"	f
op_close	output.c	/^int op_close(void)$/;"	f
op_drop	output.c	/^int op_drop(void)$/;"	f
op_dump_plugins	output.c	/^void op_dump_plugins(void)$/;"	f
op_exit_plugins	output.c	/^void op_exit_plugins(void)$/;"	f
op_get_current	output.c	/^const char *op_get_current(void)$/;"	f
op_get_error_msg	output.c	/^char *op_get_error_msg(int rc, const char *arg)$/;"	f
op_load_plugins	output.c	/^void op_load_plugins(void)$/;"	f
op_names	expr.c	/^static const char * const op_names[NR_OPS] = { "<", "<=", "=", ">=", ">", "!=" };$/;"	v	file:
op_open	output.c	/^int op_open(sample_format_t sf, const channel_position_t *channel_map)$/;"	f
op_pause	output.c	/^int op_pause(void)$/;"	f
op_select	output.c	/^int op_select(const char *name)$/;"	f
op_select_any	output.c	/^int op_select_any(void)$/;"	f
op_unpause	output.c	/^int op_unpause(void)$/;"	f
op_write	output.c	/^int op_write(const char *buffer, int count)$/;"	f
open	input.c	/^	unsigned int open : 1;$/;"	m	struct:input_plugin	file:
open	ip.h	/^	int (*open)(struct input_plugin_data *ip_data);$/;"	m	struct:input_plugin_ops
open	mixer.h	/^	int (*open)(int *volume_max);$/;"	m	struct:mixer_plugin_ops
open	op.h	/^	int (*open)(sample_format_t sf, const channel_position_t *channel_map);$/;"	m	struct:output_plugin_ops
open_file	input.c	/^static int open_file(struct input_plugin *ip)$/;"	f	file:
open_remote	input.c	/^static int open_remote(struct input_plugin *ip)$/;"	f	file:
ops	input.c	/^	const struct input_plugin_ops *ops;$/;"	m	struct:input_plugin	typeref:struct:input_plugin::input_plugin_ops	file:
ops	input.c	/^	const struct input_plugin_ops *ops;$/;"	m	struct:ip	typeref:struct:ip::input_plugin_ops	file:
ops	search.c	/^	struct searchable_ops ops;$/;"	m	struct:searchable	typeref:struct:searchable::searchable_ops	file:
opt_get_cb	options.h	/^typedef void (*opt_get_cb)(unsigned int id, char *buf);$/;"	t
opt_set_cb	options.h	/^typedef void (*opt_set_cb)(unsigned int id, const char *buf);$/;"	t
opt_toggle_cb	options.h	/^typedef void (*opt_toggle_cb)(unsigned int id);$/;"	t
option	help.h	/^		const struct cmus_opt *option;$/;"	m	union:help_entry::__anon17	typeref:struct:help_entry::__anon17::cmus_opt
option	prog.h	/^struct option {$/;"	s
option_add	options.c	/^void option_add(const char *name, unsigned int id, opt_get_cb get,$/;"	f
option_error	input.c	/^static void option_error(int rc)$/;"	f	file:
option_error	output.c	/^static void option_error(int rc)$/;"	f	file:
option_find	options.c	/^struct cmus_opt *option_find(const char *name)$/;"	f
option_head	options.c	/^LIST_HEAD(option_head);$/;"	v
option_set	options.c	/^void option_set(const char *name, const char *value)$/;"	f
options	input.c	/^	const char * const *options;$/;"	m	struct:ip	file:
options	ui_curses.c	/^static struct option options[NR_FLAGS + 1] = {$/;"	v	typeref:struct:option	file:
options_add	options.c	/^void options_add(void)$/;"	f
options_exit	options.c	/^void options_exit(void)$/;"	f
options_load	options.c	/^void options_load(void)$/;"	f
originaldate	track_info.h	/^	int originaldate;$/;"	m	struct:track_info
output_plugin	options.c	/^char *output_plugin = NULL;$/;"	v
output_plugin	output.c	/^struct output_plugin {$/;"	s	file:
output_plugin_ops	op.h	/^struct output_plugin_ops {$/;"	s
pad	format_print.c	/^static int pad;$/;"	v	file:
pad_zero	format_print.h	/^	unsigned int pad_zero : 1;$/;"	m	struct:format_option
pairs	ui_curses.c	/^static int pairs[NR_CURSED];$/;"	v	file:
parent	expr.h	/^	struct expr *left, *right, *parent;$/;"	m	struct:expr	typeref:struct:expr::
parse	expr.c	/^static int parse(struct expr **rootp, struct list_head *head, struct list_head **itemp, int level)$/;"	f	file:
parse_bool	options.c	/^static int parse_bool(const char *buf, int *val)$/;"	f	file:
parse_cdda_url	discid.c	/^int parse_cdda_url(const char *url, char **disc_id, int *start_track, int *end_track)$/;"	f
parse_cmd	command_mode.c	/^static char **parse_cmd(const char *cmd, int *args_idx, int *ac)$/;"	f	file:
parse_command	command_mode.c	/^int parse_command(const char *buf, char **cmdp, char **argp)$/;"	f
parse_enum	options.c	/^int parse_enum(const char *buf, int minval, int maxval, const char * const names[], int *val)$/;"	f
parse_escaped	command_mode.c	/^static char *parse_escaped(const char **strp)$/;"	f	file:
parse_filter	filters.c	/^struct expr *parse_filter(const char *val)$/;"	f
parse_flags	command_mode.c	/^static int parse_flags(const char **strp, const char *flags)$/;"	f	file:
parse_int	options.c	/^static int parse_int(const char *buf, int minval, int maxval, int *val)$/;"	f	file:
parse_line	search_mode.c	/^static void parse_line(const char **text, int *restricted)$/;"	f	file:
parse_one	command_mode.c	/^static char *parse_one(const char **strp)$/;"	f	file:
parse_one	expr.c	/^static int parse_one(struct expr **exprp, struct list_head *head, struct list_head **itemp)$/;"	f	file:
parse_one_flag	command_mode.c	/^static int parse_one_flag(const char **strp, const char *flags)$/;"	f	file:
parse_quoted	command_mode.c	/^static char *parse_quoted(const char **strp)$/;"	f	file:
parse_sort_keys	options.c	/^static sort_key_t *parse_sort_keys(const char *value)$/;"	f	file:
parse_vol_arg	command_mode.c	/^static int parse_vol_arg(const char *arg, int *value, unsigned int *flags)$/;"	f	file:
pass	http.h	/^	char *pass;$/;"	m	struct:http_uri
path	http.h	/^	char *path;$/;"	m	struct:http_uri
path	load_dir.h	/^	char path[1024];$/;"	m	struct:directory
path_absolute	path.c	/^char *path_absolute(const char *src)$/;"	f
path_absolute_cwd	path.c	/^char *path_absolute_cwd(const char *src, const char *cwd)$/;"	f
path_basename	path.c	/^const char *path_basename(const char *path)$/;"	f
path_strip	path.c	/^void path_strip(char *str)$/;"	f
pause	op.h	/^	int (*pause)(void);$/;"	m	struct:output_plugin_ops
pcm_conv	pcm.c	/^pcm_conv_func pcm_conv[8] = {$/;"	v
pcm_conv_func	pcm.h	/^typedef void (*pcm_conv_func)(void *dst, const void *src, int count);$/;"	t
pcm_conv_in_place	pcm.c	/^pcm_conv_in_place_func pcm_conv_in_place[8] = {$/;"	v
pcm_conv_in_place_func	pcm.h	/^typedef void (*pcm_conv_in_place_func)(void *buf, int count);$/;"	t
pcm_convert	input.c	/^	void (*pcm_convert)(void *, const void *, int);$/;"	m	struct:input_plugin	file:
pcm_convert_in_place	input.c	/^	void (*pcm_convert_in_place)(void *, int);$/;"	m	struct:input_plugin	file:
pcm_convert_scale	input.c	/^	int pcm_convert_scale;$/;"	m	struct:input_plugin	file:
pcm_initialized	output.c	/^	unsigned int pcm_initialized : 1;$/;"	m	struct:output_plugin	file:
pcm_ops	output.c	/^	const struct output_plugin_ops *pcm_ops;$/;"	m	struct:output_plugin	typeref:struct:output_plugin::output_plugin_ops	file:
pcm_options	output.c	/^	const char * const *pcm_options;$/;"	m	struct:output_plugin	file:
pl_add_track	pl.c	/^void pl_add_track(struct track_info *ti)$/;"	f
pl_autosave_filename	ui_curses.c	/^static char *pl_autosave_filename;$/;"	v	file:
pl_cur_track	pl.c	/^struct simple_track *pl_cur_track = NULL;$/;"	v	typeref:struct:simple_track
pl_data	cmus.c	/^struct pl_data {$/;"	s	file:
pl_editable	pl.c	/^struct editable pl_editable;$/;"	v	typeref:struct:editable
pl_ext_filename	ui_curses.c	/^char *pl_ext_filename = NULL;$/;"	v
pl_filename	ui_curses.c	/^char *pl_filename = NULL;$/;"	v
pl_for_each	pl.c	/^int pl_for_each(int (*cb)(void *data, struct track_info *ti), void *data)$/;"	f
pl_for_each_sel	command_mode.c	/^static int pl_for_each_sel(int (*cb)(void *data, struct track_info *ti), void *data, int reverse)$/;"	f	file:
pl_free_track	pl.c	/^static void pl_free_track(struct list_head *item)$/;"	f	file:
pl_handle_line	cmus.c	/^static int pl_handle_line(void *data, const char *line)$/;"	f	file:
pl_init	pl.c	/^void pl_init(void)$/;"	f
pl_mime_types	input.c	/^static const char *pl_mime_types[] = {$/;"	v	file:
pl_reshuffle	pl.c	/^void pl_reshuffle(void)$/;"	f
pl_sel_current	pl.c	/^void pl_sel_current(void)$/;"	f
pl_set_next	pl.c	/^struct track_info *pl_set_next(void)$/;"	f
pl_set_prev	pl.c	/^struct track_info *pl_set_prev(void)$/;"	f
pl_set_selected	pl.c	/^struct track_info *pl_set_selected(void)$/;"	f
pl_shuffle_root	pl.c	/^static struct rb_root pl_shuffle_root;$/;"	v	typeref:struct:rb_root	file:
play_library	options.c	/^int play_library = 1;$/;"	v
play_queue_append	play_queue.c	/^void play_queue_append(struct track_info *ti)$/;"	f
play_queue_autosave_filename	ui_curses.c	/^static char *play_queue_autosave_filename;$/;"	v	file:
play_queue_ext_filename	ui_curses.c	/^char *play_queue_ext_filename = NULL;$/;"	v
play_queue_filename	ui_curses.c	/^char *play_queue_filename = NULL;$/;"	v
play_queue_for_each	play_queue.c	/^int play_queue_for_each(int (*cb)(void *data, struct track_info *ti), void *data)$/;"	f
play_queue_init	play_queue.c	/^void play_queue_init(void)$/;"	f
play_queue_prepend	play_queue.c	/^void play_queue_prepend(struct track_info *ti)$/;"	f
play_queue_remove	play_queue.c	/^struct track_info *play_queue_remove(void)$/;"	f
play_sorted	lib.c	/^unsigned int play_sorted = 0;$/;"	v
playable_exts	cmus.c	/^static char **playable_exts;$/;"	v	file:
player_callbacks	player.h	/^struct player_callbacks {$/;"	s
player_callbacks	ui_curses.c	/^static const struct player_callbacks player_callbacks = {$/;"	v	typeref:struct:player_callbacks	file:
player_cbs	player.c	/^static const struct player_callbacks *player_cbs = NULL;$/;"	v	typeref:struct:player_callbacks	file:
player_cont	player.c	/^int player_cont = 1;$/;"	v
player_error	player.c	/^static void player_error(const char *msg)$/;"	f	file:
player_exit	player.c	/^void player_exit(void)$/;"	f
player_file_changed	player.c	/^void player_file_changed(struct track_info *ti)$/;"	f
player_get_buffer_chunks	player.c	/^int player_get_buffer_chunks(void)$/;"	f
player_info	player.c	/^struct player_info player_info = {$/;"	v	typeref:struct:player_info
player_info	player.h	/^struct player_info {$/;"	s
player_info_lock	player.h	119;"	d
player_info_unlock	player.h	120;"	d
player_init	player.c	/^void player_init(const struct player_callbacks *callbacks)$/;"	f
player_ip_error	player.c	/^static void __FORMAT(2, 3) player_ip_error(int rc, const char *format, ...)$/;"	f
player_lock	player.c	118;"	d	file:
player_op_error	player.c	/^static void __FORMAT(2, 3) player_op_error(int rc, const char *format, ...)$/;"	f
player_pause	player.c	/^void player_pause(void)$/;"	f
player_play	player.c	/^void player_play(void)$/;"	f
player_play_file	player.c	/^void player_play_file(struct track_info *ti)$/;"	f
player_repeat_current	player.c	/^int player_repeat_current;$/;"	v
player_seek	player.c	/^void player_seek(double offset, int relative, int start_playing)$/;"	f
player_set_buffer_chunks	player.c	/^void player_set_buffer_chunks(unsigned int nr_chunks)$/;"	f
player_set_file	player.c	/^void player_set_file(struct track_info *ti)$/;"	f
player_set_op	player.c	/^void player_set_op(const char *name)$/;"	f
player_set_rg	player.c	/^void player_set_rg(enum replaygain rg)$/;"	f
player_set_rg_limit	player.c	/^void player_set_rg_limit(int limit)$/;"	f
player_set_rg_preamp	player.c	/^void player_set_rg_preamp(double db)$/;"	f
player_set_soft_vol	player.c	/^void player_set_soft_vol(int soft)$/;"	f
player_set_soft_volume	player.c	/^void player_set_soft_volume(int l, int r)$/;"	f
player_status	player.h	/^enum player_status {$/;"	g
player_status_names	player.c	/^const char * const player_status_names[] = { "stopped", "playing", "paused", NULL };$/;"	v
player_stop	player.c	/^void player_stop(void)$/;"	f
player_unlock	player.c	124;"	d	file:
playlist_exts	cmus.c	/^static const char * const playlist_exts[] = { "m3u", "pl", "pls", NULL };$/;"	v	file:
pls_handle_line	cmus.c	/^static int pls_handle_line(void *data, const char *line)$/;"	f	file:
plugin_dir	input.c	/^static const char * const plugin_dir = LIBDIR "\/cmus\/ip";$/;"	v	file:
plugin_dir	output.c	/^static const char * const plugin_dir = LIBDIR "\/cmus\/op";$/;"	v	file:
points_within_and_visible	job.c	/^static int points_within_and_visible(const char *target, const char *root)$/;"	f	file:
port	http.h	/^	int port;$/;"	m	struct:http_uri
pos	player.h	/^	int pos;$/;"	m	struct:player_info
position	options.c	/^	long int position;$/;"	m	struct:resume	file:
position_changed	player.h	/^	unsigned int position_changed : 1;$/;"	m	struct:player_info
post_update	ui_curses.c	/^static void post_update(void)$/;"	f	file:
pq_editable	play_queue.c	/^struct editable pq_editable;$/;"	v	typeref:struct:editable
pq_for_each_sel	command_mode.c	/^static int pq_for_each_sel(int (*cb)(void *data, struct track_info *ti), void *data, int reverse)$/;"	f	file:
pq_free_track	play_queue.c	/^static void pq_free_track(struct list_head *item)$/;"	f	file:
prefetch	list.h	/^static inline void prefetch(const void *x)$/;"	f
pretty	ui_curses.c	/^static const char *pretty(const char *path)$/;"	f	file:
prev	list.h	/^	struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::
prev_view	command_mode.c	/^static int prev_view = -1;$/;"	v	file:
print	format_print.c	/^static void print(char *str, int str_width, const char *format, const struct format_option *fopts)$/;"	f	file:
print_browser	ui_curses.c	/^static void print_browser(struct window *win, int row, struct iter *iter)$/;"	f	file:
print_buffer	ui_curses.c	/^static char print_buffer[512];$/;"	v	file:
print_buffer_max_width	ui_curses.c	126;"	d	file:
print_double	format_print.c	/^static int print_double(char *buf, double num)$/;"	f	file:
print_editable	ui_curses.c	/^static void print_editable(struct window *win, int row, struct iter *iter)$/;"	f	file:
print_filter	ui_curses.c	/^static void print_filter(struct window *win, int row, struct iter *iter)$/;"	f	file:
print_help	ui_curses.c	/^static void print_help(struct window *win, int row, struct iter *iter)$/;"	f	file:
print_num	format_print.c	/^static int print_num(char *buf, int num)$/;"	f	file:
print_str	format_print.c	/^static void print_str(char *buf, int *idx, const char *str)$/;"	f	file:
print_time	format_print.c	/^static int print_time(char *buf, int t)$/;"	f	file:
print_track	ui_curses.c	/^static void print_track(struct window *win, int row, struct iter *iter)$/;"	f	file:
print_tree	ui_curses.c	/^static void print_tree(struct window *win, int row, struct iter *iter)$/;"	f	file:
priority	input.c	/^	int priority;$/;"	m	struct:ip	file:
priority	output.c	/^	int priority;$/;"	m	struct:output_plugin	file:
producer_lock	player.c	112;"	d	file:
producer_loop	player.c	/^static void *producer_loop(void *arg)$/;"	f	file:
producer_mutex	player.c	/^static pthread_mutex_t producer_mutex = CMUS_MUTEX_INITIALIZER;$/;"	v	file:
producer_playing	player.c	/^static pthread_cond_t producer_playing = CMUS_COND_INITIALIZER;$/;"	v	file:
producer_running	player.c	/^static int producer_running = 1;$/;"	v	file:
producer_status	player.c	/^enum producer_status {$/;"	g	file:
producer_status	player.c	/^static enum producer_status producer_status = PS_UNLOADED;$/;"	v	typeref:enum:producer_status	file:
producer_thread	player.c	/^static pthread_t producer_thread;$/;"	v	file:
producer_unlock	player.c	113;"	d	file:
program_name	prog.c	/^char *program_name = NULL;$/;"	v
proxy	http.h	/^	struct http_uri *proxy;$/;"	m	struct:http_get	typeref:struct:http_get::http_uri
ptr_array	load_dir.h	/^struct ptr_array {$/;"	s
ptr_array_add	load_dir.c	/^void ptr_array_add(struct ptr_array *array, void *ptr)$/;"	f
ptr_array_plug	load_dir.h	/^static inline void ptr_array_plug(struct ptr_array *array)$/;"	f
ptr_array_sort	load_dir.h	/^static inline void ptr_array_sort(struct ptr_array *array,$/;"	f
ptr_array_unique	load_dir.h	/^static inline void ptr_array_unique(struct ptr_array *array,$/;"	f
ptrs	load_dir.h	/^	void *ptrs;$/;"	m	struct:ptr_array
quiet	lib.mk	/^    quiet = quiet_$/;"	m
quiet	lib.mk	/^    quiet = silent_$/;"	m
quiet	lib.mk	/^  quiet =$/;"	m
quiet_cmd_ar	lib.mk	/^quiet_cmd_ar = AR     $@$/;"	m
quiet_cmd_as	lib.mk	/^quiet_cmd_as = AS     $@$/;"	m
quiet_cmd_cc	lib.mk	/^quiet_cmd_cc    = CC     $@$/;"	m
quiet_cmd_cc_lo	lib.mk	/^quiet_cmd_cc_lo = CC     $@$/;"	m
quiet_cmd_cxx	lib.mk	/^quiet_cmd_cxx    = CXX    $@$/;"	m
quiet_cmd_cxx_lo	lib.mk	/^quiet_cmd_cxx_lo = CXX    $@$/;"	m
quiet_cmd_cxxld	lib.mk	/^quiet_cmd_cxxld = CXXLD  $@$/;"	m
quiet_cmd_cxxld_dl	lib.mk	/^quiet_cmd_cxxld_dl = CXXLD  $@$/;"	m
quiet_cmd_cxxld_so	lib.mk	/^quiet_cmd_cxxld_so = CXXLD  $@$/;"	m
quiet_cmd_hostcc	lib.mk	/^quiet_cmd_hostcc    = HOSTCC     $@$/;"	m
quiet_cmd_hostld	lib.mk	/^quiet_cmd_hostld = HOSTLD     $@$/;"	m
quiet_cmd_ld	lib.mk	/^quiet_cmd_ld = LD     $@$/;"	m
quiet_cmd_ld_dl	lib.mk	/^quiet_cmd_ld_dl = LD     $@$/;"	m
quiet_cmd_ld_so	lib.mk	/^quiet_cmd_ld_so = LD     $@$/;"	m
r_str	format_print.c	/^static char *r_str = NULL;$/;"	v	file:
r_str_size	format_print.c	/^static int r_str_size = -1;$/;"	v	file:
rand	track.h	/^	double rand;$/;"	m	struct:shuffle_track
rand_array	command_mode.c	/^static int *rand_array(int size, int nmax)$/;"	f	file:
rb_color	rbtree.h	118;"	d
rb_entry	rbtree.h	134;"	d
rb_erase	rbtree.c	/^void rb_erase(struct rb_node *node, struct rb_root *root)$/;"	f
rb_first	rbtree.c	/^struct rb_node *rb_first(const struct rb_root *root)$/;"	f
rb_for_each	rbtree.h	180;"	d
rb_for_each_entry	rbtree.h	208;"	d
rb_for_each_entry_reverse	rbtree.h	219;"	d
rb_for_each_prev	rbtree.h	188;"	d
rb_for_each_safe	rbtree.h	197;"	d
rb_insert_color	rbtree.c	/^void rb_insert_color(struct rb_node *node, struct rb_root *root)$/;"	f
rb_is_black	rbtree.h	120;"	d
rb_is_red	rbtree.h	119;"	d
rb_last	rbtree.c	/^struct rb_node *rb_last(const struct rb_root *root)$/;"	f
rb_left	rbtree.h	/^	struct rb_node *rb_left;$/;"	m	struct:rb_node	typeref:struct:rb_node::rb_node
rb_link_node	rbtree.h	/^static inline void rb_link_node(struct rb_node * node, struct rb_node * parent,$/;"	f
rb_next	rbtree.c	/^struct rb_node *rb_next(const struct rb_node *node)$/;"	f
rb_node	rbtree.h	/^	struct rb_node *rb_node;$/;"	m	struct:rb_root	typeref:struct:rb_root::rb_node
rb_node	rbtree.h	/^struct rb_node$/;"	s
rb_parent	rbtree.h	117;"	d
rb_parent_color	rbtree.h	/^	unsigned long  rb_parent_color;$/;"	m	struct:rb_node
rb_prev	rbtree.c	/^struct rb_node *rb_prev(const struct rb_node *node)$/;"	f
rb_replace_node	rbtree.c	/^void rb_replace_node(struct rb_node *victim, struct rb_node *new,$/;"	f
rb_right	rbtree.h	/^	struct rb_node *rb_right;$/;"	m	struct:rb_node	typeref:struct:rb_node::rb_node
rb_root	rbtree.h	/^struct rb_root$/;"	s
rb_root_empty	rbtree.h	/^static inline int rb_root_empty(struct rb_root *root)$/;"	f
rb_root_init	rbtree.h	/^static inline void rb_root_init(struct rb_root *root)$/;"	f
rb_set_black	rbtree.h	122;"	d
rb_set_color	rbtree.h	/^static inline void rb_set_color(struct rb_node *rb, int color)$/;"	f
rb_set_parent	rbtree.h	/^static inline void rb_set_parent(struct rb_node *rb, struct rb_node *p)$/;"	f
rb_set_red	rbtree.h	121;"	d
rc	input.c	/^	int rc;$/;"	m	struct:read_playlist_data	file:
read	ip.h	/^	int (*read)(struct input_plugin_data *ip_data, char *buffer, int count);$/;"	m	struct:input_plugin_ops
read_all	file.c	/^ssize_t read_all(int fd, void *buf, size_t count)$/;"	f
read_cache	cache.c	/^static int read_cache(void)$/;"	f	file:
read_commands	server.c	/^static void read_commands(struct client *client)$/;"	f	file:
read_comments	ip.h	/^	int (*read_comments)(struct input_plugin_data *ip_data,$/;"	m	struct:input_plugin_ops
read_le16	utils.h	/^static inline uint16_t read_le16(const char *buf)$/;"	f
read_le32	utils.h	/^static inline uint32_t read_le32(const char *buf)$/;"	f
read_playlist	input.c	/^static int read_playlist(struct input_plugin *ip, int sock)$/;"	f	file:
read_playlist_data	input.c	/^struct read_playlist_data {$/;"	s	file:
read_s24le	player.c	/^static inline int32_t read_s24le(const char *buf)$/;"	f	file:
read_timeout	http.c	/^static int read_timeout(int fd, int timeout_ms)$/;"	f	file:
reason	http.h	/^	char *reason;$/;"	m	struct:http_get
recursive_filter	filters.c	/^static const char *recursive_filter;$/;"	v	file:
ref	track_info.h	/^	int ref;$/;"	m	struct:track_info
remote	ip.h	/^	unsigned int remote : 1;$/;"	m	struct:input_plugin_data
remove_album	tree.c	/^static void remove_album(struct album *album)$/;"	f	file:
remove_artist	tree.c	/^static void remove_artist(struct artist *artist)$/;"	f	file:
remove_from_hash	lib.c	/^static int remove_from_hash = 1;$/;"	v	file:
remove_sel_album	tree.c	/^static void remove_sel_album(struct album *album)$/;"	f	file:
remove_sel_artist	tree.c	/^static void remove_sel_artist(struct artist *artist)$/;"	f	file:
remove_track	tree.c	/^static void remove_track(struct tree_track *track)$/;"	f	file:
removed	cache.c	/^static int removed;$/;"	v	file:
repeat	options.c	/^int repeat = 0;$/;"	v
replaygain	player.c	/^enum replaygain replaygain;$/;"	v	typeref:enum:replaygain
replaygain	player.h	/^enum replaygain {$/;"	g
replaygain_decode	misc.c	/^int replaygain_decode(unsigned int field, int *gain)$/;"	f
replaygain_limit	player.c	/^int replaygain_limit = 1;$/;"	v
replaygain_names	options.c	/^static const char * const replaygain_names[] = {$/;"	v	file:
replaygain_preamp	player.c	/^double replaygain_preamp = 0.0;$/;"	v
replaygain_scale	player.c	/^static double replaygain_scale = 1.0;$/;"	v	file:
reset_buffer	player.c	/^static void reset_buffer(void)$/;"	f	file:
reset_history_search	command_mode.c	/^static void reset_history_search(void)$/;"	f	file:
reset_history_search	search_mode.c	/^static void reset_history_search(void)$/;"	f	file:
reset_tab_expansion	command_mode.c	/^static void reset_tab_expansion(void)$/;"	f	file:
reset_tree	editable.c	/^static void reset_tree(struct editable *e)$/;"	f	file:
resize_tree_view	ui_curses.c	/^static void resize_tree_view(int w, int h)$/;"	f	file:
restore_cur_track	lib.c	/^static void restore_cur_track(struct track_info *ti)$/;"	f	file:
restore_sel_track	lib.c	/^static void restore_sel_track(void)$/;"	f	file:
resume	options.c	/^struct resume {$/;"	s	file:
resume_cmus	options.c	/^int resume_cmus = 0;$/;"	v
resume_exit	options.c	/^void resume_exit(void)$/;"	f
resume_load	options.c	/^void resume_load(void)$/;"	f
rewind_offset	options.c	/^int rewind_offset = 5;$/;"	v
rg_album_gain	track_info.h	/^	double rg_album_gain;$/;"	m	struct:track_info
rg_album_peak	track_info.h	/^	double rg_album_peak;$/;"	m	struct:track_info
rg_track_gain	track_info.h	/^	double rg_track_gain;$/;"	m	struct:track_info
rg_track_peak	track_info.h	/^	double rg_track_peak;$/;"	m	struct:track_info
right	expr.h	/^	struct expr *left, *right, *parent;$/;"	m	struct:expr	typeref:struct:expr::
run_command	command_mode.c	/^void run_command(const char *buf)$/;"	f
run_only_safe_commands	command_mode.c	/^int run_only_safe_commands;$/;"	v
run_parsed_command	command_mode.c	/^void run_parsed_command(char *cmd, char *arg)$/;"	f
running	worker.c	/^static int running = 1;$/;"	v	file:
sa	server.c	/^	struct sockaddr sa;$/;"	m	union:__anon28	typeref:struct:__anon28::sockaddr	file:
sample_format_t	sf.h	/^typedef unsigned int sample_format_t;$/;"	t
sas	server.c	/^	struct sockaddr_storage sas;$/;"	m	union:__anon28	typeref:struct:__anon28::sockaddr_storage	file:
save_ext_playlist_cb	cmus.c	/^static int save_ext_playlist_cb(void *data, struct track_info *ti)$/;"	f	file:
save_playlist_cb	cmus.c	/^static int save_playlist_cb(void *data, struct track_info *ti)$/;"	f	file:
save_ti_cb	cmus.h	/^typedef int (*save_ti_cb)(for_each_ti_cb for_each_ti, const char *filename);$/;"	t
save_tracks_cb	cmus.c	/^typedef int (*save_tracks_cb)(void *data, struct track_info *ti);$/;"	t	file:
scale_from_percentage	utils.h	/^static inline int scale_from_percentage(int val, int max_val)$/;"	f
scale_pos	player.c	/^static unsigned int scale_pos;$/;"	v	file:
scale_sample_int16_t	player.c	/^static inline void scale_sample_int16_t(int16_t *buf, int i, int vol, int swap)$/;"	f	file:
scale_sample_int32_t	player.c	/^static inline void scale_sample_int32_t(int32_t *buf, int i, int vol, int swap)$/;"	f	file:
scale_sample_s24le	player.c	/^static inline int32_t scale_sample_s24le(int32_t s, int vol)$/;"	f	file:
scale_samples	player.c	/^static void scale_samples(char *buffer, unsigned int *countp)$/;"	f	file:
scale_samples_s24le	player.c	/^static void scale_samples_s24le(char *buf, unsigned int count, int l, int r)$/;"	f	file:
scale_to_percentage	utils.h	/^static inline int scale_to_percentage(int val, int max_val)$/;"	f
scroll_offset	options.c	/^int scroll_offset = 2;$/;"	v
search	search.c	/^int search(struct searchable *s, const char *text, enum search_direction dir, int beginning)$/;"	f
search_direction	search.h	/^enum search_direction { SEARCH_FORWARD, SEARCH_BACKWARD };$/;"	g
search_direction	search_mode.c	/^enum search_direction search_direction = SEARCH_FORWARD;$/;"	v	typeref:enum:search_direction
search_history	search_mode.c	/^static struct history search_history;$/;"	v	typeref:struct:history	file:
search_history_filename	search_mode.c	/^static char *search_history_filename;$/;"	v	file:
search_line_empty	search_mode.c	/^static int search_line_empty(void)$/;"	f	file:
search_lock	search.c	/^static void search_lock(void)$/;"	f	file:
search_mode_ch	search_mode.c	/^void search_mode_ch(uchar ch)$/;"	f
search_mode_escape	search_mode.c	/^void search_mode_escape(int c)$/;"	f
search_mode_exit	search_mode.c	/^void search_mode_exit(void)$/;"	f
search_mode_init	search_mode.c	/^void search_mode_init(void)$/;"	f
search_mode_key	search_mode.c	/^void search_mode_key(int key)$/;"	f
search_next	search.c	/^int search_next(struct searchable *s, const char *text, enum search_direction dir)$/;"	f
search_not_found	ui_curses.c	/^void search_not_found(void)$/;"	f
search_pos	history.h	/^	struct list_head *search_pos;$/;"	m	struct:history	typeref:struct:history::list_head
search_restricted	search_mode.c	/^int search_restricted = 0;$/;"	v
search_str	search_mode.c	/^char *search_str = NULL;$/;"	v
search_text	search_mode.c	/^void search_text(const char *text, int restricted, int beginning)$/;"	f
search_unlock	search.c	/^static void search_unlock(void)$/;"	f	file:
searchable	editable.h	/^	struct searchable *searchable;$/;"	m	struct:editable	typeref:struct:editable::searchable
searchable	search.c	/^struct searchable {$/;"	s	file:
searchable	ui_curses.c	/^struct searchable *searchable;$/;"	v	typeref:struct:searchable
searchable_free	search.c	/^void searchable_free(struct searchable *s)$/;"	f
searchable_new	search.c	/^struct searchable *searchable_new(void *data, const struct iter *head, const struct searchable_ops *ops)$/;"	f
searchable_ops	search.h	/^struct searchable_ops {$/;"	s
seek	ip.h	/^	int (*seek)(struct input_plugin_data *ip_data, double offset);$/;"	m	struct:input_plugin_ops
sel	window.h	/^	struct iter sel;$/;"	m	struct:window	typeref:struct:window::iter
sel_changed	window.c	/^static void sel_changed(struct window *win)$/;"	f	file:
sel_changed	window.h	/^	void (*sel_changed)(void);$/;"	m	struct:window
sel_stat	filters.h	/^	unsigned sel_stat : 2;$/;"	m	struct:filter_entry
sel_track_ti	lib.c	/^static struct track_info *sel_track_ti = NULL;$/;"	v	typeref:struct:track_info	file:
select_filter	filters.c	/^static int select_filter(const char *name, int sel_stat)$/;"	f	file:
select_plugin	output.c	/^static int select_plugin(struct output_plugin *o)$/;"	f	file:
send_answer	server.c	/^static ssize_t send_answer(int fd, const char *format, ...)$/;"	f	file:
server_accept	server.c	/^void server_accept(void)$/;"	f
server_address	ui_curses.c	/^static char *server_address = NULL;$/;"	v	file:
server_exit	server.c	/^void server_exit(void)$/;"	f
server_init	server.c	/^void server_init(char *address)$/;"	f
server_password	options.c	/^char *server_password;$/;"	v
server_serve	server.c	/^void server_serve(struct client *client)$/;"	f
server_socket	server.c	/^int server_socket;$/;"	v
set	options.c	/^	opt_set_cb set;$/;"	m	struct:__anon22	file:
set	options.h	/^	opt_set_cb set;$/;"	m	struct:cmus_opt
set_aaa_mode	options.c	/^static void set_aaa_mode(unsigned int id, const char *buf)$/;"	f	file:
set_attr	options.c	/^static void set_attr(unsigned int id, const char *buf)$/;"	f	file:
set_auto_reshuffle	options.c	/^static void set_auto_reshuffle(unsigned int id, const char *buf)$/;"	f	file:
set_buffer_seconds	options.c	/^static void set_buffer_seconds(unsigned int id, const char *buf)$/;"	f	file:
set_buffer_sf	player.c	/^static void set_buffer_sf(void)$/;"	f	file:
set_client_fd	ui_curses.c	/^void set_client_fd(int fd)$/;"	f
set_color	options.c	/^static void set_color(unsigned int id, const char *buf)$/;"	f	file:
set_confirm_run	options.c	/^static void set_confirm_run(unsigned int id, const char *buf)$/;"	f	file:
set_continue	options.c	/^static void set_continue(unsigned int id, const char *buf)$/;"	f	file:
set_device	options.c	/^static void set_device(unsigned int id, const char *buf)$/;"	f	file:
set_display_artist_sort_name	options.c	/^static void set_display_artist_sort_name(unsigned int id, const char *buf)$/;"	f	file:
set_dsp_option	output.c	/^static void set_dsp_option(unsigned int id, const char *val)$/;"	f	file:
set_error	expr.c	/^static void set_error(const char *format, ...)$/;"	f	file:
set_follow	options.c	/^static void set_follow(unsigned int id, const char *buf)$/;"	f	file:
set_format	options.c	/^static void set_format(unsigned int id, const char *buf)$/;"	f	file:
set_icecast_default_charset	options.c	/^static void set_icecast_default_charset(unsigned int id, const char *buf)$/;"	f	file:
set_id3_default_charset	options.c	/^static void set_id3_default_charset(unsigned int id, const char *buf)$/;"	f	file:
set_ip_option	input.c	/^static void set_ip_option(unsigned int id, const char *val)$/;"	f	file:
set_lib_sort	options.c	/^static void set_lib_sort(unsigned int id, const char *buf)$/;"	f	file:
set_mixer_option	output.c	/^static void set_mixer_option(unsigned int id, const char *val)$/;"	f	file:
set_option	ip.h	/^	int (*set_option)(int key, const char *val);$/;"	m	struct:input_plugin_ops
set_option	mixer.h	/^	int (*set_option)(int key, const char *val);$/;"	m	struct:mixer_plugin_ops
set_option	op.h	/^	int (*set_option)(int key, const char *val);$/;"	m	struct:output_plugin_ops
set_output_plugin	options.c	/^static void set_output_plugin(unsigned int id, const char *buf)$/;"	f	file:
set_passwd	options.c	/^static void set_passwd(unsigned int id, const char *buf)$/;"	f	file:
set_pl_sort	options.c	/^static void set_pl_sort(unsigned int id, const char *buf)$/;"	f	file:
set_play_library	options.c	/^static void set_play_library(unsigned int id, const char *buf)$/;"	f	file:
set_play_sorted	options.c	/^static void set_play_sorted(unsigned int id, const char *buf)$/;"	f	file:
set_repeat	options.c	/^static void set_repeat(unsigned int id, const char *buf)$/;"	f	file:
set_repeat_current	options.c	/^static void set_repeat_current(unsigned int id, const char *buf)$/;"	f	file:
set_replaygain	options.c	/^static void set_replaygain(unsigned int id, const char *buf)$/;"	f	file:
set_replaygain_limit	options.c	/^static void set_replaygain_limit(unsigned int id, const char *buf)$/;"	f	file:
set_replaygain_preamp	options.c	/^static void set_replaygain_preamp(unsigned int id, const char *buf)$/;"	f	file:
set_resume	options.c	/^static void set_resume(unsigned int id, const char *buf)$/;"	f	file:
set_rewind_offset	options.c	/^static void set_rewind_offset(unsigned int id, const char *buf)$/;"	f	file:
set_scroll_offset	options.c	/^static void set_scroll_offset(unsigned int id, const char *buf)$/;"	f	file:
set_sel_track	lib.c	/^static void set_sel_track(struct tree_track *tt)$/;"	f	file:
set_set_term_title	options.c	/^static void set_set_term_title(unsigned int id, const char *buf)$/;"	f	file:
set_show_current_bitrate	options.c	/^static void set_show_current_bitrate(unsigned int id, const char *buf)$/;"	f	file:
set_show_hidden	options.c	/^static void set_show_hidden(unsigned int id, const char *buf)$/;"	f	file:
set_show_playback_position	options.c	/^static void set_show_playback_position(unsigned int id, const char *buf)$/;"	f	file:
set_show_remaining_time	options.c	/^static void set_show_remaining_time(unsigned int id, const char *buf)$/;"	f	file:
set_shuffle	options.c	/^static void set_shuffle(unsigned int id, const char *buf)$/;"	f	file:
set_skip_track_info	options.c	/^static void set_skip_track_info(unsigned int id, const char *buf)$/;"	f	file:
set_smart_artist_sort	options.c	/^static void set_smart_artist_sort(unsigned int id, const char *buf)$/;"	f	file:
set_softvol	options.c	/^static void set_softvol(unsigned int id, const char *buf)$/;"	f	file:
set_softvol_state	options.c	/^static void set_softvol_state(unsigned int id, const char *buf)$/;"	f	file:
set_status_display_program	options.c	/^static void set_status_display_program(unsigned int id, const char *buf)$/;"	f	file:
set_term_title	options.c	/^int set_term_title = 1;$/;"	v
set_title	ui_curses.c	/^static void set_title(const char *title)$/;"	f	file:
set_track	pl.c	/^static struct track_info *set_track(struct simple_track *track)$/;"	f	file:
set_view	ui_curses.c	/^void set_view(int view)$/;"	f
set_volume	mixer.h	/^	int (*set_volume)(int l, int r);$/;"	m	struct:mixer_plugin_ops
set_wrap_search	options.c	/^static void set_wrap_search(unsigned int id, const char *buf)$/;"	f	file:
setup_remote	input.c	/^static int setup_remote(struct input_plugin *ip, const struct keyval *headers, int sock)$/;"	f	file:
sf	ip.h	/^	sample_format_t sf;$/;"	m	struct:input_plugin_data
sf_bigendian	sf.h	50;"	d
sf_bits	sf.h	52;"	d
sf_channels	sf.h	54;"	d
sf_get_bigendian	sf.h	44;"	d
sf_get_bits	sf.h	46;"	d
sf_get_channels	sf.h	48;"	d
sf_get_frame_size	sf.h	57;"	d
sf_get_rate	sf.h	47;"	d
sf_get_sample_size	sf.h	56;"	d
sf_get_second_size	sf.h	58;"	d
sf_get_signed	sf.h	45;"	d
sf_need_swap	player.c	/^static inline int sf_need_swap(sample_format_t sf)$/;"	f	file:
sf_rate	sf.h	53;"	d
sf_signed	sf.h	51;"	d
short_key	expr.c	/^	char short_key;$/;"	m	struct:__anon4	file:
short_opt	prog.h	/^	int short_opt;$/;"	m	struct:option
short_option	prog.c	/^static int short_option(int ch, const struct option *options)$/;"	f	file:
show_binding	keys.c	/^void show_binding(const char *context, const char *key)$/;"	f
show_current_bitrate	options.c	/^int show_current_bitrate = 0;$/;"	v
show_cursor	ui_curses.c	/^static int show_cursor;$/;"	v	file:
show_hidden	options.c	/^int show_hidden = 0;$/;"	v
show_playback_position	options.c	/^int show_playback_position = 1;$/;"	v
show_remaining_time	options.c	/^int show_remaining_time = 0;$/;"	v
shuffle	options.c	/^int shuffle = 0;$/;"	v
shuffle_add	lib.c	/^static void shuffle_add(struct tree_track *track)$/;"	f	file:
shuffle_list_add	track.c	/^void shuffle_list_add(struct shuffle_track *track, struct rb_root *tree_root)$/;"	f
shuffle_list_get_next	track.c	/^struct shuffle_track *shuffle_list_get_next(struct rb_root *root, struct shuffle_track *cur,$/;"	f
shuffle_list_get_prev	track.c	/^struct shuffle_track *shuffle_list_get_prev(struct rb_root *root, struct shuffle_track *cur,$/;"	f
shuffle_list_reshuffle	track.c	/^void shuffle_list_reshuffle(struct rb_root *tree_root)$/;"	f
shuffle_track	lib.h	/^	struct shuffle_track shuffle_track;$/;"	m	struct:tree_track	typeref:struct:tree_track::shuffle_track
shuffle_track	track.h	/^struct shuffle_track {$/;"	s
shuffle_track_info	track.h	/^static inline struct track_info *shuffle_track_info(const struct shuffle_track *track)$/;"	f
shuffle_track_init	track.c	/^static void shuffle_track_init(struct shuffle_track *track)$/;"	f	file:
sig_int	ui_curses.c	/^static void sig_int(int sig)$/;"	f	file:
sig_shutdown	ui_curses.c	/^static void sig_shutdown(int sig)$/;"	f	file:
sig_winch	ui_curses.c	/^static void sig_winch(int sig)$/;"	f	file:
simple_list_for_each_marked	track.c	/^int simple_list_for_each_marked(struct list_head *head,$/;"	f
simple_list_get_next	track.c	/^struct simple_track *simple_list_get_next(struct list_head *head, struct simple_track *cur,$/;"	f
simple_list_get_prev	track.c	/^struct simple_track *simple_list_get_prev(struct list_head *head, struct simple_track *cur,$/;"	f
simple_options	options.c	/^} simple_options[] = {$/;"	v	typeref:struct:__anon22	file:
simple_search_ops	editable.c	/^static const struct searchable_ops simple_search_ops = {$/;"	v	typeref:struct:searchable_ops	file:
simple_track	track.h	/^	struct simple_track simple_track;$/;"	m	struct:shuffle_track	typeref:struct:shuffle_track::simple_track
simple_track	track.h	/^struct simple_track {$/;"	s
simple_track_init	track.c	/^void simple_track_init(struct simple_track *track, struct track_info *ti)$/;"	f
simple_track_new	track.c	/^struct simple_track *simple_track_new(struct track_info *ti)$/;"	f
simple_track_search_get_current	track.c	/^int simple_track_search_get_current(void *data, struct iter *iter)$/;"	f
simple_track_search_matches	track.c	/^int simple_track_search_matches(void *data, struct iter *iter, const char *text)$/;"	f
simplify	glob.c	/^static void simplify(struct list_head *head)$/;"	f	file:
size	cache.c	/^	unsigned int size;$/;"	m	struct:cache_entry	file:
size	cmdline.h	/^	int size;$/;"	m	struct:cmdline
size	job.h	/^	size_t size;$/;"	m	struct:update_data
skip_track_info	options.c	/^int skip_track_info = 0;$/;"	v
smart_artist_sort	options.c	/^int smart_artist_sort = 1;$/;"	v
soft_vol	player.c	/^int soft_vol;$/;"	v
soft_vol_db	player.c	/^static const unsigned short soft_vol_db[100] = {$/;"	v	file:
soft_vol_l	player.c	/^int soft_vol_l;$/;"	v
soft_vol_r	player.c	/^int soft_vol_r;$/;"	v
sort_ip	input.c	/^static int sort_ip(const struct list_head *a_, const struct list_head *b_)$/;"	f	file:
sort_key_map	options.c	/^} sort_key_map[] = {$/;"	v	typeref:struct:__anon21	file:
sort_key_t	track_info.h	/^typedef size_t sort_key_t;$/;"	t
sort_key_to_str	options.c	/^static const char *sort_key_to_str(sort_key_t key)$/;"	f	file:
sort_keys	editable.h	/^	sort_key_t *sort_keys;$/;"	m	struct:editable
sort_keys_to_str	options.c	/^static void sort_keys_to_str(const sort_key_t *keys, char *buf, size_t bufsize)$/;"	f	file:
sort_name	lib.h	/^	char *sort_name;$/;"	m	struct:album
sort_name	lib.h	/^	char *sort_name;$/;"	m	struct:artist
sort_str	editable.h	/^	char sort_str[128];$/;"	m	struct:editable
sorted_for_each_sel	command_mode.c	/^static int sorted_for_each_sel(int (*cb)(void *data, struct track_info *ti), void *data, int reverse)$/;"	f	file:
sorted_get_selected	lib.c	/^static struct tree_track *sorted_get_selected(void)$/;"	f	file:
sorted_list_add_track	track.c	/^void sorted_list_add_track(struct list_head *head, struct rb_root *tree_root, struct simple_track *track,$/;"	f
sorted_list_rebuild	track.c	/^void sorted_list_rebuild(struct list_head *head, struct rb_root *tree_root, const sort_key_t *keys)$/;"	f
sorted_list_remove_track	track.c	/^void sorted_list_remove_track(struct list_head *head, struct rb_root *tree_root, struct simple_track *track)$/;"	f
sorted_names	ui_curses.c	/^static const char * const sorted_names[2] = { "", "sorted by " };$/;"	v	file:
sorted_sel_current	lib.c	/^void sorted_sel_current(void)$/;"	f
sorted_set_selected	lib.c	/^struct track_info *sorted_set_selected(void)$/;"	f
sorted_track_to_iter	lib.c	/^static inline void sorted_track_to_iter(struct tree_track *track, struct iter *iter)$/;"	f	file:
source_file	options.c	/^int source_file(const char *filename)$/;"	f
spawn	spawn.c	/^int spawn(char *argv[], int *status, int do_wait)$/;"	f
spawn_status_program	ui_curses.c	/^static void spawn_status_program(void)$/;"	f	file:
special_album_cmp	tree.c	/^static int special_album_cmp(const struct album *a, const struct album *b)$/;"	f	file:
special_album_cmp_date	tree.c	/^static int special_album_cmp_date(const struct album *a, const struct album *b)$/;"	f	file:
special_name_cmp	tree.c	/^static int special_name_cmp(const char *a, const char *collkey_a,$/;"	f	file:
specials	expr.c	/^static const char specials[NR_SPECIALS] = "!<>=&|()";$/;"	v	file:
sprint	ui_curses.c	/^static void sprint(int row, int col, const char *str, int width)$/;"	f	file:
sprint_ascii	ui_curses.c	/^static void sprint_ascii(int row, int col, const char *str, int len)$/;"	f	file:
st	load_dir.h	/^	struct stat st;$/;"	m	struct:directory	typeref:struct:directory::stat
stack4_new	expr.c	/^static unsigned long stack4_new(void)$/;"	f	file:
stack4_pop	expr.c	/^static void stack4_pop(unsigned long *s)$/;"	f	file:
stack4_push	expr.c	/^static void stack4_push(unsigned long *s, unsigned long e)$/;"	f	file:
stack4_replace_top	expr.c	/^static void stack4_replace_top(unsigned long *s, unsigned long e)$/;"	f	file:
stack4_top	expr.c	/^static unsigned long stack4_top(unsigned long s)$/;"	f	file:
stack_print	format_print.c	/^static int stack_print(char *buf, char *stack, int stack_len)$/;"	f	file:
status	options.c	/^	enum player_status status;$/;"	m	struct:resume	typeref:enum:resume::player_status	file:
status	player.h	/^	enum player_status status;$/;"	m	struct:player_info	typeref:enum:player_info::player_status
status_changed	player.h	/^	unsigned int status_changed : 1;$/;"	m	struct:player_info
status_display_program	options.c	/^char *status_display_program = NULL;$/;"	v
status_fopts	ui_curses.c	/^static struct format_option status_fopts[NR_SFS + 1] = {$/;"	v	typeref:struct:format_option	file:
store_sel_track	lib.c	/^static void store_sel_track(void)$/;"	f	file:
str	expr.c	/^	char str[];$/;"	m	struct:token	file:
str	format_print.h	/^	const char *str;$/;"	m	struct:format_option
str	options.c	/^	const char *str;$/;"	m	struct:__anon21	file:
str_defaults	options.c	/^} str_defaults[] = {$/;"	v	typeref:struct:__anon20	file:
str_in_array	cmus.c	/^static int str_in_array(const char *str, const char * const *array)$/;"	f	file:
str_to_int	utils.h	/^static inline int str_to_int(const char *str, long int *val)$/;"	f
strcmp0	utils.h	/^static inline int strcmp0(const char *str1, const char *str2)$/;"	f
strings	cache.c	/^	char strings[];$/;"	m	struct:cache_entry	file:
strnequal	format_print.c	/^static inline int strnequal(const char *a, const char *b, size_t b_len)$/;"	f	file:
strptrcmp	misc.c	/^int strptrcmp(const void *a, const void *b)$/;"	f
strptrcoll	misc.c	/^int strptrcoll(const void *a, const void *b)$/;"	f
swap_s16_byte_order	pcm.c	/^static void swap_s16_byte_order(void *buf, int count)$/;"	f	file:
swap_uint16	utils.h	/^static inline uint16_t swap_uint16(uint16_t x)$/;"	f
swap_uint32	utils.h	/^static inline uint32_t swap_uint32(uint32_t x)$/;"	f
t_fs	ui_curses.c	/^static const char *t_fs;$/;"	v	file:
t_ts	ui_curses.c	/^static const char *t_ts;$/;"	v	file:
tab_expand	command_mode.c	/^static void tab_expand(int direction)$/;"	f	file:
tabexp	tabexp.c	/^struct tabexp tabexp = {$/;"	v	typeref:struct:tabexp
tabexp	tabexp.h	/^struct tabexp {$/;"	s
tabexp_expand	tabexp.c	/^char *tabexp_expand(const char *src, void (*load_matches)(const char *src), int direction)$/;"	f
tabexp_load_dir	tabexp_file.c	/^static void tabexp_load_dir(const char *dirname, const char *start,$/;"	f	file:
tabexp_load_env_path	tabexp_file.c	/^static void tabexp_load_env_path(const char *env_path, const char *start,$/;"	f	file:
tabexp_reset	tabexp.c	/^void tabexp_reset(void)$/;"	f
tails	tabexp.h	/^	char **tails;$/;"	m	struct:tabexp
target	Makefile	/^target = learn$/;"	m
tcap_buffer	ui_curses.c	/^static char tcap_buffer[64];$/;"	v	file:
text	glob.c	/^	char text[];$/;"	m	struct:glob_item	file:
text	help.h	/^		const char *text;			\/* HE_TEXT	*\/$/;"	m	union:help_entry::__anon17
text	history.c	/^	char *text;$/;"	m	struct:history_entry	file:
ti	job.h	/^	struct track_info **ti;$/;"	m	struct:update_data	typeref:struct:update_data::track_info
ti	lib.c	/^	struct track_info *ti;$/;"	m	struct:fh_entry	typeref:struct:fh_entry::track_info	file:
ti	player.h	/^	struct track_info *ti;$/;"	m	struct:player_info	typeref:struct:player_info::track_info
ti_buffer	job.c	/^static struct track_info *ti_buffer[32];$/;"	v	typeref:struct:track_info	file:
ti_buffer_fill	job.c	/^static int ti_buffer_fill;$/;"	v	file:
ti_cmp	lib.c	/^static int ti_cmp(const void *a, const void *b)$/;"	f	file:
ti_filename_cmp	cache.c	/^static int ti_filename_cmp(const void *a, const void *b)$/;"	f	file:
ti_hash	lib.c	/^static struct fh_entry *ti_hash[FH_SIZE] = { NULL, };$/;"	v	typeref:struct:fh_entry	file:
timer_get	debug.c	/^uint64_t timer_get(void)$/;"	f
timer_print	debug.c	/^void timer_print(const char *what, uint64_t usec)$/;"	f
tis	command_mode.c	/^	struct track_info **tis;$/;"	m	struct:track_info_selection	typeref:struct:track_info_selection::track_info	file:
tis_alloc	command_mode.c	/^	int tis_alloc;$/;"	m	struct:track_info_selection	file:
tis_nr	command_mode.c	/^	int tis_nr;$/;"	m	struct:track_info_selection	file:
title	track_info.h	/^	const char *title;$/;"	m	struct:track_info
title_buf	server.c	/^static char *title_buf = NULL;$/;"	v	file:
title_buf	ui_curses.c	/^static char *title_buf = NULL;$/;"	v	file:
to_album	lib.h	/^static inline struct album *to_album(const struct rb_node *node)$/;"	f
to_artist	lib.h	/^static inline struct artist *to_artist(const struct rb_node *node)$/;"	f
to_simple_track	track.h	/^static inline struct simple_track *to_simple_track(const struct list_head *item)$/;"	f
to_sorted	lib.c	/^static inline struct tree_track *to_sorted(const struct list_head *item)$/;"	f	file:
to_tree_track	lib.h	/^static inline struct tree_track *to_tree_track(const struct rb_node *node)$/;"	f
to_utf8	convert.c	/^char *to_utf8(const char *str, const char *enc)$/;"	f
toggle	options.c	/^	opt_toggle_cb toggle;$/;"	m	struct:__anon22	file:
toggle	options.h	/^	opt_toggle_cb toggle;$/;"	m	struct:cmus_opt
toggle_aaa_mode	options.c	/^static void toggle_aaa_mode(unsigned int id)$/;"	f	file:
toggle_auto_reshuffle	options.c	/^static void toggle_auto_reshuffle(unsigned int id)$/;"	f	file:
toggle_confirm_run	options.c	/^static void toggle_confirm_run(unsigned int id)$/;"	f	file:
toggle_continue	options.c	/^static void toggle_continue(unsigned int id)$/;"	f	file:
toggle_display_artist_sort_name	options.c	/^static void toggle_display_artist_sort_name(unsigned int id)$/;"	f	file:
toggle_follow	options.c	/^static void toggle_follow(unsigned int id)$/;"	f	file:
toggle_play_library	options.c	/^static void toggle_play_library(unsigned int id)$/;"	f	file:
toggle_play_sorted	options.c	/^static void toggle_play_sorted(unsigned int id)$/;"	f	file:
toggle_repeat	options.c	/^static void toggle_repeat(unsigned int id)$/;"	f	file:
toggle_repeat_current	options.c	/^static void toggle_repeat_current(unsigned int id)$/;"	f	file:
toggle_replaygain	options.c	/^static void toggle_replaygain(unsigned int id)$/;"	f	file:
toggle_replaygain_limit	options.c	/^static void toggle_replaygain_limit(unsigned int id)$/;"	f	file:
toggle_resume	options.c	/^static void toggle_resume(unsigned int id)$/;"	f	file:
toggle_set_term_title	options.c	/^static void toggle_set_term_title(unsigned int id)$/;"	f	file:
toggle_show_current_bitrate	options.c	/^static void toggle_show_current_bitrate(unsigned int id)$/;"	f	file:
toggle_show_hidden	options.c	/^static void toggle_show_hidden(unsigned int id)$/;"	f	file:
toggle_show_playback_position	options.c	/^static void toggle_show_playback_position(unsigned int id)$/;"	f	file:
toggle_show_remaining_time	options.c	/^static void toggle_show_remaining_time(unsigned int id)$/;"	f	file:
toggle_shuffle	options.c	/^static void toggle_shuffle(unsigned int id)$/;"	f	file:
toggle_skip_track_info	options.c	/^static void toggle_skip_track_info(unsigned int id)$/;"	f	file:
toggle_smart_artist_sort	options.c	/^static void toggle_smart_artist_sort(unsigned int id)$/;"	f	file:
toggle_softvol	options.c	/^static void toggle_softvol(unsigned int id)$/;"	f	file:
toggle_wrap_search	options.c	/^static void toggle_wrap_search(unsigned int id)$/;"	f	file:
tok_to_op	expr.c	/^static const int tok_to_op[NR_TOKS] = {$/;"	v	file:
token	expr.c	/^struct token {$/;"	s	file:
token_type	expr.c	/^enum token_type {$/;"	g	file:
tokenize	expr.c	/^static int tokenize(struct list_head *head, const char *str)$/;"	f	file:
top	window.h	/^	struct iter top;$/;"	m	struct:window	typeref:struct:window::iter
topdir	config.mk	/^topdir = \/home\/beginner\/cmus$/;"	m
total	cache.c	/^static int total;$/;"	v	file:
total_time	editable.h	/^	unsigned int total_time;$/;"	m	struct:editable
track	command_mode.c	/^	const struct simple_track *track;$/;"	m	struct:track_list	typeref:struct:track_list::simple_track	file:
track_fopts	ui_curses.c	/^static struct format_option track_fopts[NR_TFS + 1] = {$/;"	v	typeref:struct:format_option	file:
track_format_valid	ui_curses.c	/^int track_format_valid(const char *format)$/;"	f
track_info	track_info.h	/^struct track_info {$/;"	s
track_info_cb	cmus.h	/^typedef int (*track_info_cb)(void *data, struct track_info *ti);$/;"	t
track_info_cmp	track_info.c	/^int track_info_cmp(const struct track_info *a, const struct track_info *b, const sort_key_t *keys)$/;"	f
track_info_free	track_info.c	/^static void track_info_free(struct track_info *ti)$/;"	f	file:
track_info_has_tag	track_info.c	/^int track_info_has_tag(const struct track_info *ti)$/;"	f
track_info_matches	track_info.c	/^int track_info_matches(const struct track_info *ti, const char *text, unsigned int flags)$/;"	f
track_info_matches_full	track_info.c	/^int track_info_matches_full(const struct track_info *ti, const char *text,$/;"	f
track_info_new	track_info.c	/^struct track_info *track_info_new(const char *filename)$/;"	f
track_info_ref	track_info.c	/^void track_info_ref(struct track_info *ti)$/;"	f
track_info_selection	command_mode.c	/^struct track_info_selection {$/;"	s	file:
track_info_set_comments	track_info.c	/^void track_info_set_comments(struct track_info *ti, struct keyval *comments) {$/;"	f
track_info_unref	track_info.c	/^void track_info_unref(struct track_info *ti)$/;"	f
track_is_compilation	comment.c	/^int track_is_compilation(const struct keyval *comments)$/;"	f
track_is_va_compilation	comment.c	/^int track_is_va_compilation(const struct keyval *comments)$/;"	f
track_list	command_mode.c	/^struct track_list {$/;"	s	file:
track_root	lib.h	/^	struct rb_root track_root;$/;"	m	struct:album	typeref:struct:album::rb_root
track_win_alt_format	options.c	/^char *track_win_alt_format = NULL;$/;"	v
track_win_format	options.c	/^char *track_win_format = NULL;$/;"	v
track_win_format_va	options.c	/^char *track_win_format_va = NULL;$/;"	v
track_win_remove_sel	tree.c	/^static void track_win_remove_sel(void)$/;"	f	file:
track_win_w	ui_curses.c	/^static int track_win_w = 0;$/;"	v	file:
track_win_x	ui_curses.c	/^static int track_win_x = 0;$/;"	v	file:
track_win_y	ui_curses.c	/^static int track_win_y = 0;$/;"	v	file:
tracknumber	track_info.h	/^	int tracknumber;$/;"	m	struct:track_info
tree_add_track	tree.c	/^void tree_add_track(struct tree_track *track)$/;"	f
tree_album_name	tree.c	/^static const char *tree_album_name(const struct track_info* ti)$/;"	f	file:
tree_artist_name	tree.c	/^static const char *tree_artist_name(const struct track_info* ti)$/;"	f	file:
tree_expand_all	tree.c	/^void tree_expand_all(void)$/;"	f
tree_expand_matching	tree.c	/^void tree_expand_matching(const char *text)$/;"	f
tree_for_each_sel	tree.c	/^int tree_for_each_sel(int (*cb)(void *data, struct track_info *ti), void *data, int reverse)$/;"	f
tree_get_next	tree.c	/^static int tree_get_next(struct iter *iter)$/;"	f	file:
tree_get_prev	tree.c	/^static int tree_get_prev(struct iter *iter)$/;"	f	file:
tree_get_selected	tree.c	/^struct tree_track *tree_get_selected(void)$/;"	f
tree_init	tree.c	/^void tree_init(void)$/;"	f
tree_node	lib.h	/^	struct rb_node tree_node;$/;"	m	struct:album	typeref:struct:album::rb_node
tree_node	lib.h	/^	struct rb_node tree_node;$/;"	m	struct:artist	typeref:struct:artist::rb_node
tree_node	lib.h	/^	struct rb_node tree_node;$/;"	m	struct:tree_track	typeref:struct:tree_track::rb_node
tree_node	track.h	/^	struct rb_node tree_node;$/;"	m	struct:shuffle_track	typeref:struct:shuffle_track::rb_node
tree_node	track.h	/^	struct rb_node tree_node;$/;"	m	struct:simple_track	typeref:struct:simple_track::rb_node
tree_node_to_shuffle_track	track.h	/^static inline struct shuffle_track *tree_node_to_shuffle_track(const struct rb_node *node)$/;"	f
tree_node_to_simple_track	track.h	/^static inline struct simple_track *tree_node_to_simple_track(const struct rb_node *node)$/;"	f
tree_remove	tree.c	/^void tree_remove(struct tree_track *track)$/;"	f
tree_remove_sel	tree.c	/^void tree_remove_sel(void)$/;"	f
tree_root	editable.h	/^	struct rb_root tree_root;$/;"	m	struct:editable	typeref:struct:editable::rb_root
tree_search_get_current	tree.c	/^static int tree_search_get_current(void *data, struct iter *iter)$/;"	f	file:
tree_search_get_next	tree.c	/^static int tree_search_get_next(struct iter *iter)$/;"	f	file:
tree_search_get_prev	tree.c	/^static int tree_search_get_prev(struct iter *iter)$/;"	f	file:
tree_search_matches	tree.c	/^static int tree_search_matches(void *data, struct iter *iter, const char *text)$/;"	f	file:
tree_search_ops	tree.c	/^static const struct searchable_ops tree_search_ops = {$/;"	v	typeref:struct:searchable_ops	file:
tree_search_track_to_iter	tree.c	/^static inline void tree_search_track_to_iter(struct tree_track *track, struct iter *iter)$/;"	f	file:
tree_searchable	tree.c	/^struct searchable *tree_searchable;$/;"	v	typeref:struct:searchable
tree_sel_changed	tree.c	/^static void tree_sel_changed(void)$/;"	f	file:
tree_sel_current	tree.c	/^void tree_sel_current(void)$/;"	f
tree_sel_first	tree.c	/^void tree_sel_first(void)$/;"	f
tree_sel_track	tree.c	/^void tree_sel_track(struct tree_track *t)$/;"	f
tree_set_expand_artist	tree.c	/^static void tree_set_expand_artist(struct artist *artist, int expand)$/;"	f	file:
tree_set_selected	tree.c	/^struct track_info *tree_set_selected(void)$/;"	f
tree_sort_artists	tree.c	/^void tree_sort_artists(void)$/;"	f
tree_toggle_active_window	tree.c	/^void tree_toggle_active_window(void)$/;"	f
tree_toggle_expand_artist	tree.c	/^void tree_toggle_expand_artist(void)$/;"	f
tree_track	lib.h	/^struct tree_track {$/;"	s
tree_track_info	lib.h	/^static inline struct track_info *tree_track_info(const struct tree_track *track)$/;"	f
tree_track_to_iter	tree.c	/^static inline void tree_track_to_iter(struct tree_track *track, struct iter *iter)$/;"	f	file:
tree_win_get_selected	tree.c	/^static inline void tree_win_get_selected(struct artist **artist, struct album **album)$/;"	f	file:
tree_win_remove_sel	tree.c	/^static void tree_win_remove_sel(void)$/;"	f	file:
tree_win_w	ui_curses.c	/^static int tree_win_w = 0;$/;"	v	file:
tree_win_x	ui_curses.c	/^static int tree_win_x = 0;$/;"	v	file:
tree_win_y	ui_curses.c	/^static int tree_win_y = 0;$/;"	v	file:
type	browser.h	/^	enum { BROWSER_ENTRY_DIR, BROWSER_ENTRY_FILE, BROWSER_ENTRY_PLLINE } type;$/;"	m	struct:browser_entry	typeref:enum:browser_entry::__anon1
type	expr.c	/^	enum expr_type type;$/;"	m	struct:__anon5	typeref:enum:__anon5::expr_type	file:
type	expr.c	/^	enum token_type type;$/;"	m	struct:token	typeref:enum:token::token_type	file:
type	expr.h	/^	enum expr_type type;$/;"	m	struct:expr	typeref:enum:expr::expr_type
type	format_print.h	/^	enum { FO_STR = 1, FO_INT, FO_TIME, FO_DOUBLE } type;$/;"	m	struct:format_option	typeref:enum:format_option::__anon14
type	glob.c	/^	} type;$/;"	m	struct:glob_item	typeref:enum:glob_item::__anon15	file:
type	help.h	/^	} type;$/;"	m	struct:help_entry	typeref:enum:help_entry::__anon16
type	job.h	/^	enum file_type type;$/;"	m	struct:add_data	typeref:enum:add_data::file_type
type	worker.c	/^	int type;$/;"	m	struct:worker_job	file:
u_casefold	uchar.c	/^char *u_casefold(const char *str)$/;"	f
u_casefold_char	uchar.c	/^static inline uchar u_casefold_char(uchar ch)$/;"	f	file:
u_char_size	uchar.h	/^static inline int u_char_size(uchar uch)$/;"	f
u_char_width	uchar.c	/^int u_char_width(uchar u)$/;"	f
u_copy_chars	uchar.c	/^int u_copy_chars(char *dst, const char *src, int *width)$/;"	f
u_get_char	uchar.c	/^uchar u_get_char(const char *str, int *idx)$/;"	f
u_getch	ui_curses.c	/^static void u_getch(void)$/;"	f	file:
u_is_unicode	uchar.h	/^static inline int u_is_unicode(uchar uch)$/;"	f
u_is_valid	uchar.c	/^int u_is_valid(const char *str)$/;"	f
u_next_char	uchar.h	/^static inline char *u_next_char(const char *str)$/;"	f
u_prev_char_pos	uchar.c	/^void u_prev_char_pos(const char *str, int *idx)$/;"	f
u_set_char	uchar.c	/^void u_set_char(char *str, int *idx, uchar uch)$/;"	f
u_set_char_raw	uchar.c	/^void u_set_char_raw(char *str, int *idx, uchar uch)$/;"	f
u_skip_chars	uchar.c	/^int u_skip_chars(const char *str, int *width)$/;"	f
u_str_nwidth	uchar.c	/^int u_str_nwidth(const char *str, int len)$/;"	f
u_str_width	uchar.c	/^int u_str_width(const char *str)$/;"	f
u_strcase_equal	uchar.c	/^int u_strcase_equal(const char *a, const char *b)$/;"	f
u_strcasecoll	u_collate.c	/^int u_strcasecoll(const char *str1, const char *str2)$/;"	f
u_strcasecoll0	u_collate.c	/^int u_strcasecoll0(const char *str1, const char *str2)$/;"	f
u_strcasecoll_key	u_collate.c	/^char *u_strcasecoll_key(const char *str)$/;"	f
u_strcasecoll_key0	u_collate.c	/^char *u_strcasecoll_key0(const char *str)$/;"	f
u_strcasestr	uchar.c	/^char *u_strcasestr(const char *haystack, const char *needle)$/;"	f
u_strcasestr_base	uchar.c	/^char *u_strcasestr_base(const char *haystack, const char *needle)$/;"	f
u_strcasestr_filename	uchar.c	/^char *u_strcasestr_filename(const char *haystack, const char *needle)$/;"	f
u_strchr	uchar.c	/^char *u_strchr(const char *str, uchar uch)$/;"	f
u_strcoll	u_collate.c	/^int u_strcoll(const char *str1, const char *str2)$/;"	f
u_strcoll_key	u_collate.c	/^char *u_strcoll_key(const char *str)$/;"	f
u_strlen	uchar.c	/^size_t u_strlen(const char *str)$/;"	f
u_strlen_safe	uchar.c	/^size_t u_strlen_safe(const char *str)$/;"	f
u_strncase_equal	uchar.c	/^int u_strncase_equal(const char *a, const char *b, size_t len)$/;"	f
u_strncase_equal_base	uchar.c	/^int u_strncase_equal_base(const char *a, const char *b, size_t len)$/;"	f
u_to_ascii	uchar.c	/^int u_to_ascii(char *dst, const char *src, int len)$/;"	f
uchar	uchar.h	/^typedef unsigned int uchar;$/;"	t
ui_initialized	ui_curses.c	/^int ui_initialized = 0;$/;"	v
ui_input_mode	ui_curses.h	/^enum ui_input_mode {$/;"	g
un	server.c	/^	struct sockaddr_un un;$/;"	m	union:__anon28	typeref:struct:__anon28::sockaddr_un	file:
unbound_cmp	help.c	/^static int unbound_cmp(struct list_head *ai, struct list_head *bi)$/;"	f	file:
unbound_head	help.c	/^static struct list_head *unbound_head;$/;"	v	typeref:struct:list_head	file:
unbound_tail	help.c	/^static struct list_head *unbound_tail;$/;"	v	typeref:struct:list_head	file:
unescape	misc.c	/^const char *unescape(const char *str)$/;"	f
unidecomp_map	unidecomp.h	/^} unidecomp_map[] = {$/;"	v	typeref:struct:__anon33
unlikely	compiler.h	20;"	d
unlikely	compiler.h	25;"	d
unpause	op.h	/^	int (*unpause)(void);$/;"	m	struct:output_plugin_ops
unset_live_filter	lib.c	/^static void unset_live_filter(void)$/;"	f	file:
update	ui_curses.c	/^static void update(void)$/;"	f	file:
update_browser_window	ui_curses.c	/^static void update_browser_window(void)$/;"	f	file:
update_cache_data	job.h	/^struct update_cache_data {$/;"	s
update_cb	cmus.c	/^static int update_cb(void *data, struct track_info *ti)$/;"	f	file:
update_colors	ui_curses.c	/^void update_colors(void)$/;"	f
update_commandline	ui_curses.c	/^static void update_commandline(void)$/;"	f	file:
update_data	job.h	/^struct update_data {$/;"	s
update_editable_window	ui_curses.c	/^static void update_editable_window(struct editable *e, const char *title, const char *filename)$/;"	f	file:
update_filterline	ui_curses.c	/^void update_filterline(void)$/;"	f
update_filters_window	ui_curses.c	/^static void update_filters_window(void)$/;"	f	file:
update_full	ui_curses.c	/^void update_full(void)$/;"	f
update_help_window	ui_curses.c	/^static void update_help_window(void)$/;"	f	file:
update_pl_window	ui_curses.c	/^static void update_pl_window(void)$/;"	f	file:
update_play_queue_window	ui_curses.c	/^static void update_play_queue_window(void)$/;"	f	file:
update_rg_scale	player.c	/^static void update_rg_scale(void)$/;"	f	file:
update_search_line	search_mode.c	/^static void update_search_line(const char *text, int restricted)$/;"	f	file:
update_sorted_window	ui_curses.c	/^static void update_sorted_window(void)$/;"	f	file:
update_statusline	ui_curses.c	/^void update_statusline(void)$/;"	f
update_titleline	ui_curses.c	/^void update_titleline(void)$/;"	f
update_track_window	ui_curses.c	/^static void update_track_window(void)$/;"	f	file:
update_tree_window	ui_curses.c	/^static void update_tree_window(void)$/;"	f	file:
update_window	ui_curses.c	/^static void update_window(struct window *win, int x, int y, int w, const char *title,$/;"	f	file:
uri	http.h	/^	char *uri;$/;"	m	struct:http_uri
uri	http.h	/^	struct http_uri uri;$/;"	m	struct:http_get	typeref:struct:http_get::http_uri
us_sleep	utils.h	/^static inline void us_sleep(int us)$/;"	f
usage	ui_curses.c	/^static const char *usage =$/;"	v	file:
used	job.h	/^	size_t used;$/;"	m	struct:update_data
user	http.h	/^	char *user;$/;"	m	struct:http_uri
user_name	misc.c	/^const char *user_name = NULL;$/;"	v
using_utf8	ui_curses.c	/^int using_utf8 = 0;$/;"	v
utf8_decode	ui_curses.c	/^static void utf8_decode(const char *buffer)$/;"	f	file:
utf8_encode	convert.c	/^int utf8_encode(const char *inbuf, const char *encoding, char **outbuf)$/;"	f
utf8_encode_to_buf	ui_curses.c	/^static void utf8_encode_to_buf(const char *buffer)$/;"	f	file:
utf8_skip	uchar.c	/^const char * const utf8_skip = utf8_skip_data;$/;"	v
utf8_skip_data	uchar.c	/^static const char utf8_skip_data[256] = {$/;"	v	file:
val	expr.h	/^			int val;$/;"	m	struct:expr::__anon7::__anon10
val	keyval.h	/^	char *val;$/;"	m	struct:keyval
valid_cache_entry	cache.c	/^static int valid_cache_entry(const struct cache_entry *e, unsigned int avail)$/;"	f	file:
validate_filter_name	filters.c	/^static int validate_filter_name(const char *name)$/;"	f	file:
value	options.c	/^	const char *value;$/;"	m	struct:__anon20	file:
view	options.c	/^	int view;$/;"	m	struct:resume	file:
view_add	command_mode.c	/^void view_add(int view, char *arg, int prepend)$/;"	f
view_clear	command_mode.c	/^void view_clear(int view)$/;"	f
view_for_each_sel	command_mode.c	/^static for_each_sel_ti_cb view_for_each_sel[4] = {$/;"	v	file:
view_load	command_mode.c	/^void view_load(int view, char *arg)$/;"	f
view_names	options.c	/^const char * const view_names[NR_VIEWS + 1] = {$/;"	v
view_save	command_mode.c	/^void view_save(int view, char *arg, int to_stdout, int filtered, int extended)$/;"	f
view_to_context	keys.c	/^static const enum key_context view_to_context[] = {$/;"	v	typeref:enum:key_context	file:
views_add_track	lib.c	/^static void views_add_track(struct track_info *ti)$/;"	f	file:
visited	filters.h	/^	unsigned visited : 1;$/;"	m	struct:filter_entry
volume_l	output.c	/^int volume_l = -1;$/;"	v
volume_max	output.c	/^int volume_max = 0;$/;"	v
volume_r	output.c	/^int volume_r = -1;$/;"	v
warn	prog.c	/^void warn(const char *format, ...)$/;"	f
warn_errno	prog.c	/^void warn_errno(const char *format, ...)$/;"	f
width	format_print.c	/^static int width;$/;"	v	file:
win	editable.h	/^	struct window *win;$/;"	m	struct:editable	typeref:struct:editable::window
window	window.h	/^struct window {$/;"	s
window_changed	window.c	/^void window_changed(struct window *win)$/;"	f
window_down	window.c	/^void window_down(struct window *win, int rows)$/;"	f
window_free	window.c	/^void window_free(struct window *win)$/;"	f
window_get_next	window.c	/^int window_get_next(struct window *win, struct iter *iter)$/;"	f
window_get_nr_rows	window.c	/^int window_get_nr_rows(struct window *win)$/;"	f
window_get_prev	window.c	/^int window_get_prev(struct window *win, struct iter *iter)$/;"	f
window_get_sel	window.c	/^int window_get_sel(struct window *win, struct iter *iter)$/;"	f
window_get_top	window.c	/^int window_get_top(struct window *win, struct iter *iter)$/;"	f
window_goto_bottom	window.c	/^void window_goto_bottom(struct window *win)$/;"	f
window_goto_pos	window.c	/^static void window_goto_pos(struct window *win, int pos)$/;"	f	file:
window_goto_top	window.c	/^void window_goto_top(struct window *win)$/;"	f
window_new	window.c	/^struct window *window_new(int (*get_prev)(struct iter *), int (*get_next)(struct iter *))$/;"	f
window_page_bottom	window.c	/^void window_page_bottom(struct window *win)$/;"	f
window_page_down	window.c	/^void window_page_down(struct window *win)$/;"	f
window_page_middle	window.c	/^void window_page_middle(struct window *win)$/;"	f
window_page_top	window.c	/^void window_page_top(struct window *win)$/;"	f
window_page_up	window.c	/^void window_page_up(struct window *win)$/;"	f
window_row_vanishes	window.c	/^void window_row_vanishes(struct window *win, struct iter *iter)$/;"	f
window_set_contents	window.c	/^void window_set_contents(struct window *win, void *head)$/;"	f
window_set_empty	window.c	/^void window_set_empty(struct window *win)$/;"	f
window_set_nr_rows	window.c	/^void window_set_nr_rows(struct window *win, int nr_rows)$/;"	f
window_set_sel	window.c	/^void window_set_sel(struct window *win, struct iter *iter)$/;"	f
window_title_alt_format	options.c	/^char *window_title_alt_format = NULL;$/;"	v
window_title_format	options.c	/^char *window_title_format = NULL;$/;"	v
window_up	window.c	/^void window_up(struct window *win, int rows)$/;"	f
worker_add_job	worker.c	/^void worker_add_job(int type, void (*job_cb)(void *data),$/;"	f
worker_cancelling	worker.c	/^int worker_cancelling(void)$/;"	f
worker_cond	worker.c	/^static pthread_cond_t worker_cond = PTHREAD_COND_INITIALIZER;$/;"	v	file:
worker_exit	worker.c	/^void worker_exit(void)$/;"	f
worker_has_job	worker.c	/^int worker_has_job(int type)$/;"	f
worker_init	worker.c	/^void worker_init(void)$/;"	f
worker_job	worker.c	/^struct worker_job {$/;"	s	file:
worker_lock	worker.c	51;"	d	file:
worker_loop	worker.c	/^static void *worker_loop(void *arg)$/;"	f	file:
worker_mutex	worker.c	/^static pthread_mutex_t worker_mutex = CMUS_MUTEX_INITIALIZER;$/;"	v	file:
worker_remove_jobs	worker.c	/^void worker_remove_jobs(int type)$/;"	f
worker_thread	worker.c	/^static pthread_t worker_thread;$/;"	v	file:
worker_unlock	worker.c	52;"	d	file:
wrap_search	options.c	/^int wrap_search = 1;$/;"	v
wrapper_cb	command_mode.c	/^static int wrapper_cb(void *data, struct track_info *ti)$/;"	f	file:
wrapper_cb_data	command_mode.c	/^struct wrapper_cb_data {$/;"	s	file:
write	op.h	/^	int (*write)(const char *buffer, int count);$/;"	m	struct:output_plugin_ops
write_all	file.c	/^ssize_t write_all(int fd, const void *buf, size_t count)$/;"	f
write_s24le	player.c	/^static inline void write_s24le(char *buf, int32_t x)$/;"	f	file:
write_ti	cache.c	/^static void write_ti(int fd, struct gbuf *buf, struct track_info *ti, unsigned int *offsetp)$/;"	f	file:
xmalloc	xmalloc.h	/^static inline void * __MALLOC xmalloc(size_t size)$/;"	f
xmalloc0	xmalloc.h	/^static inline void * __MALLOC xmalloc0(size_t size)$/;"	f
xnew	xmalloc.h	32;"	d
xnew0	xmalloc.h	33;"	d
xrealloc	xmalloc.h	/^static inline void * __MALLOC xrealloc(void *ptr, size_t size)$/;"	f
xrenew	xmalloc.h	34;"	d
xstrdup	xmalloc.h	/^static inline char * __MALLOC xstrdup(const char *str)$/;"	f
xstrjoin	xstrjoin.c	/^char *xstrjoin(const char *a, const char *b)$/;"	f
xstrndup	xmalloc.c	/^char *xstrndup(const char *str, size_t n)$/;"	f
xstrndup	xmalloc.h	/^static inline char * __MALLOC xstrndup(const char *str, size_t n)$/;"	f
yes_no_query	ui_curses.c	/^int yes_no_query(const char *format, ...)$/;"	f
